// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ortb.proto

package openrtb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Capping int32

const (
	Capping_Strict Capping = 0
	Capping_Reset  Capping = 1
	Capping_None   Capping = 2
)

var Capping_name = map[int32]string{
	0: "Strict",
	1: "Reset",
	2: "None",
}
var Capping_value = map[string]int32{
	"Strict": 0,
	"Reset":  1,
	"None":   2,
}

func (x Capping) String() string {
	return proto.EnumName(Capping_name, int32(x))
}
func (Capping) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{0}
}

type Mode int32

const (
	Mode_LIVE Mode = 0
	Mode_TEST Mode = 1
)

var Mode_name = map[int32]string{
	0: "LIVE",
	1: "TEST",
}
var Mode_value = map[string]int32{
	"LIVE": 0,
	"TEST": 1,
}

func (x Mode) String() string {
	return proto.EnumName(Mode_name, int32(x))
}
func (Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{1}
}

// The following table lists the services and/or vendors used for resolving IP addresses to geolocations.
type IPLocation int32

const (
	IPLocation_UNKNOWNIP   IPLocation = 0
	IPLocation_IP2LOCATION IPLocation = 1
	IPLocation_NEUSTAR     IPLocation = 2
	IPLocation_MAXMIND     IPLocation = 3
	IPLocation_NETACUITY   IPLocation = 4
)

var IPLocation_name = map[int32]string{
	0: "UNKNOWNIP",
	1: "IP2LOCATION",
	2: "NEUSTAR",
	3: "MAXMIND",
	4: "NETACUITY",
}
var IPLocation_value = map[string]int32{
	"UNKNOWNIP":   0,
	"IP2LOCATION": 1,
	"NEUSTAR":     2,
	"MAXMIND":     3,
	"NETACUITY":   4,
}

func (x IPLocation) String() string {
	return proto.EnumName(IPLocation_name, int32(x))
}
func (IPLocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{2}
}

// The following table lists the options to indicate how the geographic information was determined
type GeoType int32

const (
	GeoType_UNKNOWNGT    GeoType = 0
	GeoType_GPS          GeoType = 1
	GeoType_IPADDRESS    GeoType = 2
	GeoType_USERPROVIDED GeoType = 3
)

var GeoType_name = map[int32]string{
	0: "UNKNOWNGT",
	1: "GPS",
	2: "IPADDRESS",
	3: "USERPROVIDED",
}
var GeoType_value = map[string]int32{
	"UNKNOWNGT":    0,
	"GPS":          1,
	"IPADDRESS":    2,
	"USERPROVIDED": 3,
}

func (x GeoType) String() string {
	return proto.EnumName(GeoType_name, int32(x))
}
func (GeoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{3}
}

// The following table lists the various options for the type of device connectivity.
type ConnectionType int32

const (
	ConnectionType_UNKNOWNCT                ConnectionType = 0
	ConnectionType_EHTERNET                 ConnectionType = 1
	ConnectionType_WIFI                     ConnectionType = 2
	ConnectionType_CELLULAT_NETWORK_UNKNOWN ConnectionType = 3
	ConnectionType_CELLULAT_NETWORK_2G      ConnectionType = 4
	ConnectionType_CELLULAT_NETWORK_3G      ConnectionType = 5
	ConnectionType_CELLULAT_NETWORK_4G      ConnectionType = 6
)

var ConnectionType_name = map[int32]string{
	0: "UNKNOWNCT",
	1: "EHTERNET",
	2: "WIFI",
	3: "CELLULAT_NETWORK_UNKNOWN",
	4: "CELLULAT_NETWORK_2G",
	5: "CELLULAT_NETWORK_3G",
	6: "CELLULAT_NETWORK_4G",
}
var ConnectionType_value = map[string]int32{
	"UNKNOWNCT":                0,
	"EHTERNET":                 1,
	"WIFI":                     2,
	"CELLULAT_NETWORK_UNKNOWN": 3,
	"CELLULAT_NETWORK_2G":      4,
	"CELLULAT_NETWORK_3G":      5,
	"CELLULAT_NETWORK_4G":      6,
}

func (x ConnectionType) String() string {
	return proto.EnumName(ConnectionType_name, int32(x))
}
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{4}
}

// The following table lists the type of device from which the impression originated.
// OpenRTB version 2.2 of the specification added distinct values for Mobile and Tablet. It is
// recommended that any bidder adding support for 2.2 treat a value of 1 as an acceptable alias of 4 & 5.
// This OpenRTB table has values derived from the Inventory Quality Guidelines (IQG). Practitioners should
// keep in sync with updates to the IQG values.
type DeviceType int32

const (
	DeviceType_UNKNOWNDT         DeviceType = 0
	DeviceType_MOBILE_TABLET     DeviceType = 1
	DeviceType_PERSONAL_COMPUTER DeviceType = 2
	DeviceType_CONNECTED_TV      DeviceType = 3
	DeviceType_PHONE             DeviceType = 4
	DeviceType_TABLET            DeviceType = 5
	DeviceType_CONNECTED_DEVICE  DeviceType = 6
	DeviceType_SET_TOP_BOX       DeviceType = 7
)

var DeviceType_name = map[int32]string{
	0: "UNKNOWNDT",
	1: "MOBILE_TABLET",
	2: "PERSONAL_COMPUTER",
	3: "CONNECTED_TV",
	4: "PHONE",
	5: "TABLET",
	6: "CONNECTED_DEVICE",
	7: "SET_TOP_BOX",
}
var DeviceType_value = map[string]int32{
	"UNKNOWNDT":         0,
	"MOBILE_TABLET":     1,
	"PERSONAL_COMPUTER": 2,
	"CONNECTED_TV":      3,
	"PHONE":             4,
	"TABLET":            5,
	"CONNECTED_DEVICE":  6,
	"SET_TOP_BOX":       7,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{5}
}

// OpenRTB 2.0: The following table lists the options for the various
// bid response protocols that could be supported by an exchange.
type Protocol int32

const (
	Protocol_UNKNOWNP          Protocol = 0
	Protocol_VAST_1_0          Protocol = 1
	Protocol_VAST_2_0          Protocol = 2
	Protocol_VAST_3_0          Protocol = 3
	Protocol_VAST_1_0_WRAPPER  Protocol = 4
	Protocol_VAST_2_0_WRAPPER  Protocol = 5
	Protocol_VAST_3_0_WRAPPER  Protocol = 6
	Protocol_VAST_4_0          Protocol = 7
	Protocol_VAST_4_0_WRAPPER  Protocol = 8
	Protocol_DAAST_1_0         Protocol = 9
	Protocol_DAAST_1_0_WRAPPER Protocol = 10
)

var Protocol_name = map[int32]string{
	0:  "UNKNOWNP",
	1:  "VAST_1_0",
	2:  "VAST_2_0",
	3:  "VAST_3_0",
	4:  "VAST_1_0_WRAPPER",
	5:  "VAST_2_0_WRAPPER",
	6:  "VAST_3_0_WRAPPER",
	7:  "VAST_4_0",
	8:  "VAST_4_0_WRAPPER",
	9:  "DAAST_1_0",
	10: "DAAST_1_0_WRAPPER",
}
var Protocol_value = map[string]int32{
	"UNKNOWNP":          0,
	"VAST_1_0":          1,
	"VAST_2_0":          2,
	"VAST_3_0":          3,
	"VAST_1_0_WRAPPER":  4,
	"VAST_2_0_WRAPPER":  5,
	"VAST_3_0_WRAPPER":  6,
	"VAST_4_0":          7,
	"VAST_4_0_WRAPPER":  8,
	"DAAST_1_0":         9,
	"DAAST_1_0_WRAPPER": 10,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{6}
}

// OpenRTB 2.5: The various modes for when playback terminates.
type PlaybackCessationMode int32

const (
	// not valid OpenRTB
	PlaybackCessationMode_UNKNOWN PlaybackCessationMode = 0
	// On Video Completion or when Terminated by User
	PlaybackCessationMode_COMPLETION_OR_USER PlaybackCessationMode = 1
	// On Leaving Viewport or when Terminated by User
	PlaybackCessationMode_LEAVING_OR_USER PlaybackCessationMode = 2
	// On Leaving Viewport Continues as a Floating/Slider Unit until
	// Video Completion or when Terminated by User
	PlaybackCessationMode_LEAVING_CONTINUES_OR_USER PlaybackCessationMode = 3
)

var PlaybackCessationMode_name = map[int32]string{
	0: "UNKNOWN",
	1: "COMPLETION_OR_USER",
	2: "LEAVING_OR_USER",
	3: "LEAVING_CONTINUES_OR_USER",
}
var PlaybackCessationMode_value = map[string]int32{
	"UNKNOWN":                   0,
	"COMPLETION_OR_USER":        1,
	"LEAVING_OR_USER":           2,
	"LEAVING_CONTINUES_OR_USER": 3,
}

func (x PlaybackCessationMode) String() string {
	return proto.EnumName(PlaybackCessationMode_name, int32(x))
}
func (PlaybackCessationMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{7}
}

// OpenRTB 2.5: The following table lists the various types of video placements
// derived largely from the IAB Digital Video Guidelines.
type VideoPlacementType int32

const (
	// The video placement is not defined.
	// Default value.
	VideoPlacementType_UNDEFINED_VIDEO_PLACEMENT VideoPlacementType = 0
	// Played before, during or after the streaming video content
	// that the consumer has requested.
	// E.G.: Pre-roll, Mid-roll, Post-roll.
	VideoPlacementType_IN_STREAM_PLACEMENT VideoPlacementType = 1
	// Exists within a web banner that leverages the banner space
	// to deliver a video experience as opposed to another static
	// or rich media format.
	// The format relies on the existence of display ad inventory
	// on the page for its delivery.
	VideoPlacementType_IN_BANNER_PLACEMENT VideoPlacementType = 2
	// Loads and plays dynamically between paragraphs of editorial content;
	// existing as a standalone branded message.
	VideoPlacementType_IN_ARTICLE_PLACEMENT VideoPlacementType = 3
	// In-Feed - Found in content, social, or product feeds.
	VideoPlacementType_IN_FEED_PLACEMENT VideoPlacementType = 4
	// Interstitial/Slider/Floating.
	// Covers the entire or a portion of screen area,
	// but is always on screen while displayed
	// (i.e. cannot be scrolled out of view).
	// Note that a full-screen interstitial (e.g., in mobile)
	// can be distinguished from a floating/slider unit by the imp.instl field.
	VideoPlacementType_FLOATING_PLACEMENT VideoPlacementType = 5
)

var VideoPlacementType_name = map[int32]string{
	0: "UNDEFINED_VIDEO_PLACEMENT",
	1: "IN_STREAM_PLACEMENT",
	2: "IN_BANNER_PLACEMENT",
	3: "IN_ARTICLE_PLACEMENT",
	4: "IN_FEED_PLACEMENT",
	5: "FLOATING_PLACEMENT",
}
var VideoPlacementType_value = map[string]int32{
	"UNDEFINED_VIDEO_PLACEMENT": 0,
	"IN_STREAM_PLACEMENT":       1,
	"IN_BANNER_PLACEMENT":       2,
	"IN_ARTICLE_PLACEMENT":      3,
	"IN_FEED_PLACEMENT":         4,
	"FLOATING_PLACEMENT":        5,
}

func (x VideoPlacementType) String() string {
	return proto.EnumName(VideoPlacementType_name, int32(x))
}
func (VideoPlacementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{8}
}

// OpenRTB 2.1: The following table lists the options for the
// video quality. These values are defined by the IAB -
// http://www.iab.net/media/file/long-form-video-final.pdf.
type CompanionType int32

const (
	// invalid OpenRTB value
	CompanionType_UNKNOWNCPT       CompanionType = 0
	CompanionType_STATIC           CompanionType = 1
	CompanionType_HTML             CompanionType = 2
	CompanionType_COMPANION_IFRAME CompanionType = 3
)

var CompanionType_name = map[int32]string{
	0: "UNKNOWNCPT",
	1: "STATIC",
	2: "HTML",
	3: "COMPANION_IFRAME",
}
var CompanionType_value = map[string]int32{
	"UNKNOWNCPT":       0,
	"STATIC":           1,
	"HTML":             2,
	"COMPANION_IFRAME": 3,
}

func (x CompanionType) String() string {
	return proto.EnumName(CompanionType_name, int32(x))
}
func (CompanionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{9}
}

// OpenRTB 2.0: The following table is a list of API frameworks supported
// by the publisher.  Note that MRAID-1 is a subset of MRAID-2.
// In OpenRTB 2.1 and prior, value "3" was "MRAID".  However, not all
// MRAID capable APIs understand MRAID-2 features and as such the only
// safe interpretation of value "3" is MRAID-1. In OpenRTB 2.2, this was
// made explicit and MRAID-2 has been added as value "5".
type APIFramework int32

const (
	// invalid OpenRTB value
	APIFramework_UNKNOWNAPIF APIFramework = 0
	APIFramework_VPAID_1     APIFramework = 1
	APIFramework_VPAID_2     APIFramework = 2
	APIFramework_MRAID_1     APIFramework = 3
	APIFramework_ORMMA       APIFramework = 4
	APIFramework_MRAID_2     APIFramework = 5
	APIFramework_MRAID_3     APIFramework = 6
)

var APIFramework_name = map[int32]string{
	0: "UNKNOWNAPIF",
	1: "VPAID_1",
	2: "VPAID_2",
	3: "MRAID_1",
	4: "ORMMA",
	5: "MRAID_2",
	6: "MRAID_3",
}
var APIFramework_value = map[string]int32{
	"UNKNOWNAPIF": 0,
	"VPAID_1":     1,
	"VPAID_2":     2,
	"MRAID_1":     3,
	"ORMMA":       4,
	"MRAID_2":     5,
	"MRAID_3":     6,
}

func (x APIFramework) String() string {
	return proto.EnumName(APIFramework_name, int32(x))
}
func (APIFramework) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{10}
}

// OpenRTB 2.0: The following table specifies the position of the ad as a
// relative measure of visibility or prominence.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net. Values "3" - "6" apply to apps
// per the mobile addendum to QAG version 1.5.
type AdPosition int32

const (
	AdPosition_UNKNOWNADP     AdPosition = 0
	AdPosition_ABOVE_THE_FOLD AdPosition = 1
	// May or may not be immediately visible depending on screen size and
	// resolution.
	// @deprecated
	AdPosition_DEPRECATED_LIKELY_BELOW_THE_FOLD AdPosition = 2
	AdPosition_BELOW_THE_FOLD                   AdPosition = 3
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_HEADER AdPosition = 4
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_FOOTER AdPosition = 5
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_SIDEBAR AdPosition = 6
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_AD_POSITION_FULLSCREEN AdPosition = 7
)

var AdPosition_name = map[int32]string{
	0: "UNKNOWNADP",
	1: "ABOVE_THE_FOLD",
	2: "DEPRECATED_LIKELY_BELOW_THE_FOLD",
	3: "BELOW_THE_FOLD",
	4: "HEADER",
	5: "FOOTER",
	6: "SIDEBAR",
	7: "AD_POSITION_FULLSCREEN",
}
var AdPosition_value = map[string]int32{
	"UNKNOWNADP":                       0,
	"ABOVE_THE_FOLD":                   1,
	"DEPRECATED_LIKELY_BELOW_THE_FOLD": 2,
	"BELOW_THE_FOLD":                   3,
	"HEADER":                           4,
	"FOOTER":                           5,
	"SIDEBAR":                          6,
	"AD_POSITION_FULLSCREEN":           7,
}

func (x AdPosition) String() string {
	return proto.EnumName(AdPosition_name, int32(x))
}
func (AdPosition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{11}
}

// OpenRTB 2.0: The following table lists the various options for the
// delivery of video content.
type ContentDeliveryMethod int32

const (
	// invalid OpenRTB value
	ContentDeliveryMethod_UNKNOWNCDM  ContentDeliveryMethod = 0
	ContentDeliveryMethod_STREAMING   ContentDeliveryMethod = 1
	ContentDeliveryMethod_PROGRESSIVE ContentDeliveryMethod = 2
)

var ContentDeliveryMethod_name = map[int32]string{
	0: "UNKNOWNCDM",
	1: "STREAMING",
	2: "PROGRESSIVE",
}
var ContentDeliveryMethod_value = map[string]int32{
	"UNKNOWNCDM":  0,
	"STREAMING":   1,
	"PROGRESSIVE": 2,
}

func (x ContentDeliveryMethod) String() string {
	return proto.EnumName(ContentDeliveryMethod_name, int32(x))
}
func (ContentDeliveryMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{12}
}

// OpenRTB 2.0: The following table specifies a standard list of creative
// attributes that can describe an ad being served or serve as restrictions
// of thereof.
type CreativeAttribute int32

const (
	// invalid OpenRTB value
	CreativeAttribute_UNKNOWNCA                      CreativeAttribute = 0
	CreativeAttribute_AUDIO_AUTO_PLAY                CreativeAttribute = 1
	CreativeAttribute_AUDIO_USER_INITIATED           CreativeAttribute = 2
	CreativeAttribute_EXPANDABLE_AUTOMATIC           CreativeAttribute = 3
	CreativeAttribute_EXPANDABLE_CLICK_INITIATED     CreativeAttribute = 4
	CreativeAttribute_EXPANDABLE_ROLLOVER_INITIATED  CreativeAttribute = 5
	CreativeAttribute_VIDEO_IN_BANNER_AUTO_PLAY      CreativeAttribute = 6
	CreativeAttribute_VIDEO_IN_BANNER_USER_INITIATED CreativeAttribute = 7
	CreativeAttribute_POP                            CreativeAttribute = 8
	CreativeAttribute_PROVOCATIVE_OR_SUGGESTIVE      CreativeAttribute = 9
	// Defined as "Shaky, Flashing, Flickering, Extreme Animation, Smileys".
	CreativeAttribute_ANNOYING                      CreativeAttribute = 10
	CreativeAttribute_SURVEYS                       CreativeAttribute = 11
	CreativeAttribute_TEXT_ONLY                     CreativeAttribute = 12
	CreativeAttribute_USER_INTERACTIVE              CreativeAttribute = 13
	CreativeAttribute_WINDOWS_DIALOG_OR_ALERT_STYLE CreativeAttribute = 14
	CreativeAttribute_HAS_AUDIO_ON_OFF_BUTTON       CreativeAttribute = 15
	CreativeAttribute_AD_CAN_BE_SKIPPED             CreativeAttribute = 16
	CreativeAttribute_FLASH                         CreativeAttribute = 17
)

var CreativeAttribute_name = map[int32]string{
	0:  "UNKNOWNCA",
	1:  "AUDIO_AUTO_PLAY",
	2:  "AUDIO_USER_INITIATED",
	3:  "EXPANDABLE_AUTOMATIC",
	4:  "EXPANDABLE_CLICK_INITIATED",
	5:  "EXPANDABLE_ROLLOVER_INITIATED",
	6:  "VIDEO_IN_BANNER_AUTO_PLAY",
	7:  "VIDEO_IN_BANNER_USER_INITIATED",
	8:  "POP",
	9:  "PROVOCATIVE_OR_SUGGESTIVE",
	10: "ANNOYING",
	11: "SURVEYS",
	12: "TEXT_ONLY",
	13: "USER_INTERACTIVE",
	14: "WINDOWS_DIALOG_OR_ALERT_STYLE",
	15: "HAS_AUDIO_ON_OFF_BUTTON",
	16: "AD_CAN_BE_SKIPPED",
	17: "FLASH",
}
var CreativeAttribute_value = map[string]int32{
	"UNKNOWNCA":                      0,
	"AUDIO_AUTO_PLAY":                1,
	"AUDIO_USER_INITIATED":           2,
	"EXPANDABLE_AUTOMATIC":           3,
	"EXPANDABLE_CLICK_INITIATED":     4,
	"EXPANDABLE_ROLLOVER_INITIATED":  5,
	"VIDEO_IN_BANNER_AUTO_PLAY":      6,
	"VIDEO_IN_BANNER_USER_INITIATED": 7,
	"POP":                            8,
	"PROVOCATIVE_OR_SUGGESTIVE":      9,
	"ANNOYING":                       10,
	"SURVEYS":                        11,
	"TEXT_ONLY":                      12,
	"USER_INTERACTIVE":               13,
	"WINDOWS_DIALOG_OR_ALERT_STYLE":  14,
	"HAS_AUDIO_ON_OFF_BUTTON":        15,
	"AD_CAN_BE_SKIPPED":              16,
	"FLASH":                          17,
}

func (x CreativeAttribute) String() string {
	return proto.EnumName(CreativeAttribute_name, int32(x))
}
func (CreativeAttribute) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{13}
}

// OpenRTB 2.0: The following table lists the various playback methods.
type PlaybackMethod int32

const (
	// invalid OpenRTB value
	PlaybackMethod_UNKNOWNPM PlaybackMethod = 0
	// Initiates on Page Load with Sound On.
	PlaybackMethod_AUTO_PLAY_SOUND_ON PlaybackMethod = 1
	// Initiates on Page Load with Sound Off by Default.
	PlaybackMethod_AUTO_PLAY_SOUND_OFF PlaybackMethod = 2
	// Initiates on Click with Sound On.
	PlaybackMethod_CLICK_TO_PLAY PlaybackMethod = 3
	// Initiates on Mouse-Over with Sound On.
	PlaybackMethod_MOUSE_OVER PlaybackMethod = 4
	// Initiates on Entering Viewport with Sound On.
	PlaybackMethod_ENTER_SOUND_ON PlaybackMethod = 5
	// Initiates on Entering Viewport with Sound Off by Default.
	PlaybackMethod_ENTER_SOUND_OFF PlaybackMethod = 6
)

var PlaybackMethod_name = map[int32]string{
	0: "UNKNOWNPM",
	1: "AUTO_PLAY_SOUND_ON",
	2: "AUTO_PLAY_SOUND_OFF",
	3: "CLICK_TO_PLAY",
	4: "MOUSE_OVER",
	5: "ENTER_SOUND_ON",
	6: "ENTER_SOUND_OFF",
}
var PlaybackMethod_value = map[string]int32{
	"UNKNOWNPM":           0,
	"AUTO_PLAY_SOUND_ON":  1,
	"AUTO_PLAY_SOUND_OFF": 2,
	"CLICK_TO_PLAY":       3,
	"MOUSE_OVER":          4,
	"ENTER_SOUND_ON":      5,
	"ENTER_SOUND_OFF":     6,
}

func (x PlaybackMethod) String() string {
	return proto.EnumName(PlaybackMethod_name, int32(x))
}
func (PlaybackMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{14}
}

// OpenRTB 2.0: The following table indicates the options for video
// linearity. "In-stream" or "linear" video refers to pre-roll, post-roll,
// or mid-roll video ads where the user is forced to watch ad in order to
// see the video content. "Overlay" or "non-linear" refer to ads that are
// shown on top of the video content.
//
// This field is optional. The following is the interpretation of the
// bidder based upon presence or absence of the field in the bid request:
// - If no value is set, any ad (linear or not) can be present
//   in the response.
// - If a value is set, only ads of the corresponding type can be present
//   in the response.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type VideoLinearity int32

const (
	// invalid OpenRTB value
	VideoLinearity_UNKNOWNVL  VideoLinearity = 0
	VideoLinearity_LINEAR     VideoLinearity = 1
	VideoLinearity_NON_LINEAR VideoLinearity = 2
)

var VideoLinearity_name = map[int32]string{
	0: "UNKNOWNVL",
	1: "LINEAR",
	2: "NON_LINEAR",
}
var VideoLinearity_value = map[string]int32{
	"UNKNOWNVL":  0,
	"LINEAR":     1,
	"NON_LINEAR": 2,
}

func (x VideoLinearity) String() string {
	return proto.EnumName(VideoLinearity_name, int32(x))
}
func (VideoLinearity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{15}
}

// OpenRTB 2.0: The following table lists the directions in which an
// expandable ad may expand, given the positioning of the ad unit on the
// page and constraints imposed by the content.
type ExpandableDirection int32

const (
	// invalid OpenRTB value
	ExpandableDirection_UNKNOWNED             ExpandableDirection = 0
	ExpandableDirection_LEFT                  ExpandableDirection = 1
	ExpandableDirection_RIGHT                 ExpandableDirection = 2
	ExpandableDirection_UP                    ExpandableDirection = 3
	ExpandableDirection_DOWN                  ExpandableDirection = 4
	ExpandableDirection_EXPANDABLE_FULLSCREEN ExpandableDirection = 5
)

var ExpandableDirection_name = map[int32]string{
	0: "UNKNOWNED",
	1: "LEFT",
	2: "RIGHT",
	3: "UP",
	4: "DOWN",
	5: "EXPANDABLE_FULLSCREEN",
}
var ExpandableDirection_value = map[string]int32{
	"UNKNOWNED":             0,
	"LEFT":                  1,
	"RIGHT":                 2,
	"UP":                    3,
	"DOWN":                  4,
	"EXPANDABLE_FULLSCREEN": 5,
}

func (x ExpandableDirection) String() string {
	return proto.EnumName(ExpandableDirection_name, int32(x))
}
func (ExpandableDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{16}
}

// OpenRTB 2.0: types of ads that can be accepted by the exchange unless
// restricted by publisher site settings.
type BannerAdType int32

const (
	// invalid OpenRTB value
	BannerAdType_UNKNOWNBADT BannerAdType = 0
	// "Usually mobile".
	BannerAdType_XHTML_TEXT_AD BannerAdType = 1
	// "Usually mobile".
	BannerAdType_XHTML_BANNER_AD BannerAdType = 2
	// Javascript must be valid XHTML (ie, script tags included).
	BannerAdType_JAVASCRIPT_AD BannerAdType = 3
	// Iframe.
	BannerAdType_IFRAME BannerAdType = 4
)

var BannerAdType_name = map[int32]string{
	0: "UNKNOWNBADT",
	1: "XHTML_TEXT_AD",
	2: "XHTML_BANNER_AD",
	3: "JAVASCRIPT_AD",
	4: "IFRAME",
}
var BannerAdType_value = map[string]int32{
	"UNKNOWNBADT":     0,
	"XHTML_TEXT_AD":   1,
	"XHTML_BANNER_AD": 2,
	"JAVASCRIPT_AD":   3,
	"IFRAME":          4,
}

func (x BannerAdType) String() string {
	return proto.EnumName(BannerAdType_name, int32(x))
}
func (BannerAdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{17}
}

// OpenRTB 2.4: The following table lists the types of volume normalization
// modes, typically for audio.
type VolumeNormalizationMode int32

const (
	VolumeNormalizationMode_NONE           VolumeNormalizationMode = 0
	VolumeNormalizationMode_AVERAGE_VOLUME VolumeNormalizationMode = 1
	VolumeNormalizationMode_PEAK_VOLUME    VolumeNormalizationMode = 2
	VolumeNormalizationMode_LOUDNESS       VolumeNormalizationMode = 3
	VolumeNormalizationMode_CUSTOM_VOLUME  VolumeNormalizationMode = 4
)

var VolumeNormalizationMode_name = map[int32]string{
	0: "NONE",
	1: "AVERAGE_VOLUME",
	2: "PEAK_VOLUME",
	3: "LOUDNESS",
	4: "CUSTOM_VOLUME",
}
var VolumeNormalizationMode_value = map[string]int32{
	"NONE":           0,
	"AVERAGE_VOLUME": 1,
	"PEAK_VOLUME":    2,
	"LOUDNESS":       3,
	"CUSTOM_VOLUME":  4,
}

func (x VolumeNormalizationMode) String() string {
	return proto.EnumName(VolumeNormalizationMode_name, int32(x))
}
func (VolumeNormalizationMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{18}
}

// OpenRTB 2.4: The following table lists the types of feeds,
// typically for audio.
type FeedType int32

const (
	// invalid OpenRTB value
	FeedType_UNKNOWNFT     FeedType = 0
	FeedType_MUSIC_SERVICE FeedType = 1
	FeedType_BROADCAST     FeedType = 2
	FeedType_PODCAST       FeedType = 3
)

var FeedType_name = map[int32]string{
	0: "UNKNOWNFT",
	1: "MUSIC_SERVICE",
	2: "BROADCAST",
	3: "PODCAST",
}
var FeedType_value = map[string]int32{
	"UNKNOWNFT":     0,
	"MUSIC_SERVICE": 1,
	"BROADCAST":     2,
	"PODCAST":       3,
}

func (x FeedType) String() string {
	return proto.EnumName(FeedType_name, int32(x))
}
func (FeedType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{19}
}

// OpenRTB Native 1.1: The FORMAT of the ad you are purchasing,
// separate from the surrounding context.
type PlacementType int32

const (
	PlacementType_UNKNOWNPT PlacementType = 0
	// In the feed of content - for example as an item inside the organic
	// feed/grid/listing/carousel.
	PlacementType_IN_FEED PlacementType = 1
	// In the atomic unit of the content - IE in the article page
	// or single image page.
	PlacementType_ATOMIC_UNIT PlacementType = 2
	// Outside the core content - for example in the ads section on the
	// right rail, as a banner-style placement near the content, etc.
	PlacementType_OUTSIDE PlacementType = 3
	// Recommendation widget, most commonly presented below
	// the article content.
	PlacementType_RECOMMENDATION PlacementType = 4
)

var PlacementType_name = map[int32]string{
	0: "UNKNOWNPT",
	1: "IN_FEED",
	2: "ATOMIC_UNIT",
	3: "OUTSIDE",
	4: "RECOMMENDATION",
}
var PlacementType_value = map[string]int32{
	"UNKNOWNPT":      0,
	"IN_FEED":        1,
	"ATOMIC_UNIT":    2,
	"OUTSIDE":        3,
	"RECOMMENDATION": 4,
}

func (x PlacementType) String() string {
	return proto.EnumName(PlacementType_name, int32(x))
}
func (PlacementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{20}
}

// OpenRTB Native 1.2.
type EventType int32

const (
	EventType_UNKNOWNET EventType = 0
	// Impression
	EventType_IMPRESSION EventType = 1
	// Visible impression using MRC definition at 50% in view for 1 second.
	EventType_VIEWABLE_MRC_50 EventType = 2
	// 100% in view for 1 second (ie GroupM standard).
	EventType_VIEWABLE_MRC_100 EventType = 3
	// Visible impression for video using MRC definition at 50% in view
	// for 2 seconds.
	EventType_VIEWABLE_VIDEO_50 EventType = 4
)

var EventType_name = map[int32]string{
	0: "UNKNOWNET",
	1: "IMPRESSION",
	2: "VIEWABLE_MRC_50",
	3: "VIEWABLE_MRC_100",
	4: "VIEWABLE_VIDEO_50",
}
var EventType_value = map[string]int32{
	"UNKNOWNET":         0,
	"IMPRESSION":        1,
	"VIEWABLE_MRC_50":   2,
	"VIEWABLE_MRC_100":  3,
	"VIEWABLE_VIDEO_50": 4,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{21}
}

// OpenRTB Native 1.2.
type EventTrackingMethod int32

const (
	EventTrackingMethod_UNKNOWNETM EventTrackingMethod = 0
	// Image-pixel tracking - URL provided will be insterted as a 1x1 pixel at the
	// time of the event.
	EventTrackingMethod_IMG EventTrackingMethod = 1
	// Javascript-based tracking - URL provided will be insterted as a js tag at
	// the time of the event.
	EventTrackingMethod_JS EventTrackingMethod = 2
)

var EventTrackingMethod_name = map[int32]string{
	0: "UNKNOWNETM",
	1: "IMG",
	2: "JS",
}
var EventTrackingMethod_value = map[string]int32{
	"UNKNOWNETM": 0,
	"IMG":        1,
	"JS":         2,
}

func (x EventTrackingMethod) String() string {
	return proto.EnumName(EventTrackingMethod_name, int32(x))
}
func (EventTrackingMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{22}
}

type AuctionType int32

const (
	AuctionType_DEFAULT      AuctionType = 0
	AuctionType_FIRST_PRICE  AuctionType = 1
	AuctionType_SECOND_PRICE AuctionType = 2
	AuctionType_FIXED_PRICE  AuctionType = 3
)

var AuctionType_name = map[int32]string{
	0: "DEFAULT",
	1: "FIRST_PRICE",
	2: "SECOND_PRICE",
	3: "FIXED_PRICE",
}
var AuctionType_value = map[string]int32{
	"DEFAULT":      0,
	"FIRST_PRICE":  1,
	"SECOND_PRICE": 2,
	"FIXED_PRICE":  3,
}

func (x AuctionType) String() string {
	return proto.EnumName(AuctionType_name, int32(x))
}
func (AuctionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{23}
}

// OpenRTB 2.0: The following list represents the IAB's contextual taxonomy for
// categorization. Standard IDs have been adopted to easily support the
// communication of primary and secondary categories for various objects.
// // This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type ContentCategory int32

const (
	ContentCategory_UNDEFINED ContentCategory = 0
	ContentCategory_IAB1      ContentCategory = 1
	ContentCategory_IAB1S1    ContentCategory = 2
	ContentCategory_IAB1S2    ContentCategory = 3
	ContentCategory_IAB1S3    ContentCategory = 4
	ContentCategory_IAB1S4    ContentCategory = 5
	ContentCategory_IAB1S5    ContentCategory = 6
	ContentCategory_IAB1S6    ContentCategory = 7
	ContentCategory_IAB1S7    ContentCategory = 8
	ContentCategory_IAB2      ContentCategory = 9
	ContentCategory_IAB2S1    ContentCategory = 10
	ContentCategory_IAB2S2    ContentCategory = 11
	ContentCategory_IAB2S3    ContentCategory = 12
	ContentCategory_IAB2S4    ContentCategory = 13
	ContentCategory_IAB2S5    ContentCategory = 14
	ContentCategory_IAB2S6    ContentCategory = 15
	ContentCategory_IAB2S7    ContentCategory = 16
	ContentCategory_IAB2S8    ContentCategory = 17
	ContentCategory_IAB2S9    ContentCategory = 18
	ContentCategory_IAB2S10   ContentCategory = 19
	ContentCategory_IAB2S11   ContentCategory = 20
	ContentCategory_IAB2S12   ContentCategory = 21
	ContentCategory_IAB2S13   ContentCategory = 22
	ContentCategory_IAB2S14   ContentCategory = 23
	ContentCategory_IAB2S15   ContentCategory = 24
	ContentCategory_IAB2S16   ContentCategory = 25
	ContentCategory_IAB2S17   ContentCategory = 26
	ContentCategory_IAB2S18   ContentCategory = 27
	ContentCategory_IAB2S19   ContentCategory = 28
	ContentCategory_IAB2S20   ContentCategory = 29
	ContentCategory_IAB2S21   ContentCategory = 30
	ContentCategory_IAB2S22   ContentCategory = 31
	ContentCategory_IAB2S23   ContentCategory = 32
	ContentCategory_IAB3      ContentCategory = 33
	ContentCategory_IAB3S1    ContentCategory = 34
	ContentCategory_IAB3S2    ContentCategory = 35
	ContentCategory_IAB3S3    ContentCategory = 36
	ContentCategory_IAB3S4    ContentCategory = 37
	ContentCategory_IAB3S5    ContentCategory = 38
	ContentCategory_IAB3S6    ContentCategory = 39
	ContentCategory_IAB3S7    ContentCategory = 40
	ContentCategory_IAB3S8    ContentCategory = 41
	ContentCategory_IAB3S9    ContentCategory = 42
	ContentCategory_IAB3S10   ContentCategory = 43
	ContentCategory_IAB3S11   ContentCategory = 44
	ContentCategory_IAB3S12   ContentCategory = 45
	ContentCategory_IAB4      ContentCategory = 46
	ContentCategory_IAB4S1    ContentCategory = 47
	ContentCategory_IAB4S2    ContentCategory = 48
	ContentCategory_IAB4S3    ContentCategory = 49
	ContentCategory_IAB4S4    ContentCategory = 50
	ContentCategory_IAB4S5    ContentCategory = 51
	ContentCategory_IAB4S6    ContentCategory = 52
	ContentCategory_IAB4S7    ContentCategory = 53
	ContentCategory_IAB4S8    ContentCategory = 54
	ContentCategory_IAB4S9    ContentCategory = 55
	ContentCategory_IAB4S10   ContentCategory = 56
	ContentCategory_IAB4S11   ContentCategory = 57
	ContentCategory_IAB5      ContentCategory = 58
	ContentCategory_IAB5S1    ContentCategory = 59
	ContentCategory_IAB5S2    ContentCategory = 60
	ContentCategory_IAB5S3    ContentCategory = 61
	ContentCategory_IAB5S4    ContentCategory = 62
	ContentCategory_IAB5S5    ContentCategory = 63
	ContentCategory_IAB5S6    ContentCategory = 64
	ContentCategory_IAB5S7    ContentCategory = 65
	ContentCategory_IAB5S8    ContentCategory = 66
	ContentCategory_IAB5S9    ContentCategory = 67
	ContentCategory_IAB5S10   ContentCategory = 68
	ContentCategory_IAB5S11   ContentCategory = 69
	ContentCategory_IAB5S12   ContentCategory = 70
	ContentCategory_IAB5S13   ContentCategory = 71
	ContentCategory_IAB5S14   ContentCategory = 72
	ContentCategory_IAB5S15   ContentCategory = 73
	ContentCategory_IAB6      ContentCategory = 74
	ContentCategory_IAB6S1    ContentCategory = 75
	ContentCategory_IAB6S2    ContentCategory = 76
	ContentCategory_IAB6S3    ContentCategory = 77
	ContentCategory_IAB6S4    ContentCategory = 78
	ContentCategory_IAB6S5    ContentCategory = 79
	ContentCategory_IAB6S6    ContentCategory = 80
	ContentCategory_IAB6S7    ContentCategory = 81
	ContentCategory_IAB6S8    ContentCategory = 82
	ContentCategory_IAB6S9    ContentCategory = 83
	ContentCategory_IAB7      ContentCategory = 84
	ContentCategory_IAB7S1    ContentCategory = 85
	ContentCategory_IAB7S2    ContentCategory = 86
	ContentCategory_IAB7S3    ContentCategory = 87
	ContentCategory_IAB7S4    ContentCategory = 88
	ContentCategory_IAB7S5    ContentCategory = 89
	ContentCategory_IAB7S6    ContentCategory = 90
	ContentCategory_IAB7S7    ContentCategory = 91
	ContentCategory_IAB7S8    ContentCategory = 92
	ContentCategory_IAB7S9    ContentCategory = 93
	ContentCategory_IAB7S10   ContentCategory = 94
	ContentCategory_IAB7S11   ContentCategory = 95
	ContentCategory_IAB7S12   ContentCategory = 96
	ContentCategory_IAB7S13   ContentCategory = 97
	ContentCategory_IAB7S14   ContentCategory = 98
	ContentCategory_IAB7S15   ContentCategory = 99
	ContentCategory_IAB7S16   ContentCategory = 100
	ContentCategory_IAB7S17   ContentCategory = 101
	ContentCategory_IAB7S18   ContentCategory = 102
	ContentCategory_IAB7S19   ContentCategory = 103
	ContentCategory_IAB7S20   ContentCategory = 104
	ContentCategory_IAB7S21   ContentCategory = 105
	ContentCategory_IAB7S22   ContentCategory = 106
	ContentCategory_IAB7S23   ContentCategory = 107
	ContentCategory_IAB7S24   ContentCategory = 108
	ContentCategory_IAB7S25   ContentCategory = 109
	ContentCategory_IAB7S26   ContentCategory = 110
	ContentCategory_IAB7S27   ContentCategory = 111
	ContentCategory_IAB7S28   ContentCategory = 112
	ContentCategory_IAB7S29   ContentCategory = 113
	ContentCategory_IAB7S30   ContentCategory = 114
	ContentCategory_IAB7S31   ContentCategory = 115
	ContentCategory_IAB7S32   ContentCategory = 116
	ContentCategory_IAB7S33   ContentCategory = 117
	ContentCategory_IAB7S34   ContentCategory = 118
	ContentCategory_IAB7S35   ContentCategory = 119
	ContentCategory_IAB7S36   ContentCategory = 120
	ContentCategory_IAB7S37   ContentCategory = 121
	ContentCategory_IAB7S38   ContentCategory = 122
	ContentCategory_IAB7S39   ContentCategory = 123
	ContentCategory_IAB7S40   ContentCategory = 124
	ContentCategory_IAB7S41   ContentCategory = 125
	ContentCategory_IAB7S42   ContentCategory = 126
	ContentCategory_IAB7S43   ContentCategory = 127
	ContentCategory_IAB7S44   ContentCategory = 128
	ContentCategory_IAB7S45   ContentCategory = 129
	ContentCategory_IAB8      ContentCategory = 130
	ContentCategory_IAB8S1    ContentCategory = 131
	ContentCategory_IAB8S2    ContentCategory = 132
	ContentCategory_IAB8S3    ContentCategory = 133
	ContentCategory_IAB8S4    ContentCategory = 134
	ContentCategory_IAB8S5    ContentCategory = 135
	ContentCategory_IAB8S6    ContentCategory = 136
	ContentCategory_IAB8S7    ContentCategory = 137
	ContentCategory_IAB8S8    ContentCategory = 138
	ContentCategory_IAB8S9    ContentCategory = 139
	ContentCategory_IAB8S10   ContentCategory = 140
	ContentCategory_IAB8S11   ContentCategory = 141
	ContentCategory_IAB8S12   ContentCategory = 142
	ContentCategory_IAB8S13   ContentCategory = 143
	ContentCategory_IAB8S14   ContentCategory = 144
	ContentCategory_IAB8S15   ContentCategory = 145
	ContentCategory_IAB8S16   ContentCategory = 146
	ContentCategory_IAB8S17   ContentCategory = 147
	ContentCategory_IAB8S18   ContentCategory = 148
	ContentCategory_IAB9      ContentCategory = 149
	ContentCategory_IAB9S1    ContentCategory = 150
	ContentCategory_IAB9S2    ContentCategory = 151
	ContentCategory_IAB9S3    ContentCategory = 152
	ContentCategory_IAB9S4    ContentCategory = 153
	ContentCategory_IAB9S5    ContentCategory = 154
	ContentCategory_IAB9S6    ContentCategory = 155
	ContentCategory_IAB9S7    ContentCategory = 156
	ContentCategory_IAB9S8    ContentCategory = 157
	ContentCategory_IAB9S9    ContentCategory = 158
	ContentCategory_IAB9S10   ContentCategory = 159
	ContentCategory_IAB9S11   ContentCategory = 160
	ContentCategory_IAB9S12   ContentCategory = 161
	ContentCategory_IAB9S13   ContentCategory = 162
	ContentCategory_IAB9S14   ContentCategory = 163
	ContentCategory_IAB9S15   ContentCategory = 164
	ContentCategory_IAB9S16   ContentCategory = 165
	ContentCategory_IAB9S17   ContentCategory = 166
	ContentCategory_IAB9S18   ContentCategory = 167
	ContentCategory_IAB9S19   ContentCategory = 168
	ContentCategory_IAB9S20   ContentCategory = 169
	ContentCategory_IAB9S21   ContentCategory = 170
	ContentCategory_IAB9S22   ContentCategory = 171
	ContentCategory_IAB9S23   ContentCategory = 172
	ContentCategory_IAB9S24   ContentCategory = 173
	ContentCategory_IAB9S25   ContentCategory = 174
	ContentCategory_IAB9S26   ContentCategory = 175
	ContentCategory_IAB9S27   ContentCategory = 176
	ContentCategory_IAB9S28   ContentCategory = 177
	ContentCategory_IAB9S29   ContentCategory = 178
	ContentCategory_IAB9S30   ContentCategory = 179
	ContentCategory_IAB9S31   ContentCategory = 180
	ContentCategory_IAB1S     ContentCategory = 181
	ContentCategory_IAB1S01   ContentCategory = 182
	ContentCategory_IAB1S02   ContentCategory = 183
	ContentCategory_IAB1S03   ContentCategory = 184
	ContentCategory_IAB1S04   ContentCategory = 185
	ContentCategory_IAB1S05   ContentCategory = 186
	ContentCategory_IAB1S06   ContentCategory = 187
	ContentCategory_IAB1S07   ContentCategory = 188
	ContentCategory_IAB1S08   ContentCategory = 189
	ContentCategory_IAB1S09   ContentCategory = 190
	ContentCategory_IAB11     ContentCategory = 191
	ContentCategory_IAB1101   ContentCategory = 192
	ContentCategory_IAB1102   ContentCategory = 193
	ContentCategory_IAB1103   ContentCategory = 194
	ContentCategory_IAB1104   ContentCategory = 195
	ContentCategory_IAB1105   ContentCategory = 196
	ContentCategory_IAB12     ContentCategory = 197
	ContentCategory_IAB1201   ContentCategory = 198
	ContentCategory_IAB1202   ContentCategory = 199
	ContentCategory_IAB1203   ContentCategory = 200
	ContentCategory_IAB13     ContentCategory = 201
	ContentCategory_IAB1301   ContentCategory = 202
	ContentCategory_IAB1302   ContentCategory = 203
	ContentCategory_IAB1303   ContentCategory = 204
	ContentCategory_IAB1304   ContentCategory = 205
	ContentCategory_IAB1305   ContentCategory = 206
	ContentCategory_IAB1306   ContentCategory = 207
	ContentCategory_IAB1307   ContentCategory = 208
	ContentCategory_IAB1308   ContentCategory = 209
	ContentCategory_IAB1309   ContentCategory = 210
	ContentCategory_IAB13010  ContentCategory = 211
	ContentCategory_IAB13011  ContentCategory = 212
	ContentCategory_IAB13012  ContentCategory = 213
	ContentCategory_IAB14     ContentCategory = 214
	ContentCategory_IAB1401   ContentCategory = 215
	ContentCategory_IAB1402   ContentCategory = 216
	ContentCategory_IAB1403   ContentCategory = 217
	ContentCategory_IAB1404   ContentCategory = 218
	ContentCategory_IAB1405   ContentCategory = 219
	ContentCategory_IAB1406   ContentCategory = 220
	ContentCategory_IAB1407   ContentCategory = 221
	ContentCategory_IAB1408   ContentCategory = 222
	ContentCategory_IAB15     ContentCategory = 223
	ContentCategory_IAB1501   ContentCategory = 224
	ContentCategory_IAB1502   ContentCategory = 225
	ContentCategory_IAB1503   ContentCategory = 226
	ContentCategory_IAB1504   ContentCategory = 227
	ContentCategory_IAB1505   ContentCategory = 228
	ContentCategory_IAB1506   ContentCategory = 229
	ContentCategory_IAB1507   ContentCategory = 230
	ContentCategory_IAB1508   ContentCategory = 231
	ContentCategory_IAB1509   ContentCategory = 232
	ContentCategory_IAB15010  ContentCategory = 233
	ContentCategory_IAB16     ContentCategory = 234
	ContentCategory_IAB1601   ContentCategory = 235
	ContentCategory_IAB1602   ContentCategory = 236
	ContentCategory_IAB1603   ContentCategory = 237
	ContentCategory_IAB1604   ContentCategory = 238
	ContentCategory_IAB1605   ContentCategory = 239
	ContentCategory_IAB1606   ContentCategory = 240
	ContentCategory_IAB1607   ContentCategory = 241
	ContentCategory_IAB17     ContentCategory = 242
	ContentCategory_IAB1701   ContentCategory = 243
	ContentCategory_IAB1702   ContentCategory = 244
	ContentCategory_IAB1703   ContentCategory = 245
	ContentCategory_IAB1704   ContentCategory = 246
	ContentCategory_IAB1705   ContentCategory = 247
	ContentCategory_IAB1706   ContentCategory = 248
	ContentCategory_IAB1707   ContentCategory = 249
	ContentCategory_IAB1708   ContentCategory = 250
	ContentCategory_IAB1709   ContentCategory = 251
	ContentCategory_IAB17010  ContentCategory = 252
	ContentCategory_IAB17011  ContentCategory = 253
	ContentCategory_IAB17012  ContentCategory = 254
	ContentCategory_IAB17013  ContentCategory = 255
	ContentCategory_IAB17014  ContentCategory = 256
	ContentCategory_IAB17015  ContentCategory = 257
	ContentCategory_IAB17016  ContentCategory = 258
	ContentCategory_IAB17017  ContentCategory = 259
	ContentCategory_IAB17018  ContentCategory = 260
	ContentCategory_IAB17019  ContentCategory = 261
	ContentCategory_IAB17020  ContentCategory = 262
	ContentCategory_IAB17021  ContentCategory = 263
	ContentCategory_IAB17022  ContentCategory = 264
	ContentCategory_IAB17023  ContentCategory = 265
	ContentCategory_IAB17024  ContentCategory = 266
	ContentCategory_IAB17025  ContentCategory = 267
	ContentCategory_IAB17026  ContentCategory = 268
	ContentCategory_IAB17027  ContentCategory = 269
	ContentCategory_IAB17028  ContentCategory = 270
	ContentCategory_IAB17029  ContentCategory = 271
	ContentCategory_IAB17030  ContentCategory = 272
	ContentCategory_IAB17031  ContentCategory = 273
	ContentCategory_IAB17032  ContentCategory = 274
	ContentCategory_IAB17033  ContentCategory = 275
	ContentCategory_IAB17034  ContentCategory = 276
	ContentCategory_IAB17035  ContentCategory = 277
	ContentCategory_IAB17036  ContentCategory = 278
	ContentCategory_IAB17037  ContentCategory = 279
	ContentCategory_IAB17038  ContentCategory = 280
	ContentCategory_IAB17039  ContentCategory = 281
	ContentCategory_IAB17040  ContentCategory = 282
	ContentCategory_IAB17041  ContentCategory = 283
	ContentCategory_IAB17042  ContentCategory = 284
	ContentCategory_IAB17043  ContentCategory = 285
	ContentCategory_IAB17044  ContentCategory = 286
	ContentCategory_IAB18     ContentCategory = 287
	ContentCategory_IAB1801   ContentCategory = 288
	ContentCategory_IAB1802   ContentCategory = 289
	ContentCategory_IAB1803   ContentCategory = 290
	ContentCategory_IAB1804   ContentCategory = 291
	ContentCategory_IAB1805   ContentCategory = 292
	ContentCategory_IAB1806   ContentCategory = 293
	ContentCategory_IAB19     ContentCategory = 294
	ContentCategory_IAB1901   ContentCategory = 295
	ContentCategory_IAB1902   ContentCategory = 296
	ContentCategory_IAB1903   ContentCategory = 297
	ContentCategory_IAB1904   ContentCategory = 298
	ContentCategory_IAB1905   ContentCategory = 299
	ContentCategory_IAB1906   ContentCategory = 300
	ContentCategory_IAB1907   ContentCategory = 301
	ContentCategory_IAB1908   ContentCategory = 302
	ContentCategory_IAB1909   ContentCategory = 303
	ContentCategory_IAB19010  ContentCategory = 304
	ContentCategory_IAB19011  ContentCategory = 305
	ContentCategory_IAB19012  ContentCategory = 306
	ContentCategory_IAB19013  ContentCategory = 307
	ContentCategory_IAB19014  ContentCategory = 308
	ContentCategory_IAB19015  ContentCategory = 309
	ContentCategory_IAB19016  ContentCategory = 310
	ContentCategory_IAB19017  ContentCategory = 311
	ContentCategory_IAB19018  ContentCategory = 312
	ContentCategory_IAB19019  ContentCategory = 313
	ContentCategory_IAB19020  ContentCategory = 314
	ContentCategory_IAB19021  ContentCategory = 315
	ContentCategory_IAB19022  ContentCategory = 316
	ContentCategory_IAB19023  ContentCategory = 317
	ContentCategory_IAB19024  ContentCategory = 318
	ContentCategory_IAB19025  ContentCategory = 319
	ContentCategory_IAB19026  ContentCategory = 320
	ContentCategory_IAB19027  ContentCategory = 321
	ContentCategory_IAB19028  ContentCategory = 322
	ContentCategory_IAB19029  ContentCategory = 323
	ContentCategory_IAB19030  ContentCategory = 324
	ContentCategory_IAB19031  ContentCategory = 325
	ContentCategory_IAB19032  ContentCategory = 326
	ContentCategory_IAB19033  ContentCategory = 327
	ContentCategory_IAB19034  ContentCategory = 328
	ContentCategory_IAB19035  ContentCategory = 329
	ContentCategory_IAB19036  ContentCategory = 330
	ContentCategory_IAB2S     ContentCategory = 331
	ContentCategory_IAB2S01   ContentCategory = 332
	ContentCategory_IAB2S02   ContentCategory = 333
	ContentCategory_IAB2S03   ContentCategory = 334
	ContentCategory_IAB2S04   ContentCategory = 335
	ContentCategory_IAB2S05   ContentCategory = 336
	ContentCategory_IAB2S06   ContentCategory = 337
	ContentCategory_IAB2S07   ContentCategory = 338
	ContentCategory_IAB2S08   ContentCategory = 339
	ContentCategory_IAB2S09   ContentCategory = 340
	ContentCategory_IAB2S010  ContentCategory = 341
	ContentCategory_IAB2S011  ContentCategory = 342
	ContentCategory_IAB2S012  ContentCategory = 343
	ContentCategory_IAB2S013  ContentCategory = 344
	ContentCategory_IAB2S014  ContentCategory = 345
	ContentCategory_IAB2S015  ContentCategory = 346
	ContentCategory_IAB2S016  ContentCategory = 347
	ContentCategory_IAB2S017  ContentCategory = 348
	ContentCategory_IAB2S018  ContentCategory = 349
	ContentCategory_IAB2S019  ContentCategory = 350
	ContentCategory_IAB2S020  ContentCategory = 351
	ContentCategory_IAB2S021  ContentCategory = 352
	ContentCategory_IAB2S022  ContentCategory = 353
	ContentCategory_IAB2S023  ContentCategory = 354
	ContentCategory_IAB2S024  ContentCategory = 355
	ContentCategory_IAB2S025  ContentCategory = 356
	ContentCategory_IAB2S026  ContentCategory = 357
	ContentCategory_IAB2S027  ContentCategory = 358
	ContentCategory_IAB21     ContentCategory = 359
	ContentCategory_IAB2101   ContentCategory = 360
	ContentCategory_IAB2102   ContentCategory = 361
	ContentCategory_IAB2103   ContentCategory = 362
	ContentCategory_IAB22     ContentCategory = 363
	ContentCategory_IAB2201   ContentCategory = 364
	ContentCategory_IAB2202   ContentCategory = 365
	ContentCategory_IAB2203   ContentCategory = 366
	ContentCategory_IAB2204   ContentCategory = 367
	ContentCategory_IAB23     ContentCategory = 368
	ContentCategory_IAB2301   ContentCategory = 369
	ContentCategory_IAB2302   ContentCategory = 370
	ContentCategory_IAB2303   ContentCategory = 371
	ContentCategory_IAB2304   ContentCategory = 372
	ContentCategory_IAB2305   ContentCategory = 373
	ContentCategory_IAB2306   ContentCategory = 374
	ContentCategory_IAB2307   ContentCategory = 375
	ContentCategory_IAB2308   ContentCategory = 376
	ContentCategory_IAB2309   ContentCategory = 377
	ContentCategory_IAB23010  ContentCategory = 378
	ContentCategory_IAB24     ContentCategory = 379
	ContentCategory_IAB25     ContentCategory = 380
	ContentCategory_IAB2501   ContentCategory = 381
	ContentCategory_IAB2502   ContentCategory = 382
	ContentCategory_IAB2503   ContentCategory = 383
	ContentCategory_IAB2504   ContentCategory = 384
	ContentCategory_IAB2505   ContentCategory = 385
	ContentCategory_IAB2506   ContentCategory = 386
	ContentCategory_IAB2507   ContentCategory = 387
	ContentCategory_IAB26     ContentCategory = 388
	ContentCategory_IAB2601   ContentCategory = 389
	ContentCategory_IAB2602   ContentCategory = 390
	ContentCategory_IAB2603   ContentCategory = 391
	ContentCategory_IAB2604   ContentCategory = 392
)

var ContentCategory_name = map[int32]string{
	0:   "UNDEFINED",
	1:   "IAB1",
	2:   "IAB1S1",
	3:   "IAB1S2",
	4:   "IAB1S3",
	5:   "IAB1S4",
	6:   "IAB1S5",
	7:   "IAB1S6",
	8:   "IAB1S7",
	9:   "IAB2",
	10:  "IAB2S1",
	11:  "IAB2S2",
	12:  "IAB2S3",
	13:  "IAB2S4",
	14:  "IAB2S5",
	15:  "IAB2S6",
	16:  "IAB2S7",
	17:  "IAB2S8",
	18:  "IAB2S9",
	19:  "IAB2S10",
	20:  "IAB2S11",
	21:  "IAB2S12",
	22:  "IAB2S13",
	23:  "IAB2S14",
	24:  "IAB2S15",
	25:  "IAB2S16",
	26:  "IAB2S17",
	27:  "IAB2S18",
	28:  "IAB2S19",
	29:  "IAB2S20",
	30:  "IAB2S21",
	31:  "IAB2S22",
	32:  "IAB2S23",
	33:  "IAB3",
	34:  "IAB3S1",
	35:  "IAB3S2",
	36:  "IAB3S3",
	37:  "IAB3S4",
	38:  "IAB3S5",
	39:  "IAB3S6",
	40:  "IAB3S7",
	41:  "IAB3S8",
	42:  "IAB3S9",
	43:  "IAB3S10",
	44:  "IAB3S11",
	45:  "IAB3S12",
	46:  "IAB4",
	47:  "IAB4S1",
	48:  "IAB4S2",
	49:  "IAB4S3",
	50:  "IAB4S4",
	51:  "IAB4S5",
	52:  "IAB4S6",
	53:  "IAB4S7",
	54:  "IAB4S8",
	55:  "IAB4S9",
	56:  "IAB4S10",
	57:  "IAB4S11",
	58:  "IAB5",
	59:  "IAB5S1",
	60:  "IAB5S2",
	61:  "IAB5S3",
	62:  "IAB5S4",
	63:  "IAB5S5",
	64:  "IAB5S6",
	65:  "IAB5S7",
	66:  "IAB5S8",
	67:  "IAB5S9",
	68:  "IAB5S10",
	69:  "IAB5S11",
	70:  "IAB5S12",
	71:  "IAB5S13",
	72:  "IAB5S14",
	73:  "IAB5S15",
	74:  "IAB6",
	75:  "IAB6S1",
	76:  "IAB6S2",
	77:  "IAB6S3",
	78:  "IAB6S4",
	79:  "IAB6S5",
	80:  "IAB6S6",
	81:  "IAB6S7",
	82:  "IAB6S8",
	83:  "IAB6S9",
	84:  "IAB7",
	85:  "IAB7S1",
	86:  "IAB7S2",
	87:  "IAB7S3",
	88:  "IAB7S4",
	89:  "IAB7S5",
	90:  "IAB7S6",
	91:  "IAB7S7",
	92:  "IAB7S8",
	93:  "IAB7S9",
	94:  "IAB7S10",
	95:  "IAB7S11",
	96:  "IAB7S12",
	97:  "IAB7S13",
	98:  "IAB7S14",
	99:  "IAB7S15",
	100: "IAB7S16",
	101: "IAB7S17",
	102: "IAB7S18",
	103: "IAB7S19",
	104: "IAB7S20",
	105: "IAB7S21",
	106: "IAB7S22",
	107: "IAB7S23",
	108: "IAB7S24",
	109: "IAB7S25",
	110: "IAB7S26",
	111: "IAB7S27",
	112: "IAB7S28",
	113: "IAB7S29",
	114: "IAB7S30",
	115: "IAB7S31",
	116: "IAB7S32",
	117: "IAB7S33",
	118: "IAB7S34",
	119: "IAB7S35",
	120: "IAB7S36",
	121: "IAB7S37",
	122: "IAB7S38",
	123: "IAB7S39",
	124: "IAB7S40",
	125: "IAB7S41",
	126: "IAB7S42",
	127: "IAB7S43",
	128: "IAB7S44",
	129: "IAB7S45",
	130: "IAB8",
	131: "IAB8S1",
	132: "IAB8S2",
	133: "IAB8S3",
	134: "IAB8S4",
	135: "IAB8S5",
	136: "IAB8S6",
	137: "IAB8S7",
	138: "IAB8S8",
	139: "IAB8S9",
	140: "IAB8S10",
	141: "IAB8S11",
	142: "IAB8S12",
	143: "IAB8S13",
	144: "IAB8S14",
	145: "IAB8S15",
	146: "IAB8S16",
	147: "IAB8S17",
	148: "IAB8S18",
	149: "IAB9",
	150: "IAB9S1",
	151: "IAB9S2",
	152: "IAB9S3",
	153: "IAB9S4",
	154: "IAB9S5",
	155: "IAB9S6",
	156: "IAB9S7",
	157: "IAB9S8",
	158: "IAB9S9",
	159: "IAB9S10",
	160: "IAB9S11",
	161: "IAB9S12",
	162: "IAB9S13",
	163: "IAB9S14",
	164: "IAB9S15",
	165: "IAB9S16",
	166: "IAB9S17",
	167: "IAB9S18",
	168: "IAB9S19",
	169: "IAB9S20",
	170: "IAB9S21",
	171: "IAB9S22",
	172: "IAB9S23",
	173: "IAB9S24",
	174: "IAB9S25",
	175: "IAB9S26",
	176: "IAB9S27",
	177: "IAB9S28",
	178: "IAB9S29",
	179: "IAB9S30",
	180: "IAB9S31",
	181: "IAB1S",
	182: "IAB1S01",
	183: "IAB1S02",
	184: "IAB1S03",
	185: "IAB1S04",
	186: "IAB1S05",
	187: "IAB1S06",
	188: "IAB1S07",
	189: "IAB1S08",
	190: "IAB1S09",
	191: "IAB11",
	192: "IAB1101",
	193: "IAB1102",
	194: "IAB1103",
	195: "IAB1104",
	196: "IAB1105",
	197: "IAB12",
	198: "IAB1201",
	199: "IAB1202",
	200: "IAB1203",
	201: "IAB13",
	202: "IAB1301",
	203: "IAB1302",
	204: "IAB1303",
	205: "IAB1304",
	206: "IAB1305",
	207: "IAB1306",
	208: "IAB1307",
	209: "IAB1308",
	210: "IAB1309",
	211: "IAB13010",
	212: "IAB13011",
	213: "IAB13012",
	214: "IAB14",
	215: "IAB1401",
	216: "IAB1402",
	217: "IAB1403",
	218: "IAB1404",
	219: "IAB1405",
	220: "IAB1406",
	221: "IAB1407",
	222: "IAB1408",
	223: "IAB15",
	224: "IAB1501",
	225: "IAB1502",
	226: "IAB1503",
	227: "IAB1504",
	228: "IAB1505",
	229: "IAB1506",
	230: "IAB1507",
	231: "IAB1508",
	232: "IAB1509",
	233: "IAB15010",
	234: "IAB16",
	235: "IAB1601",
	236: "IAB1602",
	237: "IAB1603",
	238: "IAB1604",
	239: "IAB1605",
	240: "IAB1606",
	241: "IAB1607",
	242: "IAB17",
	243: "IAB1701",
	244: "IAB1702",
	245: "IAB1703",
	246: "IAB1704",
	247: "IAB1705",
	248: "IAB1706",
	249: "IAB1707",
	250: "IAB1708",
	251: "IAB1709",
	252: "IAB17010",
	253: "IAB17011",
	254: "IAB17012",
	255: "IAB17013",
	256: "IAB17014",
	257: "IAB17015",
	258: "IAB17016",
	259: "IAB17017",
	260: "IAB17018",
	261: "IAB17019",
	262: "IAB17020",
	263: "IAB17021",
	264: "IAB17022",
	265: "IAB17023",
	266: "IAB17024",
	267: "IAB17025",
	268: "IAB17026",
	269: "IAB17027",
	270: "IAB17028",
	271: "IAB17029",
	272: "IAB17030",
	273: "IAB17031",
	274: "IAB17032",
	275: "IAB17033",
	276: "IAB17034",
	277: "IAB17035",
	278: "IAB17036",
	279: "IAB17037",
	280: "IAB17038",
	281: "IAB17039",
	282: "IAB17040",
	283: "IAB17041",
	284: "IAB17042",
	285: "IAB17043",
	286: "IAB17044",
	287: "IAB18",
	288: "IAB1801",
	289: "IAB1802",
	290: "IAB1803",
	291: "IAB1804",
	292: "IAB1805",
	293: "IAB1806",
	294: "IAB19",
	295: "IAB1901",
	296: "IAB1902",
	297: "IAB1903",
	298: "IAB1904",
	299: "IAB1905",
	300: "IAB1906",
	301: "IAB1907",
	302: "IAB1908",
	303: "IAB1909",
	304: "IAB19010",
	305: "IAB19011",
	306: "IAB19012",
	307: "IAB19013",
	308: "IAB19014",
	309: "IAB19015",
	310: "IAB19016",
	311: "IAB19017",
	312: "IAB19018",
	313: "IAB19019",
	314: "IAB19020",
	315: "IAB19021",
	316: "IAB19022",
	317: "IAB19023",
	318: "IAB19024",
	319: "IAB19025",
	320: "IAB19026",
	321: "IAB19027",
	322: "IAB19028",
	323: "IAB19029",
	324: "IAB19030",
	325: "IAB19031",
	326: "IAB19032",
	327: "IAB19033",
	328: "IAB19034",
	329: "IAB19035",
	330: "IAB19036",
	331: "IAB2S",
	332: "IAB2S01",
	333: "IAB2S02",
	334: "IAB2S03",
	335: "IAB2S04",
	336: "IAB2S05",
	337: "IAB2S06",
	338: "IAB2S07",
	339: "IAB2S08",
	340: "IAB2S09",
	341: "IAB2S010",
	342: "IAB2S011",
	343: "IAB2S012",
	344: "IAB2S013",
	345: "IAB2S014",
	346: "IAB2S015",
	347: "IAB2S016",
	348: "IAB2S017",
	349: "IAB2S018",
	350: "IAB2S019",
	351: "IAB2S020",
	352: "IAB2S021",
	353: "IAB2S022",
	354: "IAB2S023",
	355: "IAB2S024",
	356: "IAB2S025",
	357: "IAB2S026",
	358: "IAB2S027",
	359: "IAB21",
	360: "IAB2101",
	361: "IAB2102",
	362: "IAB2103",
	363: "IAB22",
	364: "IAB2201",
	365: "IAB2202",
	366: "IAB2203",
	367: "IAB2204",
	368: "IAB23",
	369: "IAB2301",
	370: "IAB2302",
	371: "IAB2303",
	372: "IAB2304",
	373: "IAB2305",
	374: "IAB2306",
	375: "IAB2307",
	376: "IAB2308",
	377: "IAB2309",
	378: "IAB23010",
	379: "IAB24",
	380: "IAB25",
	381: "IAB2501",
	382: "IAB2502",
	383: "IAB2503",
	384: "IAB2504",
	385: "IAB2505",
	386: "IAB2506",
	387: "IAB2507",
	388: "IAB26",
	389: "IAB2601",
	390: "IAB2602",
	391: "IAB2603",
	392: "IAB2604",
}
var ContentCategory_value = map[string]int32{
	"UNDEFINED": 0,
	"IAB1":      1,
	"IAB1S1":    2,
	"IAB1S2":    3,
	"IAB1S3":    4,
	"IAB1S4":    5,
	"IAB1S5":    6,
	"IAB1S6":    7,
	"IAB1S7":    8,
	"IAB2":      9,
	"IAB2S1":    10,
	"IAB2S2":    11,
	"IAB2S3":    12,
	"IAB2S4":    13,
	"IAB2S5":    14,
	"IAB2S6":    15,
	"IAB2S7":    16,
	"IAB2S8":    17,
	"IAB2S9":    18,
	"IAB2S10":   19,
	"IAB2S11":   20,
	"IAB2S12":   21,
	"IAB2S13":   22,
	"IAB2S14":   23,
	"IAB2S15":   24,
	"IAB2S16":   25,
	"IAB2S17":   26,
	"IAB2S18":   27,
	"IAB2S19":   28,
	"IAB2S20":   29,
	"IAB2S21":   30,
	"IAB2S22":   31,
	"IAB2S23":   32,
	"IAB3":      33,
	"IAB3S1":    34,
	"IAB3S2":    35,
	"IAB3S3":    36,
	"IAB3S4":    37,
	"IAB3S5":    38,
	"IAB3S6":    39,
	"IAB3S7":    40,
	"IAB3S8":    41,
	"IAB3S9":    42,
	"IAB3S10":   43,
	"IAB3S11":   44,
	"IAB3S12":   45,
	"IAB4":      46,
	"IAB4S1":    47,
	"IAB4S2":    48,
	"IAB4S3":    49,
	"IAB4S4":    50,
	"IAB4S5":    51,
	"IAB4S6":    52,
	"IAB4S7":    53,
	"IAB4S8":    54,
	"IAB4S9":    55,
	"IAB4S10":   56,
	"IAB4S11":   57,
	"IAB5":      58,
	"IAB5S1":    59,
	"IAB5S2":    60,
	"IAB5S3":    61,
	"IAB5S4":    62,
	"IAB5S5":    63,
	"IAB5S6":    64,
	"IAB5S7":    65,
	"IAB5S8":    66,
	"IAB5S9":    67,
	"IAB5S10":   68,
	"IAB5S11":   69,
	"IAB5S12":   70,
	"IAB5S13":   71,
	"IAB5S14":   72,
	"IAB5S15":   73,
	"IAB6":      74,
	"IAB6S1":    75,
	"IAB6S2":    76,
	"IAB6S3":    77,
	"IAB6S4":    78,
	"IAB6S5":    79,
	"IAB6S6":    80,
	"IAB6S7":    81,
	"IAB6S8":    82,
	"IAB6S9":    83,
	"IAB7":      84,
	"IAB7S1":    85,
	"IAB7S2":    86,
	"IAB7S3":    87,
	"IAB7S4":    88,
	"IAB7S5":    89,
	"IAB7S6":    90,
	"IAB7S7":    91,
	"IAB7S8":    92,
	"IAB7S9":    93,
	"IAB7S10":   94,
	"IAB7S11":   95,
	"IAB7S12":   96,
	"IAB7S13":   97,
	"IAB7S14":   98,
	"IAB7S15":   99,
	"IAB7S16":   100,
	"IAB7S17":   101,
	"IAB7S18":   102,
	"IAB7S19":   103,
	"IAB7S20":   104,
	"IAB7S21":   105,
	"IAB7S22":   106,
	"IAB7S23":   107,
	"IAB7S24":   108,
	"IAB7S25":   109,
	"IAB7S26":   110,
	"IAB7S27":   111,
	"IAB7S28":   112,
	"IAB7S29":   113,
	"IAB7S30":   114,
	"IAB7S31":   115,
	"IAB7S32":   116,
	"IAB7S33":   117,
	"IAB7S34":   118,
	"IAB7S35":   119,
	"IAB7S36":   120,
	"IAB7S37":   121,
	"IAB7S38":   122,
	"IAB7S39":   123,
	"IAB7S40":   124,
	"IAB7S41":   125,
	"IAB7S42":   126,
	"IAB7S43":   127,
	"IAB7S44":   128,
	"IAB7S45":   129,
	"IAB8":      130,
	"IAB8S1":    131,
	"IAB8S2":    132,
	"IAB8S3":    133,
	"IAB8S4":    134,
	"IAB8S5":    135,
	"IAB8S6":    136,
	"IAB8S7":    137,
	"IAB8S8":    138,
	"IAB8S9":    139,
	"IAB8S10":   140,
	"IAB8S11":   141,
	"IAB8S12":   142,
	"IAB8S13":   143,
	"IAB8S14":   144,
	"IAB8S15":   145,
	"IAB8S16":   146,
	"IAB8S17":   147,
	"IAB8S18":   148,
	"IAB9":      149,
	"IAB9S1":    150,
	"IAB9S2":    151,
	"IAB9S3":    152,
	"IAB9S4":    153,
	"IAB9S5":    154,
	"IAB9S6":    155,
	"IAB9S7":    156,
	"IAB9S8":    157,
	"IAB9S9":    158,
	"IAB9S10":   159,
	"IAB9S11":   160,
	"IAB9S12":   161,
	"IAB9S13":   162,
	"IAB9S14":   163,
	"IAB9S15":   164,
	"IAB9S16":   165,
	"IAB9S17":   166,
	"IAB9S18":   167,
	"IAB9S19":   168,
	"IAB9S20":   169,
	"IAB9S21":   170,
	"IAB9S22":   171,
	"IAB9S23":   172,
	"IAB9S24":   173,
	"IAB9S25":   174,
	"IAB9S26":   175,
	"IAB9S27":   176,
	"IAB9S28":   177,
	"IAB9S29":   178,
	"IAB9S30":   179,
	"IAB9S31":   180,
	"IAB1S":     181,
	"IAB1S01":   182,
	"IAB1S02":   183,
	"IAB1S03":   184,
	"IAB1S04":   185,
	"IAB1S05":   186,
	"IAB1S06":   187,
	"IAB1S07":   188,
	"IAB1S08":   189,
	"IAB1S09":   190,
	"IAB11":     191,
	"IAB1101":   192,
	"IAB1102":   193,
	"IAB1103":   194,
	"IAB1104":   195,
	"IAB1105":   196,
	"IAB12":     197,
	"IAB1201":   198,
	"IAB1202":   199,
	"IAB1203":   200,
	"IAB13":     201,
	"IAB1301":   202,
	"IAB1302":   203,
	"IAB1303":   204,
	"IAB1304":   205,
	"IAB1305":   206,
	"IAB1306":   207,
	"IAB1307":   208,
	"IAB1308":   209,
	"IAB1309":   210,
	"IAB13010":  211,
	"IAB13011":  212,
	"IAB13012":  213,
	"IAB14":     214,
	"IAB1401":   215,
	"IAB1402":   216,
	"IAB1403":   217,
	"IAB1404":   218,
	"IAB1405":   219,
	"IAB1406":   220,
	"IAB1407":   221,
	"IAB1408":   222,
	"IAB15":     223,
	"IAB1501":   224,
	"IAB1502":   225,
	"IAB1503":   226,
	"IAB1504":   227,
	"IAB1505":   228,
	"IAB1506":   229,
	"IAB1507":   230,
	"IAB1508":   231,
	"IAB1509":   232,
	"IAB15010":  233,
	"IAB16":     234,
	"IAB1601":   235,
	"IAB1602":   236,
	"IAB1603":   237,
	"IAB1604":   238,
	"IAB1605":   239,
	"IAB1606":   240,
	"IAB1607":   241,
	"IAB17":     242,
	"IAB1701":   243,
	"IAB1702":   244,
	"IAB1703":   245,
	"IAB1704":   246,
	"IAB1705":   247,
	"IAB1706":   248,
	"IAB1707":   249,
	"IAB1708":   250,
	"IAB1709":   251,
	"IAB17010":  252,
	"IAB17011":  253,
	"IAB17012":  254,
	"IAB17013":  255,
	"IAB17014":  256,
	"IAB17015":  257,
	"IAB17016":  258,
	"IAB17017":  259,
	"IAB17018":  260,
	"IAB17019":  261,
	"IAB17020":  262,
	"IAB17021":  263,
	"IAB17022":  264,
	"IAB17023":  265,
	"IAB17024":  266,
	"IAB17025":  267,
	"IAB17026":  268,
	"IAB17027":  269,
	"IAB17028":  270,
	"IAB17029":  271,
	"IAB17030":  272,
	"IAB17031":  273,
	"IAB17032":  274,
	"IAB17033":  275,
	"IAB17034":  276,
	"IAB17035":  277,
	"IAB17036":  278,
	"IAB17037":  279,
	"IAB17038":  280,
	"IAB17039":  281,
	"IAB17040":  282,
	"IAB17041":  283,
	"IAB17042":  284,
	"IAB17043":  285,
	"IAB17044":  286,
	"IAB18":     287,
	"IAB1801":   288,
	"IAB1802":   289,
	"IAB1803":   290,
	"IAB1804":   291,
	"IAB1805":   292,
	"IAB1806":   293,
	"IAB19":     294,
	"IAB1901":   295,
	"IAB1902":   296,
	"IAB1903":   297,
	"IAB1904":   298,
	"IAB1905":   299,
	"IAB1906":   300,
	"IAB1907":   301,
	"IAB1908":   302,
	"IAB1909":   303,
	"IAB19010":  304,
	"IAB19011":  305,
	"IAB19012":  306,
	"IAB19013":  307,
	"IAB19014":  308,
	"IAB19015":  309,
	"IAB19016":  310,
	"IAB19017":  311,
	"IAB19018":  312,
	"IAB19019":  313,
	"IAB19020":  314,
	"IAB19021":  315,
	"IAB19022":  316,
	"IAB19023":  317,
	"IAB19024":  318,
	"IAB19025":  319,
	"IAB19026":  320,
	"IAB19027":  321,
	"IAB19028":  322,
	"IAB19029":  323,
	"IAB19030":  324,
	"IAB19031":  325,
	"IAB19032":  326,
	"IAB19033":  327,
	"IAB19034":  328,
	"IAB19035":  329,
	"IAB19036":  330,
	"IAB2S":     331,
	"IAB2S01":   332,
	"IAB2S02":   333,
	"IAB2S03":   334,
	"IAB2S04":   335,
	"IAB2S05":   336,
	"IAB2S06":   337,
	"IAB2S07":   338,
	"IAB2S08":   339,
	"IAB2S09":   340,
	"IAB2S010":  341,
	"IAB2S011":  342,
	"IAB2S012":  343,
	"IAB2S013":  344,
	"IAB2S014":  345,
	"IAB2S015":  346,
	"IAB2S016":  347,
	"IAB2S017":  348,
	"IAB2S018":  349,
	"IAB2S019":  350,
	"IAB2S020":  351,
	"IAB2S021":  352,
	"IAB2S022":  353,
	"IAB2S023":  354,
	"IAB2S024":  355,
	"IAB2S025":  356,
	"IAB2S026":  357,
	"IAB2S027":  358,
	"IAB21":     359,
	"IAB2101":   360,
	"IAB2102":   361,
	"IAB2103":   362,
	"IAB22":     363,
	"IAB2201":   364,
	"IAB2202":   365,
	"IAB2203":   366,
	"IAB2204":   367,
	"IAB23":     368,
	"IAB2301":   369,
	"IAB2302":   370,
	"IAB2303":   371,
	"IAB2304":   372,
	"IAB2305":   373,
	"IAB2306":   374,
	"IAB2307":   375,
	"IAB2308":   376,
	"IAB2309":   377,
	"IAB23010":  378,
	"IAB24":     379,
	"IAB25":     380,
	"IAB2501":   381,
	"IAB2502":   382,
	"IAB2503":   383,
	"IAB2504":   384,
	"IAB2505":   385,
	"IAB2506":   386,
	"IAB2507":   387,
	"IAB26":     388,
	"IAB2601":   389,
	"IAB2602":   390,
	"IAB2603":   391,
	"IAB2604":   392,
}

func (x ContentCategory) String() string {
	return proto.EnumName(ContentCategory_name, int32(x))
}
func (ContentCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{24}
}

// OpenRTB 2.2: The following table lists the options for a bidder to signal
// the exchange as to why it did not offer a bid for the impression.
type NoBidReason int32

const (
	NoBidReason_UNKNOWN_ERROR              NoBidReason = 0
	NoBidReason_TECHNICAL_ERROR            NoBidReason = 1
	NoBidReason_INVALID_REQUEST            NoBidReason = 2
	NoBidReason_KNOWN_WEB_SPIDER           NoBidReason = 3
	NoBidReason_SUSPECTED_NONHUMAN_TRAFFIC NoBidReason = 4
	NoBidReason_CLOUD_DATACENTER_PROXYIP   NoBidReason = 5
	NoBidReason_UNSUPPORTED_DEVICE         NoBidReason = 6
	NoBidReason_BLOCKED_PUBLISHER          NoBidReason = 7
	NoBidReason_UNMATCHED_USER             NoBidReason = 8
	NoBidReason_DAILY_READER_CAP           NoBidReason = 9
	NoBidReason_DAILY_DOMAIN_CAP           NoBidReason = 10
)

var NoBidReason_name = map[int32]string{
	0:  "UNKNOWN_ERROR",
	1:  "TECHNICAL_ERROR",
	2:  "INVALID_REQUEST",
	3:  "KNOWN_WEB_SPIDER",
	4:  "SUSPECTED_NONHUMAN_TRAFFIC",
	5:  "CLOUD_DATACENTER_PROXYIP",
	6:  "UNSUPPORTED_DEVICE",
	7:  "BLOCKED_PUBLISHER",
	8:  "UNMATCHED_USER",
	9:  "DAILY_READER_CAP",
	10: "DAILY_DOMAIN_CAP",
}
var NoBidReason_value = map[string]int32{
	"UNKNOWN_ERROR":              0,
	"TECHNICAL_ERROR":            1,
	"INVALID_REQUEST":            2,
	"KNOWN_WEB_SPIDER":           3,
	"SUSPECTED_NONHUMAN_TRAFFIC": 4,
	"CLOUD_DATACENTER_PROXYIP":   5,
	"UNSUPPORTED_DEVICE":         6,
	"BLOCKED_PUBLISHER":          7,
	"UNMATCHED_USER":             8,
	"DAILY_READER_CAP":           9,
	"DAILY_DOMAIN_CAP":           10,
}

func (x NoBidReason) String() string {
	return proto.EnumName(NoBidReason_name, int32(x))
}
func (NoBidReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{25}
}

// OpenRTB 2.1: The following table lists the media ratings used in
// describing content based on the QAG categorization.
// Refer to http://www.iab.net/ne_guidelines for more information.
type QAGMediaRating int32

const (
	QAGMediaRating_UNKNOWNQAGMR     QAGMediaRating = 0
	QAGMediaRating_ALL_AUDIENCES    QAGMediaRating = 1
	QAGMediaRating_EVERYONE_OVER_12 QAGMediaRating = 2
	QAGMediaRating_MATURE           QAGMediaRating = 3
)

var QAGMediaRating_name = map[int32]string{
	0: "UNKNOWNQAGMR",
	1: "ALL_AUDIENCES",
	2: "EVERYONE_OVER_12",
	3: "MATURE",
}
var QAGMediaRating_value = map[string]int32{
	"UNKNOWNQAGMR":     0,
	"ALL_AUDIENCES":    1,
	"EVERYONE_OVER_12": 2,
	"MATURE":           3,
}

func (x QAGMediaRating) String() string {
	return proto.EnumName(QAGMediaRating_name, int32(x))
}
func (QAGMediaRating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{26}
}

// OpenRTB Native 1.0: Common asset element types of native advertising.
// This list is non-exhaustive and intended to be extended by the buyers
// and sellers as the format evolves. An implementing exchange may not
// support all asset variants or introduce new ones unique to that system.
type DataAssetType int32

const (
	DataAssetType_UNKNOWNDAT DataAssetType = 0
	// Sponsored By message where response should contain the brand name
	// of the sponsor.
	// Format: Text; Max length: 25 or longer.
	DataAssetType_SPONSORED DataAssetType = 1
	// Descriptive text associated with the product or service being advertised.
	// Format: Text; Max length: 140 or longer.
	DataAssetType_DESC DataAssetType = 2
	// Rating of the product being offered to the user.
	// For example an app's rating in an app store from 0-5.
	// Format: Number (1-5 digits) formatted as string.
	DataAssetType_RATING DataAssetType = 3
	// Number of social ratings or "likes" of product being offered to the user.
	// Format: Number formatted as string.
	DataAssetType_LIKES DataAssetType = 4
	// Number downloads/installs of this product.
	// Format: Number formatted as string.
	DataAssetType_DOWNLOADS DataAssetType = 5
	// Price for product / app / in-app purchase.
	// Value should include currency symbol in localised format.
	// Format: Number formatted as string.
	DataAssetType_PRICE DataAssetType = 6
	// Sale price that can be used together with price to indicate a discounted
	// price compared to a regular price. Value should include currency symbol
	// in localised format.
	// Format: Number formatted as string.
	DataAssetType_SALEPRICE DataAssetType = 7
	// Phone number.
	// Format: Formatted string.
	DataAssetType_PHONEDAT DataAssetType = 8
	// Address.
	// Format: Text.
	DataAssetType_ADDRESS DataAssetType = 9
	// Additional descriptive text associated with the product or service
	// being advertised.
	// Format: Text.
	DataAssetType_DESC2 DataAssetType = 10
	// Display URL for the text ad.
	// Format: Text.
	DataAssetType_DISPLAYURL DataAssetType = 11
	// Text describing a 'call to action' button for the destination URL.
	// Format: Text.
	DataAssetType_CTATEXT DataAssetType = 12
)

var DataAssetType_name = map[int32]string{
	0:  "UNKNOWNDAT",
	1:  "SPONSORED",
	2:  "DESC",
	3:  "RATING",
	4:  "LIKES",
	5:  "DOWNLOADS",
	6:  "PRICE",
	7:  "SALEPRICE",
	8:  "PHONEDAT",
	9:  "ADDRESS",
	10: "DESC2",
	11: "DISPLAYURL",
	12: "CTATEXT",
}
var DataAssetType_value = map[string]int32{
	"UNKNOWNDAT": 0,
	"SPONSORED":  1,
	"DESC":       2,
	"RATING":     3,
	"LIKES":      4,
	"DOWNLOADS":  5,
	"PRICE":      6,
	"SALEPRICE":  7,
	"PHONEDAT":   8,
	"ADDRESS":    9,
	"DESC2":      10,
	"DISPLAYURL": 11,
	"CTATEXT":    12,
}

func (x DataAssetType) String() string {
	return proto.EnumName(DataAssetType_name, int32(x))
}
func (DataAssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{27}
}

// OpenRTB Native 1.0: Common image asset element types of native advertising
// at the time of writing this spec. This list is non-exhaustive and intended
// to be extended by the buyers and sellers as the format evolves.
type ImageAssetType int32

const (
	ImageAssetType_UNKNOWNIAT ImageAssetType = 0
	// Icon image.
	// Max height: at least 50; Aspect ratio: 1:1.
	ImageAssetType_ICON ImageAssetType = 1
	// Logo image for the brand/app.
	// To be deprecated in a future version - use type 1 / ICON.
	// DEPRECATED in 1.2
	ImageAssetType_LOGO ImageAssetType = 2
	// Large image preview for the ad.
	// At least one of 2 size variants required:
	// Small Variant: max height: 200+, max width: 200+, 267, or 382,
	//                aspect ratio: 1:1, 4:3, or 1.91:1.
	// Large Variant: max height: 627+, max width: 627+, 836, or 1198,
	//                aspect ratio: 1:1, 4:3, or 1.91:1.
	ImageAssetType_MAIN ImageAssetType = 3
)

var ImageAssetType_name = map[int32]string{
	0: "UNKNOWNIAT",
	1: "ICON",
	2: "LOGO",
	3: "MAIN",
}
var ImageAssetType_value = map[string]int32{
	"UNKNOWNIAT": 0,
	"ICON":       1,
	"LOGO":       2,
	"MAIN":       3,
}

func (x ImageAssetType) String() string {
	return proto.EnumName(ImageAssetType_name, int32(x))
}
func (ImageAssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{28}
}

// OpenRTB Native 1.0: Common image asset element types of native advertising
// at the time of writing this spec. This list is non-exhaustive and intended
// to be extended by the buyers and sellers as the format evolves.
type NativeRequest_ImageAssetType int32

const (
	NativeRequest_UNKNOWNIAT NativeRequest_ImageAssetType = 0
	// Icon image.
	// Max height: at least 50; Aspect ratio: 1:1.
	NativeRequest_ICON NativeRequest_ImageAssetType = 1
	// Logo image for the brand/app.
	// To be deprecated in a future version - use type 1 / ICON.
	// DEPRECATED in 1.2
	NativeRequest_LOGO NativeRequest_ImageAssetType = 2
	// Large image preview for the ad.
	// At least one of 2 size variants required:
	// Small Variant: max height: 200+, max width: 200+, 267, or 382,
	//                aspect ratio: 1:1, 4:3, or 1.91:1.
	// Large Variant: max height: 627+, max width: 627+, 836, or 1198,
	//                aspect ratio: 1:1, 4:3, or 1.91:1.
	NativeRequest_MAIN NativeRequest_ImageAssetType = 3
)

var NativeRequest_ImageAssetType_name = map[int32]string{
	0: "UNKNOWNIAT",
	1: "ICON",
	2: "LOGO",
	3: "MAIN",
}
var NativeRequest_ImageAssetType_value = map[string]int32{
	"UNKNOWNIAT": 0,
	"ICON":       1,
	"LOGO":       2,
	"MAIN":       3,
}

func (x NativeRequest_ImageAssetType) String() string {
	return proto.EnumName(NativeRequest_ImageAssetType_name, int32(x))
}
func (NativeRequest_ImageAssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{19, 0}
}

// OpenRTB Native 1.1: Next-level context in which the ad appears.
// Again this reflects the primary context, and does not imply no presence
// of other elements. For example, an article is likely to contain images
// but is still first and foremost an article. SubType should only be
// combined with the primary context type as indicated (ie for a context
// type of 1, only context subtypes that start with 1 are valid).
type NativeRequest_ContextSubtype int32

const (
	NativeRequest_UNKNOWNCST               NativeRequest_ContextSubtype = 0
	NativeRequest_CONTENT_GENERAL_OR_MIXED NativeRequest_ContextSubtype = 10
	NativeRequest_CONTENT_ARTICLE          NativeRequest_ContextSubtype = 11
	NativeRequest_CONTENT_VIDEO            NativeRequest_ContextSubtype = 12
	NativeRequest_CONTENT_AUDIO            NativeRequest_ContextSubtype = 13
	NativeRequest_CONTENT_IMAGE            NativeRequest_ContextSubtype = 14
	NativeRequest_CONTENT_USER_GENERATED   NativeRequest_ContextSubtype = 15
	NativeRequest_SOCIAL_GENERAL           NativeRequest_ContextSubtype = 20
	NativeRequest_SOCIAL_EMAIL             NativeRequest_ContextSubtype = 21
	NativeRequest_SOCIAL_CHAT_IM           NativeRequest_ContextSubtype = 22
	NativeRequest_PRODUCT_SELLING          NativeRequest_ContextSubtype = 30
	NativeRequest_PRODUCT_MARKETPLACE      NativeRequest_ContextSubtype = 31
	NativeRequest_PRODUCT_REVIEW           NativeRequest_ContextSubtype = 32
)

var NativeRequest_ContextSubtype_name = map[int32]string{
	0:  "UNKNOWNCST",
	10: "CONTENT_GENERAL_OR_MIXED",
	11: "CONTENT_ARTICLE",
	12: "CONTENT_VIDEO",
	13: "CONTENT_AUDIO",
	14: "CONTENT_IMAGE",
	15: "CONTENT_USER_GENERATED",
	20: "SOCIAL_GENERAL",
	21: "SOCIAL_EMAIL",
	22: "SOCIAL_CHAT_IM",
	30: "PRODUCT_SELLING",
	31: "PRODUCT_MARKETPLACE",
	32: "PRODUCT_REVIEW",
}
var NativeRequest_ContextSubtype_value = map[string]int32{
	"UNKNOWNCST":               0,
	"CONTENT_GENERAL_OR_MIXED": 10,
	"CONTENT_ARTICLE":          11,
	"CONTENT_VIDEO":            12,
	"CONTENT_AUDIO":            13,
	"CONTENT_IMAGE":            14,
	"CONTENT_USER_GENERATED":   15,
	"SOCIAL_GENERAL":           20,
	"SOCIAL_EMAIL":             21,
	"SOCIAL_CHAT_IM":           22,
	"PRODUCT_SELLING":          30,
	"PRODUCT_MARKETPLACE":      31,
	"PRODUCT_REVIEW":           32,
}

func (x NativeRequest_ContextSubtype) String() string {
	return proto.EnumName(NativeRequest_ContextSubtype_name, int32(x))
}
func (NativeRequest_ContextSubtype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{19, 1}
}

// OpenRTB Native 1.1: The context in which the ad appears - what type
// of content is surrounding the ad on the page at a high level.
// This maps directly to the new Deep Dive on In-Feed Ad Units.
// This denotes the primary context, but does not imply other content
// may not exist on the page - for example it's expected that most
// content platforms have some social components, etc.
type NativeRequest_ContextType int32

const (
	NativeRequest_UNKNOWNCTXT NativeRequest_ContextType = 0
	// Content-centric context such as newsfeed, article, image gallery,
	// video gallery, or similar.
	NativeRequest_CONTENT NativeRequest_ContextType = 1
	// Social-centric context such as social network feed, email,
	// chat, or similar.
	NativeRequest_SOCIAL NativeRequest_ContextType = 2
	// Product context such as product listings, details, recommendations,
	// reviews, or similar.
	NativeRequest_PRODUCT NativeRequest_ContextType = 3
)

var NativeRequest_ContextType_name = map[int32]string{
	0: "UNKNOWNCTXT",
	1: "CONTENT",
	2: "SOCIAL",
	3: "PRODUCT",
}
var NativeRequest_ContextType_value = map[string]int32{
	"UNKNOWNCTXT": 0,
	"CONTENT":     1,
	"SOCIAL":      2,
	"PRODUCT":     3,
}

func (x NativeRequest_ContextType) String() string {
	return proto.EnumName(NativeRequest_ContextType_name, int32(x))
}
func (NativeRequest_ContextType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{19, 2}
}

type BidRequest struct {
	// Unique ID of the bid request, provided by the exchange.
	// REQUIRED by the OpenRTB specification.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Array of Imp objects (Section 3.2.2) representing the impressions offered.
	// At least 1 Imp object is required.
	Imp []*Imp `protobuf:"bytes,2,rep,name=imp,proto3" json:"imp,omitempty"`
	// Types that are valid to be assigned to DistributionchannelOneof:
	//	*BidRequest_Site
	//	*BidRequest_App
	DistributionchannelOneof isBidRequest_DistributionchannelOneof `protobuf_oneof:"distributionchannel_oneof"`
	// Details via a Device object (Section 3.2.11) about the user's
	// device to which the impression will be delivered.
	Device *Device `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	// Details via a User object (Section 3.2.13) about the human
	// user of the device; the advertising audience.
	User *User `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	// Indicator of test mode in which auctions are not billable,
	// where 0 = live mode, 1 = test mode.
	Test Mode `protobuf:"varint,7,opt,name=test,proto3,enum=openrtb.Mode" json:"test,omitempty"`
	// Maximum time in milliseconds the exchange allows for bids to
	// be received including Internet latency to avoid timeout. This
	// value supersedes any a priori guidance from the exchange.
	Tmax int32 `protobuf:"varint,8,opt,name=tmax,proto3" json:"tmax,omitempty"`
	// Whitelist of buyer seats (e.g., advertisers, agencies) allowed to
	// bid on this impression. IDs of seats and knowledge of the
	// buyer's customers to which they refer must be coordinated
	// between bidders and the exchange a priori.
	// Omission implies no seat restrictions.
	Wseat []string `protobuf:"bytes,9,rep,name=wseat,proto3" json:"wseat,omitempty"`
	// Block list of buyer seats (e.g., advertisers, agencies) restricted
	// from bidding on this impression. IDs of seats and knowledge
	// of the buyer's customers to which they refer must be
	// coordinated between bidders and the exchange a priori.
	// At most, only one of wseat and bseat should be used in the
	// same request. Omission of both implies no seat restrictions.
	Bseat []string `protobuf:"bytes,10,rep,name=bseat,proto3" json:"bseat,omitempty"`
	// Flag to indicate if Exchange can verify that the impressions offered
	// represent all of the impressions available in context (e.g., all on the
	// web page, all video spots such as pre/mid/post roll) to support
	// road-blocking. 0 = no or unknown, 1 = yes, the impressions offered
	// represent all that are available.
	Allimps bool `protobuf:"varint,11,opt,name=allimps,proto3" json:"allimps,omitempty"`
	// Array of allowed currencies for bids on this bid request using
	// ISO-4217 alpha codes. Recommended only if the exchange
	// accepts multiple currencies.
	Cur []string `protobuf:"bytes,12,rep,name=cur,proto3" json:"cur,omitempty"`
	// White list of languages for creatives using ISO-639-1-alpha-2.
	// Omission implies no specific restrictions, but buyers would be
	// advised to consider language attribute in the Device and/or
	// Content objects if available.
	Wlang []string `protobuf:"bytes,13,rep,name=wlang,proto3" json:"wlang,omitempty"`
	// Blocked advertiser categories using the IAB content
	// categories. Refer to List 5.1.
	Bcat []ContentCategory `protobuf:"varint,14,rep,packed,name=bcat,proto3,enum=openrtb.ContentCategory" json:"bcat,omitempty"`
	// Block list of advertisers by their domains (e.g., “ford.com”).
	Badv []string `protobuf:"bytes,15,rep,name=badv,proto3" json:"badv,omitempty"`
	// Block list of applications by their platform-specific exchangeindependent
	// application identifiers. On Android, these should
	// be bundle or package names (e.g., com.foo.mygame). On iOS,
	// these are numeric IDs.
	Bapp []string `protobuf:"bytes,16,rep,name=bapp,proto3" json:"bapp,omitempty"`
	// A Sorce object (Section 3.2.2) that provides data about the
	// inventory source and which entity makes the final decision
	Source *Source `protobuf:"bytes,17,opt,name=source,proto3" json:"source,omitempty"`
	// A Regs object (Section 3.2.3) that specifies any industry, legal,
	// or governmental regulations in force for this request.
	Regs *Regs `protobuf:"bytes,18,opt,name=regs,proto3" json:"regs,omitempty"`
	// Placeholder for exchange-specific extensions to OpenRTB.
	Ext                  *Ext     `protobuf:"bytes,19,opt,name=ext,proto3" json:"ext,omitempty"`
	Token                string   `protobuf:"bytes,20,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BidRequest) Reset()         { *m = BidRequest{} }
func (m *BidRequest) String() string { return proto.CompactTextString(m) }
func (*BidRequest) ProtoMessage()    {}
func (*BidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{0}
}
func (m *BidRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BidRequest.Unmarshal(m, b)
}
func (m *BidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BidRequest.Marshal(b, m, deterministic)
}
func (dst *BidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidRequest.Merge(dst, src)
}
func (m *BidRequest) XXX_Size() int {
	return xxx_messageInfo_BidRequest.Size(m)
}
func (m *BidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BidRequest proto.InternalMessageInfo

func (m *BidRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidRequest) GetImp() []*Imp {
	if m != nil {
		return m.Imp
	}
	return nil
}

type isBidRequest_DistributionchannelOneof interface {
	isBidRequest_DistributionchannelOneof()
}

type BidRequest_Site struct {
	Site *Site `protobuf:"bytes,3,opt,name=site,proto3,oneof"`
}

type BidRequest_App struct {
	App *App `protobuf:"bytes,4,opt,name=app,proto3,oneof"`
}

func (*BidRequest_Site) isBidRequest_DistributionchannelOneof() {}

func (*BidRequest_App) isBidRequest_DistributionchannelOneof() {}

func (m *BidRequest) GetDistributionchannelOneof() isBidRequest_DistributionchannelOneof {
	if m != nil {
		return m.DistributionchannelOneof
	}
	return nil
}

func (m *BidRequest) GetSite() *Site {
	if x, ok := m.GetDistributionchannelOneof().(*BidRequest_Site); ok {
		return x.Site
	}
	return nil
}

func (m *BidRequest) GetApp() *App {
	if x, ok := m.GetDistributionchannelOneof().(*BidRequest_App); ok {
		return x.App
	}
	return nil
}

func (m *BidRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *BidRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *BidRequest) GetTest() Mode {
	if m != nil {
		return m.Test
	}
	return Mode_LIVE
}

func (m *BidRequest) GetTmax() int32 {
	if m != nil {
		return m.Tmax
	}
	return 0
}

func (m *BidRequest) GetWseat() []string {
	if m != nil {
		return m.Wseat
	}
	return nil
}

func (m *BidRequest) GetBseat() []string {
	if m != nil {
		return m.Bseat
	}
	return nil
}

func (m *BidRequest) GetAllimps() bool {
	if m != nil {
		return m.Allimps
	}
	return false
}

func (m *BidRequest) GetCur() []string {
	if m != nil {
		return m.Cur
	}
	return nil
}

func (m *BidRequest) GetWlang() []string {
	if m != nil {
		return m.Wlang
	}
	return nil
}

func (m *BidRequest) GetBcat() []ContentCategory {
	if m != nil {
		return m.Bcat
	}
	return nil
}

func (m *BidRequest) GetBadv() []string {
	if m != nil {
		return m.Badv
	}
	return nil
}

func (m *BidRequest) GetBapp() []string {
	if m != nil {
		return m.Bapp
	}
	return nil
}

func (m *BidRequest) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *BidRequest) GetRegs() *Regs {
	if m != nil {
		return m.Regs
	}
	return nil
}

func (m *BidRequest) GetExt() *Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *BidRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BidRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BidRequest_OneofMarshaler, _BidRequest_OneofUnmarshaler, _BidRequest_OneofSizer, []interface{}{
		(*BidRequest_Site)(nil),
		(*BidRequest_App)(nil),
	}
}

func _BidRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BidRequest)
	// distributionchannel_oneof
	switch x := m.DistributionchannelOneof.(type) {
	case *BidRequest_Site:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Site); err != nil {
			return err
		}
	case *BidRequest_App:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.App); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BidRequest.DistributionchannelOneof has unexpected type %T", x)
	}
	return nil
}

func _BidRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BidRequest)
	switch tag {
	case 3: // distributionchannel_oneof.site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Site)
		err := b.DecodeMessage(msg)
		m.DistributionchannelOneof = &BidRequest_Site{msg}
		return true, err
	case 4: // distributionchannel_oneof.app
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(App)
		err := b.DecodeMessage(msg)
		m.DistributionchannelOneof = &BidRequest_App{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BidRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BidRequest)
	// distributionchannel_oneof
	switch x := m.DistributionchannelOneof.(type) {
	case *BidRequest_Site:
		s := proto.Size(x.Site)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BidRequest_App:
		s := proto.Size(x.App)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Ext struct {
	FatFinger            bool     `protobuf:"varint,1,opt,name=fat_finger,json=fatFinger,proto3" json:"fat_finger,omitempty"`
	Prevent              bool     `protobuf:"varint,2,opt,name=prevent,proto3" json:"prevent,omitempty"`
	Underfloor           bool     `protobuf:"varint,3,opt,name=underfloor,proto3" json:"underfloor,omitempty"`
	Capping              Capping  `protobuf:"varint,4,opt,name=capping,proto3,enum=openrtb.Capping" json:"capping,omitempty"`
	Strategy             []string `protobuf:"bytes,5,rep,name=strategy,proto3" json:"strategy,omitempty"`
	Tiny                 bool     `protobuf:"varint,6,opt,name=tiny,proto3" json:"tiny,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ext) Reset()         { *m = Ext{} }
func (m *Ext) String() string { return proto.CompactTextString(m) }
func (*Ext) ProtoMessage()    {}
func (*Ext) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{1}
}
func (m *Ext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ext.Unmarshal(m, b)
}
func (m *Ext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ext.Marshal(b, m, deterministic)
}
func (dst *Ext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ext.Merge(dst, src)
}
func (m *Ext) XXX_Size() int {
	return xxx_messageInfo_Ext.Size(m)
}
func (m *Ext) XXX_DiscardUnknown() {
	xxx_messageInfo_Ext.DiscardUnknown(m)
}

var xxx_messageInfo_Ext proto.InternalMessageInfo

func (m *Ext) GetFatFinger() bool {
	if m != nil {
		return m.FatFinger
	}
	return false
}

func (m *Ext) GetPrevent() bool {
	if m != nil {
		return m.Prevent
	}
	return false
}

func (m *Ext) GetUnderfloor() bool {
	if m != nil {
		return m.Underfloor
	}
	return false
}

func (m *Ext) GetCapping() Capping {
	if m != nil {
		return m.Capping
	}
	return Capping_Strict
}

func (m *Ext) GetStrategy() []string {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (m *Ext) GetTiny() bool {
	if m != nil {
		return m.Tiny
	}
	return false
}

type Regs struct {
	Coppa                int32    `protobuf:"varint,1,opt,name=coppa,proto3" json:"coppa,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Regs) Reset()         { *m = Regs{} }
func (m *Regs) String() string { return proto.CompactTextString(m) }
func (*Regs) ProtoMessage()    {}
func (*Regs) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{2}
}
func (m *Regs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Regs.Unmarshal(m, b)
}
func (m *Regs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Regs.Marshal(b, m, deterministic)
}
func (dst *Regs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Regs.Merge(dst, src)
}
func (m *Regs) XXX_Size() int {
	return xxx_messageInfo_Regs.Size(m)
}
func (m *Regs) XXX_DiscardUnknown() {
	xxx_messageInfo_Regs.DiscardUnknown(m)
}

var xxx_messageInfo_Regs proto.InternalMessageInfo

func (m *Regs) GetCoppa() int32 {
	if m != nil {
		return m.Coppa
	}
	return 0
}

type Source struct {
	Fd                   int32    `protobuf:"varint,1,opt,name=fd,proto3" json:"fd,omitempty"`
	Tid                  string   `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Pchain               string   `protobuf:"bytes,3,opt,name=pchain,proto3" json:"pchain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{3}
}
func (m *Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Source.Unmarshal(m, b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Source.Marshal(b, m, deterministic)
}
func (dst *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(dst, src)
}
func (m *Source) XXX_Size() int {
	return xxx_messageInfo_Source.Size(m)
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

func (m *Source) GetFd() int32 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *Source) GetTid() string {
	if m != nil {
		return m.Tid
	}
	return ""
}

func (m *Source) GetPchain() string {
	if m != nil {
		return m.Pchain
	}
	return ""
}

// This object should be included if the ad supported content is a website as opposed to a non-browser
// application. A bid request must not contain both a Site and an App object. At a minimum, it is useful
// to provide a site ID or page URL, but this is not strictly required.
type Site struct {
	// Exchange-specific site ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Site name (may be aliased at the publisher’s request).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Domain of the site (e.g., “mysite.foo.com”).
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Array of IAB content categories of the site. Refer to List 5.1.
	Cat []ContentCategory `protobuf:"varint,4,rep,packed,name=cat,proto3,enum=openrtb.ContentCategory" json:"cat,omitempty"`
	// Array of IAB content categories that describe the current
	// section of the site. Refer to List 5.1.
	Sectioncat []ContentCategory `protobuf:"varint,5,rep,packed,name=sectioncat,proto3,enum=openrtb.ContentCategory" json:"sectioncat,omitempty"`
	// Array of IAB content categories that describe the current page
	// or view of the site. Refer to List 5.1.
	Pagecat []ContentCategory `protobuf:"varint,6,rep,packed,name=pagecat,proto3,enum=openrtb.ContentCategory" json:"pagecat,omitempty"`
	// URL of the page where the impression will be shown.
	Page string `protobuf:"bytes,7,opt,name=page,proto3" json:"page,omitempty"`
	// ref string Referrer URL that caused navigation to the current page.
	Ref string `protobuf:"bytes,8,opt,name=ref,proto3" json:"ref,omitempty"`
	// Search string that caused navigation to the current page
	Search string `protobuf:"bytes,9,opt,name=search,proto3" json:"search,omitempty"`
	// Indicates if the site has been programmed to optimize layout
	// when viewed on mobile devices, where 0 = no, 1 = yes.
	Mobile bool `protobuf:"varint,10,opt,name=mobile,proto3" json:"mobile,omitempty"`
	// Indicates if the site has a privacy policy, where 0 = no, 1 = yes.
	Privacypolicy bool `protobuf:"varint,11,opt,name=privacypolicy,proto3" json:"privacypolicy,omitempty"`
	// Details about the Publisher (Section 3.2.15) of the site
	Publisher *Publisher `protobuf:"bytes,12,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Details about the Content (Section 3.2.16) within the site.
	Content *Content `protobuf:"bytes,13,opt,name=content,proto3" json:"content,omitempty"`
	// Comma separated list of keywords about the site.
	Keywords             string   `protobuf:"bytes,14,opt,name=keywords,proto3" json:"keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Site) Reset()         { *m = Site{} }
func (m *Site) String() string { return proto.CompactTextString(m) }
func (*Site) ProtoMessage()    {}
func (*Site) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{4}
}
func (m *Site) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Site.Unmarshal(m, b)
}
func (m *Site) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Site.Marshal(b, m, deterministic)
}
func (dst *Site) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Site.Merge(dst, src)
}
func (m *Site) XXX_Size() int {
	return xxx_messageInfo_Site.Size(m)
}
func (m *Site) XXX_DiscardUnknown() {
	xxx_messageInfo_Site.DiscardUnknown(m)
}

var xxx_messageInfo_Site proto.InternalMessageInfo

func (m *Site) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Site) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Site) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Site) GetCat() []ContentCategory {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *Site) GetSectioncat() []ContentCategory {
	if m != nil {
		return m.Sectioncat
	}
	return nil
}

func (m *Site) GetPagecat() []ContentCategory {
	if m != nil {
		return m.Pagecat
	}
	return nil
}

func (m *Site) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

func (m *Site) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Site) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *Site) GetMobile() bool {
	if m != nil {
		return m.Mobile
	}
	return false
}

func (m *Site) GetPrivacypolicy() bool {
	if m != nil {
		return m.Privacypolicy
	}
	return false
}

func (m *Site) GetPublisher() *Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *Site) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Site) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

// This object describes the publisher of the media in which the ad will be displayed. The publisher is
// typically the seller in an OpenRTB transaction.
type Publisher struct {
	// Exchange-specific publisher ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Publisher name (may be aliased at the publisher’s request).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Array of IAB content categories that describe the publisher.
	// Refer to List 5.1.
	Cat ContentCategory `protobuf:"varint,3,opt,name=cat,proto3,enum=openrtb.ContentCategory" json:"cat,omitempty"`
	// Highest level domain of the publisher (e.g., “publisher.com”).
	Domanin              string   `protobuf:"bytes,4,opt,name=domanin,proto3" json:"domanin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Publisher) Reset()         { *m = Publisher{} }
func (m *Publisher) String() string { return proto.CompactTextString(m) }
func (*Publisher) ProtoMessage()    {}
func (*Publisher) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{5}
}
func (m *Publisher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Publisher.Unmarshal(m, b)
}
func (m *Publisher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Publisher.Marshal(b, m, deterministic)
}
func (dst *Publisher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Publisher.Merge(dst, src)
}
func (m *Publisher) XXX_Size() int {
	return xxx_messageInfo_Publisher.Size(m)
}
func (m *Publisher) XXX_DiscardUnknown() {
	xxx_messageInfo_Publisher.DiscardUnknown(m)
}

var xxx_messageInfo_Publisher proto.InternalMessageInfo

func (m *Publisher) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Publisher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Publisher) GetCat() ContentCategory {
	if m != nil {
		return m.Cat
	}
	return ContentCategory_UNDEFINED
}

func (m *Publisher) GetDomanin() string {
	if m != nil {
		return m.Domanin
	}
	return ""
}

// This object describes the content in which the impression will appear, which may be syndicated or nonsyndicated
// content. This object may be useful when syndicated content contains impressions and does
// not necessarily match the publisher’s general content. The exchange might or might not have
// knowledge of the page where the content is running, as a result of the syndication method. For
// example might be a video impression embedded in an iframe on an unknown web property or device.
type Content struct {
	// ID uniquely identifying the content
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Episode number.
	Episode int32 `protobuf:"varint,2,opt,name=episode,proto3" json:"episode,omitempty"`
	// Content title.
	// Video Examples: “Search Committee” (television), “A New
	// Hope” (movie), or “Endgame” (made for web).
	// Non-Video Example: “Why an Antarctic Glacier Is Melting So
	// Quickly” (Time magazine article).
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{6}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (dst *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(dst, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Content) GetEpisode() int32 {
	if m != nil {
		return m.Episode
	}
	return 0
}

func (m *Content) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// This object should be included if the ad supported content is a non-browser application (typically in
// mobile) as opposed to a website. A bid request must not contain both an App and a Site object. At a
// minimum, it is useful to provide an App ID or bundle, but this is not strictly required.
type App struct {
	// Exchange-specific app ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// App name (may be aliased at the publisher’s request).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A platform-specific application identifier intended to be
	// unique to the app and independent of the exchange. On
	// Android, this should be a bundle or package name (e.g.,
	// com.foo.mygame). On iOS, it is typically a numeric ID.
	Bundle string `protobuf:"bytes,3,opt,name=bundle,proto3" json:"bundle,omitempty"`
	// Domain of the app (e.g., “mygame.foo.com”).
	Domain string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	// App store URL for an installed app; for IQG 2.1 compliance.
	Storeurl string `protobuf:"bytes,5,opt,name=storeurl,proto3" json:"storeurl,omitempty"`
	// Array of IAB content categories of the app. Refer to List 5.1
	Cat []ContentCategory `protobuf:"varint,6,rep,packed,name=cat,proto3,enum=openrtb.ContentCategory" json:"cat,omitempty"`
	// Array of IAB content categories that describe the current
	// section of the app. Refer to List 5.1
	Sectioncat []ContentCategory `protobuf:"varint,7,rep,packed,name=sectioncat,proto3,enum=openrtb.ContentCategory" json:"sectioncat,omitempty"`
	// Array of IAB content categories that describe the current page
	// or view of the app. Refer to List 5.1.
	Pagecat []ContentCategory `protobuf:"varint,8,rep,packed,name=pagecat,proto3,enum=openrtb.ContentCategory" json:"pagecat,omitempty"`
	// Application version.
	Ver string `protobuf:"bytes,9,opt,name=ver,proto3" json:"ver,omitempty"`
	// Indicates if the app has a privacy policy, where 0 = no, 1 = yes.
	Privacypolicy bool `protobuf:"varint,10,opt,name=privacypolicy,proto3" json:"privacypolicy,omitempty"`
	// 0 = app is free, 1 = the app is a paid version.
	Paid bool `protobuf:"varint,11,opt,name=paid,proto3" json:"paid,omitempty"`
	// Details about the Publisher (Section 3.2.15) of the app.
	Publisher *Publisher `protobuf:"bytes,12,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Details about the Content (Section 3.2.16) within the app.
	Content *Content `protobuf:"bytes,13,opt,name=content,proto3" json:"content,omitempty"`
	// Comma separated list of keywords about the app.
	Keywords             string   `protobuf:"bytes,14,opt,name=keywords,proto3" json:"keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *App) Reset()         { *m = App{} }
func (m *App) String() string { return proto.CompactTextString(m) }
func (*App) ProtoMessage()    {}
func (*App) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{7}
}
func (m *App) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_App.Unmarshal(m, b)
}
func (m *App) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_App.Marshal(b, m, deterministic)
}
func (dst *App) XXX_Merge(src proto.Message) {
	xxx_messageInfo_App.Merge(dst, src)
}
func (m *App) XXX_Size() int {
	return xxx_messageInfo_App.Size(m)
}
func (m *App) XXX_DiscardUnknown() {
	xxx_messageInfo_App.DiscardUnknown(m)
}

var xxx_messageInfo_App proto.InternalMessageInfo

func (m *App) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *App) GetBundle() string {
	if m != nil {
		return m.Bundle
	}
	return ""
}

func (m *App) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *App) GetStoreurl() string {
	if m != nil {
		return m.Storeurl
	}
	return ""
}

func (m *App) GetCat() []ContentCategory {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *App) GetSectioncat() []ContentCategory {
	if m != nil {
		return m.Sectioncat
	}
	return nil
}

func (m *App) GetPagecat() []ContentCategory {
	if m != nil {
		return m.Pagecat
	}
	return nil
}

func (m *App) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *App) GetPrivacypolicy() bool {
	if m != nil {
		return m.Privacypolicy
	}
	return false
}

func (m *App) GetPaid() bool {
	if m != nil {
		return m.Paid
	}
	return false
}

func (m *App) GetPublisher() *Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *App) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *App) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

// This object provides information pertaining to the device through which the user is interacting. Device
// information includes its hardware, platform, location, and carrier data. The device can refer to a mobile
// handset, a desktop computer, set top box, or other digital device.
type Device struct {
	// Browser user agent string.
	Ua string `protobuf:"bytes,1,opt,name=ua,proto3" json:"ua,omitempty"`
	// Location of the device assumed to be the user’s current
	// location defined by a Geo object (Section 3.2.19).
	Geo *Geo `protobuf:"bytes,2,opt,name=geo,proto3" json:"geo,omitempty"`
	// Standard “Do Not Track” flag as set in the header by the
	// browser, where 0 = tracking is unrestricted, 1 = do not track.
	Dnt bool `protobuf:"varint,3,opt,name=dnt,proto3" json:"dnt,omitempty"`
	// “Limit Ad Tracking” signal commercially endorsed (e.g., iOS,
	// Android), where 0 = tracking is unrestricted, 1 = tracking must
	// be limited per commercial guidelines.
	Lmt bool `protobuf:"varint,4,opt,name=lmt,proto3" json:"lmt,omitempty"`
	// IPv4 address closest to device
	Ip string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	// IP address closest to device as IPv6
	Ipv6 string `protobuf:"bytes,6,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	// The general type of device. Refer to List 5.21.
	Devicetype DeviceType `protobuf:"varint,7,opt,name=devicetype,proto3,enum=openrtb.DeviceType" json:"devicetype,omitempty"`
	// Device make (e.g., “Apple”).
	Make string `protobuf:"bytes,8,opt,name=make,proto3" json:"make,omitempty"`
	// Device model (e.g., “iPhone”).
	Model string `protobuf:"bytes,9,opt,name=model,proto3" json:"model,omitempty"`
	// Device operating system (e.g., “iOS”).
	Os string `protobuf:"bytes,10,opt,name=os,proto3" json:"os,omitempty"`
	// Device operating system version (e.g., “3.1.2”).
	Osv string `protobuf:"bytes,11,opt,name=osv,proto3" json:"osv,omitempty"`
	// Hardware version of the device (e.g., “5S” for iPhone 5S).
	Hwv string `protobuf:"bytes,12,opt,name=hwv,proto3" json:"hwv,omitempty"`
	// Physical height of the screen in pixels.
	H int32 `protobuf:"varint,13,opt,name=h,proto3" json:"h,omitempty"`
	// Physical width of the screen in pixels.
	W int32 `protobuf:"varint,14,opt,name=w,proto3" json:"w,omitempty"`
	// Screen size as pixels per linear inch
	Ppi int32 `protobuf:"varint,15,opt,name=ppi,proto3" json:"ppi,omitempty"`
	// The ratio of physical pixels to device independent pixels.
	Pxratio float32 `protobuf:"fixed32,16,opt,name=pxratio,proto3" json:"pxratio,omitempty"`
	// Support for JavaScript, where 0 = no, 1 = yes
	Js bool `protobuf:"varint,17,opt,name=js,proto3" json:"js,omitempty"`
	// Indicates if the geolocation API will be available to JavaScript
	// code running in the banner, where 0 = no, 1 = yes.
	Geofetch bool `protobuf:"varint,18,opt,name=geofetch,proto3" json:"geofetch,omitempty"`
	// Version of Flash supported by the browser.
	Flashver string `protobuf:"bytes,19,opt,name=flashver,proto3" json:"flashver,omitempty"`
	// Browser language using ISO-639-1-alpha-2.
	Language string `protobuf:"bytes,20,opt,name=language,proto3" json:"language,omitempty"`
	// Carrier or ISP (e.g., “VERIZON”) using exchange curated string
	// names which should be published to bidders a priori.
	Carrier string `protobuf:"bytes,21,opt,name=carrier,proto3" json:"carrier,omitempty"`
	// Mobile carrier as the concatenated MCC-MNC code (e.g.,
	// “310-005” identifies Verizon Wireless CDMA in the USA).
	// Refer to https://en.wikipedia.org/wiki/Mobile_country_code
	// for further examples. Note that the dash between the MCC
	// and MNC parts is required to remove parsing ambiguity.
	Mccmnc string `protobuf:"bytes,22,opt,name=mccmnc,proto3" json:"mccmnc,omitempty"`
	// Network connection type. Refer to List 5.22.
	Connectiontype ConnectionType `protobuf:"varint,23,opt,name=connectiontype,proto3,enum=openrtb.ConnectionType" json:"connectiontype,omitempty"`
	// ID sanctioned for advertiser use in the clear (i.e., not hashed)
	Ifa string `protobuf:"bytes,24,opt,name=ifa,proto3" json:"ifa,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via SHA1.
	Didsha1 string `protobuf:"bytes,25,opt,name=didsha1,proto3" json:"didsha1,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via MD5.
	Didmd5 string `protobuf:"bytes,26,opt,name=didmd5,proto3" json:"didmd5,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via SHA1.
	Dpidsha1 string `protobuf:"bytes,27,opt,name=dpidsha1,proto3" json:"dpidsha1,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via MD5.
	Dpidmd5 string `protobuf:"bytes,28,opt,name=dpidmd5,proto3" json:"dpidmd5,omitempty"`
	// MAC address of the device; hashed via SHA1.
	Macsha1 string `protobuf:"bytes,29,opt,name=macsha1,proto3" json:"macsha1,omitempty"`
	// MAC address of the device; hashed via MD5
	Macmd5               string   `protobuf:"bytes,30,opt,name=macmd5,proto3" json:"macmd5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{8}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (dst *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(dst, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetUa() string {
	if m != nil {
		return m.Ua
	}
	return ""
}

func (m *Device) GetGeo() *Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *Device) GetDnt() bool {
	if m != nil {
		return m.Dnt
	}
	return false
}

func (m *Device) GetLmt() bool {
	if m != nil {
		return m.Lmt
	}
	return false
}

func (m *Device) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Device) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

func (m *Device) GetDevicetype() DeviceType {
	if m != nil {
		return m.Devicetype
	}
	return DeviceType_UNKNOWNDT
}

func (m *Device) GetMake() string {
	if m != nil {
		return m.Make
	}
	return ""
}

func (m *Device) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *Device) GetOsv() string {
	if m != nil {
		return m.Osv
	}
	return ""
}

func (m *Device) GetHwv() string {
	if m != nil {
		return m.Hwv
	}
	return ""
}

func (m *Device) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *Device) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *Device) GetPpi() int32 {
	if m != nil {
		return m.Ppi
	}
	return 0
}

func (m *Device) GetPxratio() float32 {
	if m != nil {
		return m.Pxratio
	}
	return 0
}

func (m *Device) GetJs() bool {
	if m != nil {
		return m.Js
	}
	return false
}

func (m *Device) GetGeofetch() bool {
	if m != nil {
		return m.Geofetch
	}
	return false
}

func (m *Device) GetFlashver() string {
	if m != nil {
		return m.Flashver
	}
	return ""
}

func (m *Device) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Device) GetCarrier() string {
	if m != nil {
		return m.Carrier
	}
	return ""
}

func (m *Device) GetMccmnc() string {
	if m != nil {
		return m.Mccmnc
	}
	return ""
}

func (m *Device) GetConnectiontype() ConnectionType {
	if m != nil {
		return m.Connectiontype
	}
	return ConnectionType_UNKNOWNCT
}

func (m *Device) GetIfa() string {
	if m != nil {
		return m.Ifa
	}
	return ""
}

func (m *Device) GetDidsha1() string {
	if m != nil {
		return m.Didsha1
	}
	return ""
}

func (m *Device) GetDidmd5() string {
	if m != nil {
		return m.Didmd5
	}
	return ""
}

func (m *Device) GetDpidsha1() string {
	if m != nil {
		return m.Dpidsha1
	}
	return ""
}

func (m *Device) GetDpidmd5() string {
	if m != nil {
		return m.Dpidmd5
	}
	return ""
}

func (m *Device) GetMacsha1() string {
	if m != nil {
		return m.Macsha1
	}
	return ""
}

func (m *Device) GetMacmd5() string {
	if m != nil {
		return m.Macmd5
	}
	return ""
}

type Geo struct {
	// Latitude from -90.0 to +90.0, where negative is south.
	Lat float32 `protobuf:"fixed32,1,opt,name=lat,proto3" json:"lat,omitempty"`
	// Longitude from -180.0 to +180.0, where negative is west.
	Lon float32 `protobuf:"fixed32,2,opt,name=lon,proto3" json:"lon,omitempty"`
	// Source of location data; recommended when passing
	// lat/lon. Refer to List 5.20.
	Type GeoType `protobuf:"varint,3,opt,name=type,proto3,enum=openrtb.GeoType" json:"type,omitempty"`
	// Estimated location accuracy in meters; recommended when
	// lat/lon are specified and derived from a device’s location
	// services (i.e., type = 1). Note that this is the accuracy as
	// reported from the device. Consult OS specific documentation
	// (e.g., Android, iOS) for exact interpretation
	Accuracy int32 `protobuf:"varint,4,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	// Number of seconds since this geolocation fix was established.
	// Note that devices may cache location data across multiple
	// fetches. Ideally, this value should be from the time the actual
	// fix was taken.
	Lastfix int32 `protobuf:"varint,5,opt,name=lastfix,proto3" json:"lastfix,omitempty"`
	// Service or provider used to determine geolocation from IP
	// address if applicable (i.e., type = 2). Refer to List 5.23.
	Ipservice IPLocation `protobuf:"varint,6,opt,name=ipservice,proto3,enum=openrtb.IPLocation" json:"ipservice,omitempty"`
	// Country code using ISO-3166-1-alpha-3.
	Country string `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	// Region code using ISO-3166-2; 2-letter state code if USA.
	Region string `protobuf:"bytes,8,opt,name=region,proto3" json:"region,omitempty"`
	// Region of a country using FIPS 10-4 notation. While OpenRTB
	// supports this attribute, it has been withdrawn by NIST in 2008.
	Regionfips104 string `protobuf:"bytes,9,opt,name=regionfips104,proto3" json:"regionfips104,omitempty"`
	// Google metro code; similar to but not exactly Nielsen DMAs.
	// See Appendix A for a link to the codes.
	Metro string `protobuf:"bytes,10,opt,name=metro,proto3" json:"metro,omitempty"`
	// City using United Nations Code for Trade & Transport
	// Locations. See Appendix A for a link to the codes.
	City string `protobuf:"bytes,11,opt,name=city,proto3" json:"city,omitempty"`
	// Zip or postal code.
	Zip                  string   `protobuf:"bytes,12,opt,name=zip,proto3" json:"zip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Geo) Reset()         { *m = Geo{} }
func (m *Geo) String() string { return proto.CompactTextString(m) }
func (*Geo) ProtoMessage()    {}
func (*Geo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{9}
}
func (m *Geo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Geo.Unmarshal(m, b)
}
func (m *Geo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Geo.Marshal(b, m, deterministic)
}
func (dst *Geo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Geo.Merge(dst, src)
}
func (m *Geo) XXX_Size() int {
	return xxx_messageInfo_Geo.Size(m)
}
func (m *Geo) XXX_DiscardUnknown() {
	xxx_messageInfo_Geo.DiscardUnknown(m)
}

var xxx_messageInfo_Geo proto.InternalMessageInfo

func (m *Geo) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Geo) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *Geo) GetType() GeoType {
	if m != nil {
		return m.Type
	}
	return GeoType_UNKNOWNGT
}

func (m *Geo) GetAccuracy() int32 {
	if m != nil {
		return m.Accuracy
	}
	return 0
}

func (m *Geo) GetLastfix() int32 {
	if m != nil {
		return m.Lastfix
	}
	return 0
}

func (m *Geo) GetIpservice() IPLocation {
	if m != nil {
		return m.Ipservice
	}
	return IPLocation_UNKNOWNIP
}

func (m *Geo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Geo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Geo) GetRegionfips104() string {
	if m != nil {
		return m.Regionfips104
	}
	return ""
}

func (m *Geo) GetMetro() string {
	if m != nil {
		return m.Metro
	}
	return ""
}

func (m *Geo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Geo) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

// This object contains information known or derived about the human user of the device (i.e., the
// audience for advertising). The user id is an exchange artifact and may be subject to rotation or other
// privacy policies. However, this user ID must be stable long enough to serve reasonably as the basis for
// frequency capping and retargeting.
type User struct {
	// Exchange-specific ID for the user. At least one of id or
	// buyeruid is recommended.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Buyer-specific ID for the user as mapped by the exchange for
	// the buyer. At least one of buyeruid or id is recommended.
	Buyerid string `protobuf:"bytes,2,opt,name=buyerid,proto3" json:"buyerid,omitempty"`
	// Year of birth as a 4-digit integer.
	Yob int32 `protobuf:"varint,3,opt,name=yob,proto3" json:"yob,omitempty"`
	// Gender, where “M” = male, “F” = female, “O” = known to be
	// other (i.e., omitted is unknown).
	Gender string `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	// Comma separated list of keywords, interests, or intent.
	Keywords string `protobuf:"bytes,5,opt,name=keywords,proto3" json:"keywords,omitempty"`
	// Optional feature to pass bidder data that was set in the
	// exchange’s cookie. The string must be in base85 cookie safe
	// characters and be in any format. Proper JSON encoding must
	// be used to include “escaped” quotation marks.
	Customdata string `protobuf:"bytes,6,opt,name=customdata,proto3" json:"customdata,omitempty"`
	// Location of the user’s home base defined by a Geo object
	// (Section 3.2.19). This is not necessarily their current location
	Geo *Geo `protobuf:"bytes,7,opt,name=geo,proto3" json:"geo,omitempty"`
	// Additional user data. Each Data object (Section 3.2.21)
	// represents a different data source.
	Data                 []*UserData `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{10}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetBuyerid() string {
	if m != nil {
		return m.Buyerid
	}
	return ""
}

func (m *User) GetYob() int32 {
	if m != nil {
		return m.Yob
	}
	return 0
}

func (m *User) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *User) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

func (m *User) GetCustomdata() string {
	if m != nil {
		return m.Customdata
	}
	return ""
}

func (m *User) GetGeo() *Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *User) GetData() []*UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

// The data and segment objects together allow additional data about the related object (e.g., user,
// content) to be specified. This data may be from multiple sources whether from the exchange itself or
// third parties as specified by the id field. A bid request can mix data objects from multiple providers.
// The specific data providers in use should be published by the exchange a priori to its bidders.
type UserData struct {
	// Exchange-specific ID for the data provider.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//    Exchange-specific name for the data provider
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//    Array of Segment (Section 3.2.22) objects that contain the
	//    actual data values.
	Segment              []*UserData_Segment `protobuf:"bytes,4,rep,name=segment,proto3" json:"segment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UserData) Reset()         { *m = UserData{} }
func (m *UserData) String() string { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()    {}
func (*UserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{11}
}
func (m *UserData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserData.Unmarshal(m, b)
}
func (m *UserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserData.Marshal(b, m, deterministic)
}
func (dst *UserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserData.Merge(dst, src)
}
func (m *UserData) XXX_Size() int {
	return xxx_messageInfo_UserData.Size(m)
}
func (m *UserData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserData.DiscardUnknown(m)
}

var xxx_messageInfo_UserData proto.InternalMessageInfo

func (m *UserData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserData) GetSegment() []*UserData_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

//    Segment objects are essentially key-value pairs that convey specific units of data. The parent Data
// object is a collection of such values from a given data provider. The specific segment names and value
//    options must be published by the exchange a priori to its bidders.
type UserData_Segment struct {
	//        ID of the data segment specific to the data provider.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the data segment specific to the data provider.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// String representation of the data segment value.
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserData_Segment) Reset()         { *m = UserData_Segment{} }
func (m *UserData_Segment) String() string { return proto.CompactTextString(m) }
func (*UserData_Segment) ProtoMessage()    {}
func (*UserData_Segment) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{11, 0}
}
func (m *UserData_Segment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserData_Segment.Unmarshal(m, b)
}
func (m *UserData_Segment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserData_Segment.Marshal(b, m, deterministic)
}
func (dst *UserData_Segment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserData_Segment.Merge(dst, src)
}
func (m *UserData_Segment) XXX_Size() int {
	return xxx_messageInfo_UserData_Segment.Size(m)
}
func (m *UserData_Segment) XXX_DiscardUnknown() {
	xxx_messageInfo_UserData_Segment.DiscardUnknown(m)
}

var xxx_messageInfo_UserData_Segment proto.InternalMessageInfo

func (m *UserData_Segment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserData_Segment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserData_Segment) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// OpenRTB 2.0: This object describes an ad placement or impression
// being auctioned.  A single bid request can include multiple Imp objects,
// a use case for which might be an exchange that supports selling all
// ad positions on a given page.  Each Imp object has a required ID so that
// bids can reference them individually.
// // The presence of Banner (Section 3.2.3), Video (Section 3.2.4),
// and/or Native (Section 3.2.5) objects subordinate to the Imp object
// indicates the type of impression being offered. The publisher can choose
// one such type which is the typical case or mix them at their discretion.
// Any given bid for the impression must conform to one of the offered types.
type Imp struct {
	// A unique identifier for this impression within the context of the bid
	// request (typically, value starts with 1, and increments up to n
	// for n impressions).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A Banner object (Section 3.2.3); required if this impression is
	// offered as a banner ad opportunity.
	Banner *Banner `protobuf:"bytes,2,opt,name=banner,proto3" json:"banner,omitempty"`
	// A Video object (Section 3.2.4); required if this impression is
	// offered as a video ad opportunity.
	Video *Video `protobuf:"bytes,3,opt,name=video,proto3" json:"video,omitempty"`
	// An Audio object; required if this impression is offered
	// as an audio ad opportunity.
	Audio *Audio `protobuf:"bytes,15,opt,name=audio,proto3" json:"audio,omitempty"`
	// Name of ad mediation partner, SDK technology, or player responsible
	// for rendering ad (typically video or mobile). Used by some ad servers
	// to customize ad code by partner. Recommended for video and/or apps.
	Displaymanager string `protobuf:"bytes,4,opt,name=displaymanager,proto3" json:"displaymanager,omitempty"`
	// Version of ad mediation partner, SDK technology, or player responsible
	// for rendering ad (typically video or mobile). Used by some ad servers
	// to customize ad code by partner. Recommended for video and/or apps.
	Displaymanagerver string `protobuf:"bytes,5,opt,name=displaymanagerver,proto3" json:"displaymanagerver,omitempty"`
	// 1 = the ad is interstitial or full screen, 0 = not interstitial.
	Instl bool `protobuf:"varint,6,opt,name=instl,proto3" json:"instl,omitempty"`
	// Identifier for specific ad placement or ad tag that was used to
	// initiate the auction. This can be useful for debugging of any issues,
	// or for optimization by the buyer.
	Tagid string `protobuf:"bytes,7,opt,name=tagid,proto3" json:"tagid,omitempty"`
	// Minimum bid for this impression expressed in CPM.
	Bidfloor float64 `protobuf:"fixed64,8,opt,name=bidfloor,proto3" json:"bidfloor,omitempty"`
	// Currency specified using ISO-4217 alpha codes. This may be different
	// from bid currency returned by bidder if this is allowed by the exchange.
	Bidfloorcur string `protobuf:"bytes,9,opt,name=bidfloorcur,proto3" json:"bidfloorcur,omitempty"`
	// Indicates the type of browser opened upon clicking the
	// creative in an app, where 0 = embedded, 1 = native.
	// Note that the Safari View Controller in iOS 9.x devices is considered
	// a native browser for purposes of this attribute.
	Clickbrowser bool `protobuf:"varint,16,opt,name=clickbrowser,proto3" json:"clickbrowser,omitempty"`
	// Flag to indicate if the impression requires secure HTTPS URL creative
	// assets and markup, where 0 = non-secure, 1 = secure.  If omitted,
	// the secure state is unknown, but non-secure HTTP support can be assumed.
	Secure bool `protobuf:"varint,12,opt,name=secure,proto3" json:"secure,omitempty"`
	// Array of exchange-specific names of supported iframe busters.
	Iframebuster []string `protobuf:"bytes,10,rep,name=iframebuster,proto3" json:"iframebuster,omitempty"`
	// A Pmp object (Section 3.2.17) containing any private marketplace deals
	// in effect for this impression.
	Pmp *Pmp `protobuf:"bytes,11,opt,name=pmp,proto3" json:"pmp,omitempty"`
	// A Native object (Section 3.2.5); required if this impression is
	// offered as a native ad opportunity.
	Native *Native `protobuf:"bytes,13,opt,name=native,proto3" json:"native,omitempty"`
	// Advisory as to the number of seconds that may elapse
	// between the auction and the actual impression.
	Exp int32 `protobuf:"varint,14,opt,name=exp,proto3" json:"exp,omitempty"`
	// An array of Metric object (Section 3.2.5).
	Metric               []*Metric `protobuf:"bytes,17,rep,name=metric,proto3" json:"metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Imp) Reset()         { *m = Imp{} }
func (m *Imp) String() string { return proto.CompactTextString(m) }
func (*Imp) ProtoMessage()    {}
func (*Imp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{12}
}
func (m *Imp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Imp.Unmarshal(m, b)
}
func (m *Imp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Imp.Marshal(b, m, deterministic)
}
func (dst *Imp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Imp.Merge(dst, src)
}
func (m *Imp) XXX_Size() int {
	return xxx_messageInfo_Imp.Size(m)
}
func (m *Imp) XXX_DiscardUnknown() {
	xxx_messageInfo_Imp.DiscardUnknown(m)
}

var xxx_messageInfo_Imp proto.InternalMessageInfo

func (m *Imp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Imp) GetBanner() *Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

func (m *Imp) GetVideo() *Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *Imp) GetAudio() *Audio {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *Imp) GetDisplaymanager() string {
	if m != nil {
		return m.Displaymanager
	}
	return ""
}

func (m *Imp) GetDisplaymanagerver() string {
	if m != nil {
		return m.Displaymanagerver
	}
	return ""
}

func (m *Imp) GetInstl() bool {
	if m != nil {
		return m.Instl
	}
	return false
}

func (m *Imp) GetTagid() string {
	if m != nil {
		return m.Tagid
	}
	return ""
}

func (m *Imp) GetBidfloor() float64 {
	if m != nil {
		return m.Bidfloor
	}
	return 0
}

func (m *Imp) GetBidfloorcur() string {
	if m != nil {
		return m.Bidfloorcur
	}
	return ""
}

func (m *Imp) GetClickbrowser() bool {
	if m != nil {
		return m.Clickbrowser
	}
	return false
}

func (m *Imp) GetSecure() bool {
	if m != nil {
		return m.Secure
	}
	return false
}

func (m *Imp) GetIframebuster() []string {
	if m != nil {
		return m.Iframebuster
	}
	return nil
}

func (m *Imp) GetPmp() *Pmp {
	if m != nil {
		return m.Pmp
	}
	return nil
}

func (m *Imp) GetNative() *Native {
	if m != nil {
		return m.Native
	}
	return nil
}

func (m *Imp) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *Imp) GetMetric() []*Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

// OpenRTB 2.1 compatibility.
type CompanionAd struct {
	Banner               []*Banner `protobuf:"bytes,1,rep,name=banner,proto3" json:"banner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CompanionAd) Reset()         { *m = CompanionAd{} }
func (m *CompanionAd) String() string { return proto.CompactTextString(m) }
func (*CompanionAd) ProtoMessage()    {}
func (*CompanionAd) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{13}
}
func (m *CompanionAd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompanionAd.Unmarshal(m, b)
}
func (m *CompanionAd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompanionAd.Marshal(b, m, deterministic)
}
func (dst *CompanionAd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanionAd.Merge(dst, src)
}
func (m *CompanionAd) XXX_Size() int {
	return xxx_messageInfo_CompanionAd.Size(m)
}
func (m *CompanionAd) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanionAd.DiscardUnknown(m)
}

var xxx_messageInfo_CompanionAd proto.InternalMessageInfo

func (m *CompanionAd) GetBanner() []*Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

// OpenRTB 2.0: This object represents an in-stream video impression.
// Many of the fields are non-essential for minimally viable transactions,
// but are included to offer fine control when needed. Video in OpenRTB
// generally assumes compliance with the VAST standard. As such, the notion
// of companion ads is supported by optionally including an array of Banner
// objects (refer to the Banner object in Section 3.2.3) that define these
// companion ads.
// // The presence of a Video as a subordinate of the Imp object indicates
// that this impression is offered as a video type impression. At the
// publisher's discretion, that same impression may also be offered as
// banner and/or native by also including as Imp subordinates the Banner
// and/or Native objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type Video struct {
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg", "image/gif" and
	// "application/x-shockwave-flash".
	// REQUIRED by the OpenRTB specification: at least 1 element.
	Mimes []string `protobuf:"bytes,1,rep,name=mimes,proto3" json:"mimes,omitempty"`
	// Indicates if the impression must be linear, nonlinear, etc.
	// If none specified, assume all are allowed.
	Linearity VideoLinearity `protobuf:"varint,2,opt,name=linearity,proto3,enum=openrtb.VideoLinearity" json:"linearity,omitempty"`
	// Minimum video ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Minduration int32 `protobuf:"varint,3,opt,name=minduration,proto3" json:"minduration,omitempty"`
	// Maximum video ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Maxduration int32 `protobuf:"varint,4,opt,name=maxduration,proto3" json:"maxduration,omitempty"`
	// Array of supported video bid response protocols.
	// At least one supported protocol must be specified.
	Protocols []Protocol `protobuf:"varint,5,rep,packed,name=protocols,proto3,enum=openrtb.Protocol" json:"protocols,omitempty"`
	// Width of the video player in device independent pixels (DIPS).
	// RECOMMENDED by the OpenRTB specification.
	W int32 `protobuf:"varint,6,opt,name=w,proto3" json:"w,omitempty"`
	// Height of the video player in device independent pixels (DIPS).
	// RECOMMENDED by the OpenRTB specification.
	H int32 `protobuf:"varint,7,opt,name=h,proto3" json:"h,omitempty"`
	// Indicates the start delay in seconds for pre-roll, mid-roll, or
	// post-roll ad placements.
	// Refer to enum StartDelay for generic values.
	// RECOMMENDED by the OpenRTB specification.
	Startdelay int32 `protobuf:"varint,8,opt,name=startdelay,proto3" json:"startdelay,omitempty"`
	// Indicates if the player will allow the video to be skipped,
	// where 0 = no, 1 = yes.
	// If a bidder sends markup/creative that is itself skippable, the
	// Bid object should include the attr array with an element of
	// 16 indicating skippable video.
	Skip bool `protobuf:"varint,23,opt,name=skip,proto3" json:"skip,omitempty"`
	// Videos of total duration greater than this number of seconds
	// can be skippable; only applicable if the ad is skippable.
	Skipmin int32 `protobuf:"varint,24,opt,name=skipmin,proto3" json:"skipmin,omitempty"`
	// Number of seconds a video must play before skipping is
	// enabled; only applicable if the ad is skippable.
	Skipafter int32 `protobuf:"varint,25,opt,name=skipafter,proto3" json:"skipafter,omitempty"`
	// If multiple ad impressions are offered in the same bid request,
	// the sequence number will allow for the coordinated delivery of
	// multiple creatives.
	Sequence int32 `protobuf:"varint,9,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Blocked creative attributes.
	Battr []CreativeAttribute `protobuf:"varint,10,rep,packed,name=battr,proto3,enum=openrtb.CreativeAttribute" json:"battr,omitempty"`
	// Maximum extended video ad duration, if extension is allowed.
	// If blank or 0, extension is not allowed. If -1, extension is allowed,
	// and there is no time limit imposed. If greater than 0, then the value
	// represents the number of seconds of extended play supported beyond
	// the maxduration value.
	Maxextended int32 `protobuf:"varint,11,opt,name=maxextended,proto3" json:"maxextended,omitempty"`
	// Minimum bit rate in Kbps.
	Minbitrate int32 `protobuf:"varint,12,opt,name=minbitrate,proto3" json:"minbitrate,omitempty"`
	// Maximum bit rate in Kbps.
	Maxbitrate int32 `protobuf:"varint,13,opt,name=maxbitrate,proto3" json:"maxbitrate,omitempty"`
	// Indicates if letter-boxing of 4:3 content into a 16:9 window is
	// allowed, where 0 = no, 1 = yes.
	Boxingallowed bool `protobuf:"varint,14,opt,name=boxingallowed,proto3" json:"boxingallowed,omitempty"`
	// Playback methods that may be in use. If none are specified, any
	// method may be used. Only one method is typically used in practice.
	// As a result, this array may be converted to an integer in a future
	// version of the specification. It is strongly advised to use only
	// the first element of this array in preparation for this change.
	Playbackmethod []PlaybackMethod `protobuf:"varint,15,rep,packed,name=playbackmethod,proto3,enum=openrtb.PlaybackMethod" json:"playbackmethod,omitempty"`
	// Supported delivery methods (e.g., streaming, progressive).
	// If none specified, assume all are supported.
	Delivery []ContentDeliveryMethod `protobuf:"varint,16,rep,packed,name=delivery,proto3,enum=openrtb.ContentDeliveryMethod" json:"delivery,omitempty"`
	// Ad position on screen.
	Pos AdPosition `protobuf:"varint,17,opt,name=pos,proto3,enum=openrtb.AdPosition" json:"pos,omitempty"`
	// Array of Banner objects (Section 3.2.3) if companion ads are available.
	Companionad []*Banner `protobuf:"bytes,18,rep,name=companionad,proto3" json:"companionad,omitempty"`
	// Companion ads in OpenRTB 2.1 format. (Or to be precise, interpretations
	// based on the buggy sample message in 5.1.4, fixed later in 2.2.)
	Companionad_21 *CompanionAd `protobuf:"bytes,22,opt,name=companionad_21,json=companionad21,proto3" json:"companionad_21,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []APIFramework `protobuf:"varint,19,rep,packed,name=api,proto3,enum=openrtb.APIFramework" json:"api,omitempty"`
	// Supported VAST companion ad types.  Recommended if companion Banner
	// objects are included via the companionad array.
	Companiontype []CompanionType `protobuf:"varint,20,rep,packed,name=companiontype,proto3,enum=openrtb.CompanionType" json:"companiontype,omitempty"`
	// Placement type for the impression.
	Placement VideoPlacementType `protobuf:"varint,26,opt,name=placement,proto3,enum=openrtb.VideoPlacementType" json:"placement,omitempty"`
	// The event that causes playback to end.
	Playbackend          PlaybackCessationMode `protobuf:"varint,27,opt,name=playbackend,proto3,enum=openrtb.PlaybackCessationMode" json:"playbackend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{14}
}
func (m *Video) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Video.Unmarshal(m, b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Video.Marshal(b, m, deterministic)
}
func (dst *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(dst, src)
}
func (m *Video) XXX_Size() int {
	return xxx_messageInfo_Video.Size(m)
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

func (m *Video) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *Video) GetLinearity() VideoLinearity {
	if m != nil {
		return m.Linearity
	}
	return VideoLinearity_UNKNOWNVL
}

func (m *Video) GetMinduration() int32 {
	if m != nil {
		return m.Minduration
	}
	return 0
}

func (m *Video) GetMaxduration() int32 {
	if m != nil {
		return m.Maxduration
	}
	return 0
}

func (m *Video) GetProtocols() []Protocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *Video) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *Video) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *Video) GetStartdelay() int32 {
	if m != nil {
		return m.Startdelay
	}
	return 0
}

func (m *Video) GetSkip() bool {
	if m != nil {
		return m.Skip
	}
	return false
}

func (m *Video) GetSkipmin() int32 {
	if m != nil {
		return m.Skipmin
	}
	return 0
}

func (m *Video) GetSkipafter() int32 {
	if m != nil {
		return m.Skipafter
	}
	return 0
}

func (m *Video) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Video) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *Video) GetMaxextended() int32 {
	if m != nil {
		return m.Maxextended
	}
	return 0
}

func (m *Video) GetMinbitrate() int32 {
	if m != nil {
		return m.Minbitrate
	}
	return 0
}

func (m *Video) GetMaxbitrate() int32 {
	if m != nil {
		return m.Maxbitrate
	}
	return 0
}

func (m *Video) GetBoxingallowed() bool {
	if m != nil {
		return m.Boxingallowed
	}
	return false
}

func (m *Video) GetPlaybackmethod() []PlaybackMethod {
	if m != nil {
		return m.Playbackmethod
	}
	return nil
}

func (m *Video) GetDelivery() []ContentDeliveryMethod {
	if m != nil {
		return m.Delivery
	}
	return nil
}

func (m *Video) GetPos() AdPosition {
	if m != nil {
		return m.Pos
	}
	return AdPosition_UNKNOWNADP
}

func (m *Video) GetCompanionad() []*Banner {
	if m != nil {
		return m.Companionad
	}
	return nil
}

func (m *Video) GetCompanionad_21() *CompanionAd {
	if m != nil {
		return m.Companionad_21
	}
	return nil
}

func (m *Video) GetApi() []APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *Video) GetCompaniontype() []CompanionType {
	if m != nil {
		return m.Companiontype
	}
	return nil
}

func (m *Video) GetPlacement() VideoPlacementType {
	if m != nil {
		return m.Placement
	}
	return VideoPlacementType_UNDEFINED_VIDEO_PLACEMENT
}

func (m *Video) GetPlaybackend() PlaybackCessationMode {
	if m != nil {
		return m.Playbackend
	}
	return PlaybackCessationMode_UNKNOWN
}

// OpenRTB 2.0: This object represents the most general type of
// impression.  Although the term "banner" may have very specific meaning
// in other contexts, here it can be many things including a simple static
// image, an expandable ad unit, or even in-banner video (refer to the Video
// object in Section 3.2.4 for the more generalized and full featured video
// ad units). An array of Banner objects can also appear within the Video
// to describe optional companion ads defined in the VAST specification.
// // The presence of a Banner as a subordinate of the Imp object indicates
// that this impression is offered as a banner type impression.
// At the publisher's discretion, that same impression may also be offered
// as video and/or native by also including as Imp subordinates the Video
// and/or Native objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type Banner struct {
	// Width in device independent pixels (DIPS).
	// If no format objects are specified, this is an exact width
	// requirement. Otherwise it is a preferred width.
	W int32 `protobuf:"varint,1,opt,name=w,proto3" json:"w,omitempty"`
	// Height in device independent pixels (DIPS).
	// If no format objects are specified, this is an exact height
	// requirement. Otherwise it is a preferred height.
	H int32 `protobuf:"varint,2,opt,name=h,proto3" json:"h,omitempty"`
	// Array of format objects representing the banner sizes permitted.
	// If none are specified, then use of the h and w attributes
	// is highly recommended.
	Format []*Format `protobuf:"bytes,15,rep,name=format,proto3" json:"format,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Maximum width in device independent pixels (DIPS).
	Wmax int32 `protobuf:"varint,11,opt,name=wmax,proto3" json:"wmax,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Maximum height in device independent pixels (DIPS).
	Hmax int32 `protobuf:"varint,12,opt,name=hmax,proto3" json:"hmax,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Minimum width in device independent pixels (DIPS).
	Wmin int32 `protobuf:"varint,13,opt,name=wmin,proto3" json:"wmin,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Minimum height in device independent pixels (DIPS).
	Hmin int32 `protobuf:"varint,14,opt,name=hmin,proto3" json:"hmin,omitempty"`
	// Unique identifier for this banner object. Recommended when Banner
	// objects are used with a Video object (Section 3.2.4) to represent
	// an array of companion ads. Values usually start at 1 and increase
	// with each object; should be unique within an impression.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Ad position on screen.
	Pos AdPosition `protobuf:"varint,4,opt,name=pos,proto3,enum=openrtb.AdPosition" json:"pos,omitempty"`
	// Blocked banner ad types.
	Btype []BannerAdType `protobuf:"varint,5,rep,packed,name=btype,proto3,enum=openrtb.BannerAdType" json:"btype,omitempty"`
	// Blocked creative attributes.
	Battr []CreativeAttribute `protobuf:"varint,6,rep,packed,name=battr,proto3,enum=openrtb.CreativeAttribute" json:"battr,omitempty"`
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg", "image/gif" and
	// "application/x-shockwave-flash".
	Mimes []string `protobuf:"bytes,7,rep,name=mimes,proto3" json:"mimes,omitempty"`
	// Specify if the banner is delivered in the top frame (true)
	// or in an iframe (false).
	Topframe bool `protobuf:"varint,8,opt,name=topframe,proto3" json:"topframe,omitempty"`
	// Directions in which the banner may expand.
	Expdir []ExpandableDirection `protobuf:"varint,9,rep,packed,name=expdir,proto3,enum=openrtb.ExpandableDirection" json:"expdir,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []APIFramework `protobuf:"varint,10,rep,packed,name=api,proto3,enum=openrtb.APIFramework" json:"api,omitempty"`
	// Relevant only for Banner objects used with a Video object
	// (Section 3.2.7) in an array of companion ads. Indicates the
	// companion banner rendering mode relative to the associated
	// video, where 0 = concurrent, 1 = end-card.
	Vcm                  bool     `protobuf:"varint,16,opt,name=vcm,proto3" json:"vcm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Banner) Reset()         { *m = Banner{} }
func (m *Banner) String() string { return proto.CompactTextString(m) }
func (*Banner) ProtoMessage()    {}
func (*Banner) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{15}
}
func (m *Banner) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Banner.Unmarshal(m, b)
}
func (m *Banner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Banner.Marshal(b, m, deterministic)
}
func (dst *Banner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Banner.Merge(dst, src)
}
func (m *Banner) XXX_Size() int {
	return xxx_messageInfo_Banner.Size(m)
}
func (m *Banner) XXX_DiscardUnknown() {
	xxx_messageInfo_Banner.DiscardUnknown(m)
}

var xxx_messageInfo_Banner proto.InternalMessageInfo

func (m *Banner) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *Banner) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *Banner) GetFormat() []*Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *Banner) GetWmax() int32 {
	if m != nil {
		return m.Wmax
	}
	return 0
}

func (m *Banner) GetHmax() int32 {
	if m != nil {
		return m.Hmax
	}
	return 0
}

func (m *Banner) GetWmin() int32 {
	if m != nil {
		return m.Wmin
	}
	return 0
}

func (m *Banner) GetHmin() int32 {
	if m != nil {
		return m.Hmin
	}
	return 0
}

func (m *Banner) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Banner) GetPos() AdPosition {
	if m != nil {
		return m.Pos
	}
	return AdPosition_UNKNOWNADP
}

func (m *Banner) GetBtype() []BannerAdType {
	if m != nil {
		return m.Btype
	}
	return nil
}

func (m *Banner) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *Banner) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *Banner) GetTopframe() bool {
	if m != nil {
		return m.Topframe
	}
	return false
}

func (m *Banner) GetExpdir() []ExpandableDirection {
	if m != nil {
		return m.Expdir
	}
	return nil
}

func (m *Banner) GetApi() []APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *Banner) GetVcm() bool {
	if m != nil {
		return m.Vcm
	}
	return false
}

// OpenRTB 2.4: This object represents an allowed size (i.e.,
// height and width combination) for a banner impression.
// These are typically used in an array for an impression where
// multiple sizes are permitted.
type Format struct {
	// Width in device independent pixels (DIPS).
	W int32 `protobuf:"varint,1,opt,name=w,proto3" json:"w,omitempty"`
	// Height in device independent pixels (DIPS).
	H int32 `protobuf:"varint,2,opt,name=h,proto3" json:"h,omitempty"`
	// Relative width when expressing size as a ratio.
	Wratio int32 `protobuf:"varint,3,opt,name=wratio,proto3" json:"wratio,omitempty"`
	// Relative height when expressing size as a ratio.
	Hratio int32 `protobuf:"varint,4,opt,name=hratio,proto3" json:"hratio,omitempty"`
	// The minimum width in device independent pixels (DIPS) at
	// which the ad will be displayed when the size is expressed as a ratio.
	Wmin                 int32    `protobuf:"varint,5,opt,name=wmin,proto3" json:"wmin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Format) Reset()         { *m = Format{} }
func (m *Format) String() string { return proto.CompactTextString(m) }
func (*Format) ProtoMessage()    {}
func (*Format) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{16}
}
func (m *Format) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Format.Unmarshal(m, b)
}
func (m *Format) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Format.Marshal(b, m, deterministic)
}
func (dst *Format) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Format.Merge(dst, src)
}
func (m *Format) XXX_Size() int {
	return xxx_messageInfo_Format.Size(m)
}
func (m *Format) XXX_DiscardUnknown() {
	xxx_messageInfo_Format.DiscardUnknown(m)
}

var xxx_messageInfo_Format proto.InternalMessageInfo

func (m *Format) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *Format) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *Format) GetWratio() int32 {
	if m != nil {
		return m.Wratio
	}
	return 0
}

func (m *Format) GetHratio() int32 {
	if m != nil {
		return m.Hratio
	}
	return 0
}

func (m *Format) GetWmin() int32 {
	if m != nil {
		return m.Wmin
	}
	return 0
}

// This object represents an audio type impression. Many of the fields
// are non-essential for minimally viable transactions, but are included
// to offer fine control when needed. Audio in OpenRTB generally assumes
// compliance with the DAAST standard. As such, the notion of companion
// ads is supported by optionally including an array of Banner objects
// that define these companion ads.
// // The presence of a Audio as a subordinate of the Imp object indicates
// that this impression is offered as an audio type impression.
// At the publisher’s discretion, that same impression may also be offered
// as banner, video, and/or native by also including as Imp subordinates
// objects of those types. However, any given bid for the impression must
// conform to one of the offered types.
type Audio struct {
	// Content MIME types supported (e.g., "audio/mp4").
	// REQUIRED by the OpenRTB specification: at least 1 element.
	Mimes []string `protobuf:"bytes,1,rep,name=mimes,proto3" json:"mimes,omitempty"`
	// Minimum audio ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Minduration int32 `protobuf:"varint,2,opt,name=minduration,proto3" json:"minduration,omitempty"`
	// Maximum audio ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Maxduration int32 `protobuf:"varint,3,opt,name=maxduration,proto3" json:"maxduration,omitempty"`
	// Array of supported audio protocols.
	// RECOMMENDED by the OpenRTB specification.
	Protocols []Protocol `protobuf:"varint,4,rep,packed,name=protocols,proto3,enum=openrtb.Protocol" json:"protocols,omitempty"`
	// Indicates the start delay in seconds for pre-roll, mid-roll, or
	// post-roll ad placements.
	// Refer to enum StartDelay for generic values.
	// RECOMMENDED by the OpenRTB specification.
	Startdelay int32 `protobuf:"varint,5,opt,name=startdelay,proto3" json:"startdelay,omitempty"`
	// If multiple ad impressions are offered in the same bid request,
	// the sequence number will allow for the coordinated delivery of
	// multiple creatives.
	Sequence int32 `protobuf:"varint,6,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Blocked creative attributes.
	Battr []CreativeAttribute `protobuf:"varint,7,rep,packed,name=battr,proto3,enum=openrtb.CreativeAttribute" json:"battr,omitempty"`
	// Maximum extended video ad duration, if extension is allowed.
	// If blank or 0, extension is not allowed. If -1, extension is allowed,
	// and there is no time limit imposed. If greater than 0, then the value
	// represents the number of seconds of extended play supported beyond
	// the maxduration value.
	Maxextended int32 `protobuf:"varint,8,opt,name=maxextended,proto3" json:"maxextended,omitempty"`
	// Minimum bit rate in Kbps.
	Minbitrate int32 `protobuf:"varint,9,opt,name=minbitrate,proto3" json:"minbitrate,omitempty"`
	// Maximum bit rate in Kbps.
	Maxbitrate int32 `protobuf:"varint,10,opt,name=maxbitrate,proto3" json:"maxbitrate,omitempty"`
	// Supported delivery methods (e.g., streaming, progressive).
	// If none specified, assume all are supported.
	Delivery []ContentDeliveryMethod `protobuf:"varint,11,rep,packed,name=delivery,proto3,enum=openrtb.ContentDeliveryMethod" json:"delivery,omitempty"`
	// Array of Banner objects if companion ads are available.
	Companionad []*Banner `protobuf:"bytes,12,rep,name=companionad,proto3" json:"companionad,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []APIFramework `protobuf:"varint,13,rep,packed,name=api,proto3,enum=openrtb.APIFramework" json:"api,omitempty"`
	// Supported DAAST companion ad types.  Recommended if companion Banner
	// objects are included via the companionad array.
	Companiontype []CompanionType `protobuf:"varint,20,rep,packed,name=companiontype,proto3,enum=openrtb.CompanionType" json:"companiontype,omitempty"`
	// The maximum number of ads that can be played in an ad pod.
	Maxseq int32 `protobuf:"varint,21,opt,name=maxseq,proto3" json:"maxseq,omitempty"`
	// Type of audio feed.
	Feed FeedType `protobuf:"varint,22,opt,name=feed,proto3,enum=openrtb.FeedType" json:"feed,omitempty"`
	// Indicates if the ad is stitched with audio content or delivered
	// independently, where 0 = no, 1 = yes.
	Stitched bool `protobuf:"varint,23,opt,name=stitched,proto3" json:"stitched,omitempty"`
	// Volume normalization mode.
	Nvol                 VolumeNormalizationMode `protobuf:"varint,24,opt,name=nvol,proto3,enum=openrtb.VolumeNormalizationMode" json:"nvol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Audio) Reset()         { *m = Audio{} }
func (m *Audio) String() string { return proto.CompactTextString(m) }
func (*Audio) ProtoMessage()    {}
func (*Audio) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{17}
}
func (m *Audio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Audio.Unmarshal(m, b)
}
func (m *Audio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Audio.Marshal(b, m, deterministic)
}
func (dst *Audio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audio.Merge(dst, src)
}
func (m *Audio) XXX_Size() int {
	return xxx_messageInfo_Audio.Size(m)
}
func (m *Audio) XXX_DiscardUnknown() {
	xxx_messageInfo_Audio.DiscardUnknown(m)
}

var xxx_messageInfo_Audio proto.InternalMessageInfo

func (m *Audio) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *Audio) GetMinduration() int32 {
	if m != nil {
		return m.Minduration
	}
	return 0
}

func (m *Audio) GetMaxduration() int32 {
	if m != nil {
		return m.Maxduration
	}
	return 0
}

func (m *Audio) GetProtocols() []Protocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *Audio) GetStartdelay() int32 {
	if m != nil {
		return m.Startdelay
	}
	return 0
}

func (m *Audio) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Audio) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *Audio) GetMaxextended() int32 {
	if m != nil {
		return m.Maxextended
	}
	return 0
}

func (m *Audio) GetMinbitrate() int32 {
	if m != nil {
		return m.Minbitrate
	}
	return 0
}

func (m *Audio) GetMaxbitrate() int32 {
	if m != nil {
		return m.Maxbitrate
	}
	return 0
}

func (m *Audio) GetDelivery() []ContentDeliveryMethod {
	if m != nil {
		return m.Delivery
	}
	return nil
}

func (m *Audio) GetCompanionad() []*Banner {
	if m != nil {
		return m.Companionad
	}
	return nil
}

func (m *Audio) GetApi() []APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *Audio) GetCompaniontype() []CompanionType {
	if m != nil {
		return m.Companiontype
	}
	return nil
}

func (m *Audio) GetMaxseq() int32 {
	if m != nil {
		return m.Maxseq
	}
	return 0
}

func (m *Audio) GetFeed() FeedType {
	if m != nil {
		return m.Feed
	}
	return FeedType_UNKNOWNFT
}

func (m *Audio) GetStitched() bool {
	if m != nil {
		return m.Stitched
	}
	return false
}

func (m *Audio) GetNvol() VolumeNormalizationMode {
	if m != nil {
		return m.Nvol
	}
	return VolumeNormalizationMode_NONE
}

// OpenRTB 2.3: This object represents a native type impression.
// Native ad units are intended to blend seamlessly into the surrounding
// content (e.g., a sponsored Twitter or Facebook post). As such, the
// response must be well-structured to afford the publisher fine-grained
// control over rendering.
// // The Native Subcommittee has developed a companion specification to
// OpenRTB called the Native Ad Specification. It defines the request
// parameters and response markup structure of native ad units.
// This object provides the means of transporting request parameters as an
// opaque string so that the specific parameters can evolve separately
// under the auspices of the Native Ad Specification. Similarly, the
// ad markup served will be structured according to that specification.
// // The presence of a Native as a subordinate of the Imp object indicates
// that this impression is offered as a native type impression.
// At the publisher's discretion, that same impression may also be offered
// as banner and/or video by also including as Imp subordinates the Banner
// and/or Video objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type Native struct {
	// Types that are valid to be assigned to RequestOneof:
	//	*Native_Request
	//	*Native_RequestNative
	RequestOneof isNative_RequestOneof `protobuf_oneof:"request_oneof"`
	// Version of the Native Ad Specification to which request complies.
	// RECOMMENDED by the OpenRTB specification.
	Ver string `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []APIFramework `protobuf:"varint,3,rep,packed,name=api,proto3,enum=openrtb.APIFramework" json:"api,omitempty"`
	// Blocked creative attributes.
	Battr                []CreativeAttribute `protobuf:"varint,4,rep,packed,name=battr,proto3,enum=openrtb.CreativeAttribute" json:"battr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Native) Reset()         { *m = Native{} }
func (m *Native) String() string { return proto.CompactTextString(m) }
func (*Native) ProtoMessage()    {}
func (*Native) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{18}
}
func (m *Native) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Native.Unmarshal(m, b)
}
func (m *Native) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Native.Marshal(b, m, deterministic)
}
func (dst *Native) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Native.Merge(dst, src)
}
func (m *Native) XXX_Size() int {
	return xxx_messageInfo_Native.Size(m)
}
func (m *Native) XXX_DiscardUnknown() {
	xxx_messageInfo_Native.DiscardUnknown(m)
}

var xxx_messageInfo_Native proto.InternalMessageInfo

type isNative_RequestOneof interface {
	isNative_RequestOneof()
}

type Native_Request struct {
	Request string `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

type Native_RequestNative struct {
	RequestNative *NativeRequest `protobuf:"bytes,50,opt,name=request_native,json=requestNative,proto3,oneof"`
}

func (*Native_Request) isNative_RequestOneof() {}

func (*Native_RequestNative) isNative_RequestOneof() {}

func (m *Native) GetRequestOneof() isNative_RequestOneof {
	if m != nil {
		return m.RequestOneof
	}
	return nil
}

func (m *Native) GetRequest() string {
	if x, ok := m.GetRequestOneof().(*Native_Request); ok {
		return x.Request
	}
	return ""
}

func (m *Native) GetRequestNative() *NativeRequest {
	if x, ok := m.GetRequestOneof().(*Native_RequestNative); ok {
		return x.RequestNative
	}
	return nil
}

func (m *Native) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *Native) GetApi() []APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *Native) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Native) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Native_OneofMarshaler, _Native_OneofUnmarshaler, _Native_OneofSizer, []interface{}{
		(*Native_Request)(nil),
		(*Native_RequestNative)(nil),
	}
}

func _Native_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Native)
	// request_oneof
	switch x := m.RequestOneof.(type) {
	case *Native_Request:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Request)
	case *Native_RequestNative:
		b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestNative); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Native.RequestOneof has unexpected type %T", x)
	}
	return nil
}

func _Native_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Native)
	switch tag {
	case 1: // request_oneof.request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RequestOneof = &Native_Request{x}
		return true, err
	case 50: // request_oneof.request_native
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest)
		err := b.DecodeMessage(msg)
		m.RequestOneof = &Native_RequestNative{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Native_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Native)
	// request_oneof
	switch x := m.RequestOneof.(type) {
	case *Native_Request:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Request)))
		n += len(x.Request)
	case *Native_RequestNative:
		s := proto.Size(x.RequestNative)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OpenRTB Native 1.0: The Native Object defines the native advertising
// opportunity available for bid via this bid request. It must be included
// directly in the impression object if the impression offered for auction
// is a native ad format.
// Note: Prior to VERSION 1.1, the specification could be interpreted as
// requiring the native request to have a root node with a single field "native"
// that would contain the NativeRequest as its value.
// In 1.2 The NativeRequest Object specified here is now the root object.
type NativeRequest struct {
	// Version of the Native Markup version in use.
	Ver string `protobuf:"bytes,1,opt,name=ver,proto3" json:"ver,omitempty"`
	// The context in which the ad appears.
	// RECOMMENDED in 1.2.
	Context NativeRequest_ContextType `protobuf:"varint,2,opt,name=context,proto3,enum=openrtb.NativeRequest_ContextType" json:"context,omitempty"`
	// A more detailed context in which the ad appears.
	Contextsubtype NativeRequest_ContextSubtype `protobuf:"varint,3,opt,name=contextsubtype,proto3,enum=openrtb.NativeRequest_ContextSubtype" json:"contextsubtype,omitempty"`
	// The design/format/layout of the ad unit being offered.
	// RECOMMENDED by the OpenRTB Native specification.
	Plcmttype PlacementType `protobuf:"varint,4,opt,name=plcmttype,proto3,enum=openrtb.PlacementType" json:"plcmttype,omitempty"`
	// The number of identical placements in this Layout.
	Plcmtcnt int32 `protobuf:"varint,5,opt,name=plcmtcnt,proto3" json:"plcmtcnt,omitempty"`
	// 0 for the first ad, 1 for the second ad, and so on. Note this would
	// generally NOT be used in combination with plcmtcnt - either you are
	// auctioning multiple identical placements (in which case
	// plcmtcnt>1, seq=0) or you are holding separate auctions for distinct
	// items in the feed (in which case plcmtcnt=1, seq>=1).
	Seq int32 `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"`
	// Any bid must comply with the array of elements expressed by the Exchange.
	// REQUIRED by the OpenRTB Native specification: at least 1 element.
	Assets []*NativeRequest_Asset `protobuf:"bytes,7,rep,name=assets,proto3" json:"assets,omitempty"`
	// Whether the supply source / impression supports returning an assetsurl
	// instead of an asset object. 0 or the absence of the field indicates no such
	// support.
	// Implemented in 1.2
	Aurlsupport bool `protobuf:"varint,11,opt,name=aurlsupport,proto3" json:"aurlsupport,omitempty"`
	// Whether the supply source / impression supports returning a DCO URL
	// instead of an asset object. 0 or the absence of the field indicates no such
	// support.
	// Implemented in 1.2
	// Beta feature.
	Durlsupport bool `protobuf:"varint,12,opt,name=durlsupport,proto3" json:"durlsupport,omitempty"`
	// Specifies what type of event tracking is supported.
	// Implemented in 1.2
	Eventtrackers []*NativeRequest_EventTrackers `protobuf:"bytes,13,rep,name=eventtrackers,proto3" json:"eventtrackers,omitempty"`
	// Set to 1 when the native ad supports buyer-specific privacy notice.
	// Set to 0 (or field absent) when the native ad doesn't support custom
	// privacy links or if support is unknown.
	// RECOMMENDED and implemented in 1.2
	Privacy              bool     `protobuf:"varint,14,opt,name=privacy,proto3" json:"privacy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeRequest) Reset()         { *m = NativeRequest{} }
func (m *NativeRequest) String() string { return proto.CompactTextString(m) }
func (*NativeRequest) ProtoMessage()    {}
func (*NativeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{19}
}
func (m *NativeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeRequest.Unmarshal(m, b)
}
func (m *NativeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeRequest.Marshal(b, m, deterministic)
}
func (dst *NativeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeRequest.Merge(dst, src)
}
func (m *NativeRequest) XXX_Size() int {
	return xxx_messageInfo_NativeRequest.Size(m)
}
func (m *NativeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NativeRequest proto.InternalMessageInfo

func (m *NativeRequest) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *NativeRequest) GetContext() NativeRequest_ContextType {
	if m != nil {
		return m.Context
	}
	return NativeRequest_UNKNOWNCTXT
}

func (m *NativeRequest) GetContextsubtype() NativeRequest_ContextSubtype {
	if m != nil {
		return m.Contextsubtype
	}
	return NativeRequest_UNKNOWNCST
}

func (m *NativeRequest) GetPlcmttype() PlacementType {
	if m != nil {
		return m.Plcmttype
	}
	return PlacementType_UNKNOWNPT
}

func (m *NativeRequest) GetPlcmtcnt() int32 {
	if m != nil {
		return m.Plcmtcnt
	}
	return 0
}

func (m *NativeRequest) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *NativeRequest) GetAssets() []*NativeRequest_Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *NativeRequest) GetAurlsupport() bool {
	if m != nil {
		return m.Aurlsupport
	}
	return false
}

func (m *NativeRequest) GetDurlsupport() bool {
	if m != nil {
		return m.Durlsupport
	}
	return false
}

func (m *NativeRequest) GetEventtrackers() []*NativeRequest_EventTrackers {
	if m != nil {
		return m.Eventtrackers
	}
	return nil
}

func (m *NativeRequest) GetPrivacy() bool {
	if m != nil {
		return m.Privacy
	}
	return false
}

// OpenRTB Native 1.0: The main container object for each asset requested or
// supported by Exchange on behalf of the rendering client.
// Any object that is required is to be flagged as such. Only one of the
// {title,img,video,data} objects should be present in each object.
// All others should be null/absent. The id is to be unique within the
// Asset array so that the response can be aligned.
type NativeRequest_Asset struct {
	// Unique asset ID, assigned by exchange. Typically a counter for the array.
	// REQUIRED by the OpenRTB Native specification.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Set to true if asset is required
	// (exchange will not accept a bid without it).
	Required bool `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	// RECOMMENDED by the OpenRTB Native specification.
	//
	// Types that are valid to be assigned to AssetOneof:
	//	*NativeRequest_Asset_Title_
	//	*NativeRequest_Asset_Img
	//	*NativeRequest_Asset_Video
	//	*NativeRequest_Asset_Data_
	AssetOneof           isNativeRequest_Asset_AssetOneof `protobuf_oneof:"asset_oneof"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *NativeRequest_Asset) Reset()         { *m = NativeRequest_Asset{} }
func (m *NativeRequest_Asset) String() string { return proto.CompactTextString(m) }
func (*NativeRequest_Asset) ProtoMessage()    {}
func (*NativeRequest_Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{19, 0}
}
func (m *NativeRequest_Asset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeRequest_Asset.Unmarshal(m, b)
}
func (m *NativeRequest_Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeRequest_Asset.Marshal(b, m, deterministic)
}
func (dst *NativeRequest_Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeRequest_Asset.Merge(dst, src)
}
func (m *NativeRequest_Asset) XXX_Size() int {
	return xxx_messageInfo_NativeRequest_Asset.Size(m)
}
func (m *NativeRequest_Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeRequest_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_NativeRequest_Asset proto.InternalMessageInfo

func (m *NativeRequest_Asset) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NativeRequest_Asset) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

type isNativeRequest_Asset_AssetOneof interface {
	isNativeRequest_Asset_AssetOneof()
}

type NativeRequest_Asset_Title_ struct {
	Title *NativeRequest_Asset_Title `protobuf:"bytes,3,opt,name=title,proto3,oneof"`
}

type NativeRequest_Asset_Img struct {
	Img *NativeRequest_Asset_Image `protobuf:"bytes,4,opt,name=img,proto3,oneof"`
}

type NativeRequest_Asset_Video struct {
	Video *Video `protobuf:"bytes,5,opt,name=video,proto3,oneof"`
}

type NativeRequest_Asset_Data_ struct {
	Data *NativeRequest_Asset_Data `protobuf:"bytes,6,opt,name=data,proto3,oneof"`
}

func (*NativeRequest_Asset_Title_) isNativeRequest_Asset_AssetOneof() {}

func (*NativeRequest_Asset_Img) isNativeRequest_Asset_AssetOneof() {}

func (*NativeRequest_Asset_Video) isNativeRequest_Asset_AssetOneof() {}

func (*NativeRequest_Asset_Data_) isNativeRequest_Asset_AssetOneof() {}

func (m *NativeRequest_Asset) GetAssetOneof() isNativeRequest_Asset_AssetOneof {
	if m != nil {
		return m.AssetOneof
	}
	return nil
}

func (m *NativeRequest_Asset) GetTitle() *NativeRequest_Asset_Title {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Title_); ok {
		return x.Title
	}
	return nil
}

func (m *NativeRequest_Asset) GetImg() *NativeRequest_Asset_Image {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Img); ok {
		return x.Img
	}
	return nil
}

func (m *NativeRequest_Asset) GetVideo() *Video {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Video); ok {
		return x.Video
	}
	return nil
}

func (m *NativeRequest_Asset) GetData() *NativeRequest_Asset_Data {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Data_); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NativeRequest_Asset) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NativeRequest_Asset_OneofMarshaler, _NativeRequest_Asset_OneofUnmarshaler, _NativeRequest_Asset_OneofSizer, []interface{}{
		(*NativeRequest_Asset_Title_)(nil),
		(*NativeRequest_Asset_Img)(nil),
		(*NativeRequest_Asset_Video)(nil),
		(*NativeRequest_Asset_Data_)(nil),
	}
}

func _NativeRequest_Asset_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NativeRequest_Asset)
	// asset_oneof
	switch x := m.AssetOneof.(type) {
	case *NativeRequest_Asset_Title_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Title); err != nil {
			return err
		}
	case *NativeRequest_Asset_Img:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Img); err != nil {
			return err
		}
	case *NativeRequest_Asset_Video:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case *NativeRequest_Asset_Data_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NativeRequest_Asset.AssetOneof has unexpected type %T", x)
	}
	return nil
}

func _NativeRequest_Asset_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NativeRequest_Asset)
	switch tag {
	case 3: // asset_oneof.title
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest_Asset_Title)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Title_{msg}
		return true, err
	case 4: // asset_oneof.img
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest_Asset_Image)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Img{msg}
		return true, err
	case 5: // asset_oneof.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Video)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Video{msg}
		return true, err
	case 6: // asset_oneof.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest_Asset_Data)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NativeRequest_Asset_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NativeRequest_Asset)
	// asset_oneof
	switch x := m.AssetOneof.(type) {
	case *NativeRequest_Asset_Title_:
		s := proto.Size(x.Title)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeRequest_Asset_Img:
		s := proto.Size(x.Img)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeRequest_Asset_Video:
		s := proto.Size(x.Video)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeRequest_Asset_Data_:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OpenRTB Native 1.0: The Title object is to be used for title element
// of the Native ad.
type NativeRequest_Asset_Title struct {
	// Maximum length of the text in the title element.
	// RECOMMENDED that the value be either of: 25, 90, 140.
	// REQUIRED by the OpenRTB Native specification.
	Len                  int32    `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeRequest_Asset_Title) Reset()         { *m = NativeRequest_Asset_Title{} }
func (m *NativeRequest_Asset_Title) String() string { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Title) ProtoMessage()    {}
func (*NativeRequest_Asset_Title) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{19, 0, 0}
}
func (m *NativeRequest_Asset_Title) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeRequest_Asset_Title.Unmarshal(m, b)
}
func (m *NativeRequest_Asset_Title) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeRequest_Asset_Title.Marshal(b, m, deterministic)
}
func (dst *NativeRequest_Asset_Title) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeRequest_Asset_Title.Merge(dst, src)
}
func (m *NativeRequest_Asset_Title) XXX_Size() int {
	return xxx_messageInfo_NativeRequest_Asset_Title.Size(m)
}
func (m *NativeRequest_Asset_Title) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeRequest_Asset_Title.DiscardUnknown(m)
}

var xxx_messageInfo_NativeRequest_Asset_Title proto.InternalMessageInfo

func (m *NativeRequest_Asset_Title) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

// OpenRTB Native 1.0: The Image object to be used for all image elements
// of the Native ad such as Icons, Main Image, etc.
// RECOMMENDED sizes and aspect ratios are included in ImageAssetType.
type NativeRequest_Asset_Image struct {
	// Type ID of the image element supported by the publisher.
	// The publisher can display this information in an appropriate format.
	Type NativeRequest_ImageAssetType `protobuf:"varint,1,opt,name=type,proto3,enum=openrtb.NativeRequest_ImageAssetType" json:"type,omitempty"`
	// Width of the image in pixels.
	W int32 `protobuf:"varint,2,opt,name=w,proto3" json:"w,omitempty"`
	// Height of the image in pixels.
	H int32 `protobuf:"varint,3,opt,name=h,proto3" json:"h,omitempty"`
	// The minimum requested width of the image in pixels. This option should
	// be used for any rescaling of images by the client. Either w or wmin
	// should be transmitted. If only w is included, it should be considered
	// an exact requirement.
	// RECOMMENDED by the OpenRTB Native specification.
	Wmin int32 `protobuf:"varint,4,opt,name=wmin,proto3" json:"wmin,omitempty"`
	// The minimum requested height of the image in pixels. This option should
	// be used for any rescaling of images by the client. Either h or hmin
	// should be transmitted. If only h is included, it should be considered
	// an exact requirement.
	// RECOMMENDED by the OpenRTB Native specification.
	Hmin int32 `protobuf:"varint,5,opt,name=hmin,proto3" json:"hmin,omitempty"`
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg" and "image/gif". Each implementing
	// Exchange should have their own list of supported types in the
	// integration docs. See Wikipedia's MIME page for more information and
	// links to all IETF RFCs. If blank, assume all types are allowed.
	Mimes                []string `protobuf:"bytes,6,rep,name=mimes,proto3" json:"mimes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeRequest_Asset_Image) Reset()         { *m = NativeRequest_Asset_Image{} }
func (m *NativeRequest_Asset_Image) String() string { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Image) ProtoMessage()    {}
func (*NativeRequest_Asset_Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{19, 0, 1}
}
func (m *NativeRequest_Asset_Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeRequest_Asset_Image.Unmarshal(m, b)
}
func (m *NativeRequest_Asset_Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeRequest_Asset_Image.Marshal(b, m, deterministic)
}
func (dst *NativeRequest_Asset_Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeRequest_Asset_Image.Merge(dst, src)
}
func (m *NativeRequest_Asset_Image) XXX_Size() int {
	return xxx_messageInfo_NativeRequest_Asset_Image.Size(m)
}
func (m *NativeRequest_Asset_Image) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeRequest_Asset_Image.DiscardUnknown(m)
}

var xxx_messageInfo_NativeRequest_Asset_Image proto.InternalMessageInfo

func (m *NativeRequest_Asset_Image) GetType() NativeRequest_ImageAssetType {
	if m != nil {
		return m.Type
	}
	return NativeRequest_UNKNOWNIAT
}

func (m *NativeRequest_Asset_Image) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetWmin() int32 {
	if m != nil {
		return m.Wmin
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetHmin() int32 {
	if m != nil {
		return m.Hmin
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

// OpenRTB Native 1.0: The Data Object is to be used for all non-core
// elements of the native unit such as Ratings, Review Count, Stars,
// Download count, descriptions etc. It is also generic for future of Native
// elements not contemplated at the time of the writing of this document.
type NativeRequest_Asset_Data struct {
	// Type ID of the element supported by the publisher. The publisher can
	// display this information in an appropriate format.
	// REQUIRED by the OpenRTB Native specification.
	Type DataAssetType `protobuf:"varint,1,opt,name=type,proto3,enum=openrtb.DataAssetType" json:"type,omitempty"`
	// Maximum length of the text in the element's response. Longer strings
	// may be truncated and ellipsized by Ad Exchange or the publisher during
	// rendering.
	Len                  int32    `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeRequest_Asset_Data) Reset()         { *m = NativeRequest_Asset_Data{} }
func (m *NativeRequest_Asset_Data) String() string { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Data) ProtoMessage()    {}
func (*NativeRequest_Asset_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{19, 0, 2}
}
func (m *NativeRequest_Asset_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeRequest_Asset_Data.Unmarshal(m, b)
}
func (m *NativeRequest_Asset_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeRequest_Asset_Data.Marshal(b, m, deterministic)
}
func (dst *NativeRequest_Asset_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeRequest_Asset_Data.Merge(dst, src)
}
func (m *NativeRequest_Asset_Data) XXX_Size() int {
	return xxx_messageInfo_NativeRequest_Asset_Data.Size(m)
}
func (m *NativeRequest_Asset_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeRequest_Asset_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NativeRequest_Asset_Data proto.InternalMessageInfo

func (m *NativeRequest_Asset_Data) GetType() DataAssetType {
	if m != nil {
		return m.Type
	}
	return DataAssetType_UNKNOWNDAT
}

func (m *NativeRequest_Asset_Data) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

// OpenRTB Native 1.2: The EventTrackers object specifies the type of events
// the bidder can request to be tracked in the bid response, and which types
// of tracking are available for each event type, and is included as an array
// in the request.
type NativeRequest_EventTrackers struct {
	// Type of event available for tracking.
	// REQUIRED by the OpenRTB Native specification.
	Event EventType `protobuf:"varint,1,opt,name=event,proto3,enum=openrtb.EventType" json:"event,omitempty"`
	// Array of types of tracking available for the given event.
	// REQUIRED by the OpenRTB Native specification.
	Methods              []EventTrackingMethod `protobuf:"varint,2,rep,packed,name=methods,proto3,enum=openrtb.EventTrackingMethod" json:"methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NativeRequest_EventTrackers) Reset()         { *m = NativeRequest_EventTrackers{} }
func (m *NativeRequest_EventTrackers) String() string { return proto.CompactTextString(m) }
func (*NativeRequest_EventTrackers) ProtoMessage()    {}
func (*NativeRequest_EventTrackers) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{19, 1}
}
func (m *NativeRequest_EventTrackers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeRequest_EventTrackers.Unmarshal(m, b)
}
func (m *NativeRequest_EventTrackers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeRequest_EventTrackers.Marshal(b, m, deterministic)
}
func (dst *NativeRequest_EventTrackers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeRequest_EventTrackers.Merge(dst, src)
}
func (m *NativeRequest_EventTrackers) XXX_Size() int {
	return xxx_messageInfo_NativeRequest_EventTrackers.Size(m)
}
func (m *NativeRequest_EventTrackers) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeRequest_EventTrackers.DiscardUnknown(m)
}

var xxx_messageInfo_NativeRequest_EventTrackers proto.InternalMessageInfo

func (m *NativeRequest_EventTrackers) GetEvent() EventType {
	if m != nil {
		return m.Event
	}
	return EventType_UNKNOWNET
}

func (m *NativeRequest_EventTrackers) GetMethods() []EventTrackingMethod {
	if m != nil {
		return m.Methods
	}
	return nil
}

// OpenRTB 2.2: This object is the private marketplace container for
// direct deals between buyers and sellers that may pertain to this
// impression. The actual deals are represented as a collection of
// Deal objects. Refer to Section 7.2 for more details.
type Pmp struct {
	// Indicator of auction eligibility to seats named in the Direct Deals
	// object, where 0 = all bids are accepted, 1 = bids are restricted to
	// the deals specified and the terms thereof.
	PrivateAuction bool `protobuf:"varint,1,opt,name=private_auction,json=privateAuction,proto3" json:"private_auction,omitempty"`
	// Array of Deal (Section 3.2.18) objects that convey the specific deals
	// applicable to this impression.
	Deals                []*Deal  `protobuf:"bytes,2,rep,name=deals,proto3" json:"deals,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pmp) Reset()         { *m = Pmp{} }
func (m *Pmp) String() string { return proto.CompactTextString(m) }
func (*Pmp) ProtoMessage()    {}
func (*Pmp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{20}
}
func (m *Pmp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pmp.Unmarshal(m, b)
}
func (m *Pmp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pmp.Marshal(b, m, deterministic)
}
func (dst *Pmp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pmp.Merge(dst, src)
}
func (m *Pmp) XXX_Size() int {
	return xxx_messageInfo_Pmp.Size(m)
}
func (m *Pmp) XXX_DiscardUnknown() {
	xxx_messageInfo_Pmp.DiscardUnknown(m)
}

var xxx_messageInfo_Pmp proto.InternalMessageInfo

func (m *Pmp) GetPrivateAuction() bool {
	if m != nil {
		return m.PrivateAuction
	}
	return false
}

func (m *Pmp) GetDeals() []*Deal {
	if m != nil {
		return m.Deals
	}
	return nil
}

// OpenRTB 2.5: This object is associated with an impression as
// an array of metrics. These metrics can offer insight into
// the impression to assist with decisioning such as average recent
// viewability, click-through rate, etc.  Each metric is identified
// by its type, reports the value of the metric, and optionally
// identifies the source or vendor measuring the value.
type Metric struct {
	// Type of metric being presented using exchange curated string
	// names which should be published to bidders a priori.
	// REQUIRED by the OpenRTB specification.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Number representing the value of the metric.
	// Probabilities must be in the range 0.0 – 1.0.
	// REQUIRED by the OpenRTB specification.
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	// Source of the value using exchange curated string names
	// which should be published to bidders a priori.
	// If the exchange itself is the source versus a third party,
	// "EXCHANGE" is recommended.
	// RECOMMENDED by the OpenRTB specification.
	Vendor               string   `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{21}
}
func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (dst *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(dst, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Metric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Metric) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

// OpenRTB 2.2: This object constitutes a specific deal that was struck
// a priori between a buyer and a seller. Its presence with the Pmp
// collection indicates that this impression is available under the terms
// of that deal. Refer to Section 7.2 for more details.
type Deal struct {
	// A unique identifier for the direct deal.
	// REQUIRED by the OpenRTB specification.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Minimum bid for this impression expressed in CPM.
	Bidfloor float64 `protobuf:"fixed64,2,opt,name=bidfloor,proto3" json:"bidfloor,omitempty"`
	// Currency specified using ISO-4217 alpha codes. This may be different
	// from bid currency returned by bidder if this is allowed
	// by the exchange.
	Bidfloorcur string `protobuf:"bytes,3,opt,name=bidfloorcur,proto3" json:"bidfloorcur,omitempty"`
	// Whitelist of buyer seats (e.g., advertisers, agencies) allowed to
	// bid on this deal. IDs of seats and knowledge of the buyer's
	// customers to which they refer must be coordinated between bidders
	// and the exchange a priori. Omission implies no seat restrictions.
	Wseat []string `protobuf:"bytes,4,rep,name=wseat,proto3" json:"wseat,omitempty"`
	// Array of advertiser domains (e.g., advertiser.com) allowed to
	// bid on this deal. Omission implies no advertiser restrictions.
	Wadomain []string `protobuf:"bytes,5,rep,name=wadomain,proto3" json:"wadomain,omitempty"`
	// Optional override of the overall auction type of the bid request,
	// where 1 = First Price, 2 = Second Price Plus, 3 = the value passed
	// in bidfloor is the agreed upon deal price. Additional auction types
	// can be defined by the exchange.
	At                   AuctionType `protobuf:"varint,6,opt,name=at,proto3,enum=openrtb.AuctionType" json:"at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Deal) Reset()         { *m = Deal{} }
func (m *Deal) String() string { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()    {}
func (*Deal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{22}
}
func (m *Deal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deal.Unmarshal(m, b)
}
func (m *Deal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deal.Marshal(b, m, deterministic)
}
func (dst *Deal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deal.Merge(dst, src)
}
func (m *Deal) XXX_Size() int {
	return xxx_messageInfo_Deal.Size(m)
}
func (m *Deal) XXX_DiscardUnknown() {
	xxx_messageInfo_Deal.DiscardUnknown(m)
}

var xxx_messageInfo_Deal proto.InternalMessageInfo

func (m *Deal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Deal) GetBidfloor() float64 {
	if m != nil {
		return m.Bidfloor
	}
	return 0
}

func (m *Deal) GetBidfloorcur() string {
	if m != nil {
		return m.Bidfloorcur
	}
	return ""
}

func (m *Deal) GetWseat() []string {
	if m != nil {
		return m.Wseat
	}
	return nil
}

func (m *Deal) GetWadomain() []string {
	if m != nil {
		return m.Wadomain
	}
	return nil
}

func (m *Deal) GetAt() AuctionType {
	if m != nil {
		return m.At
	}
	return AuctionType_DEFAULT
}

// OpenRTB 2.0: This object is the top-level bid response object (i.e., the
// unnamed outer JSON object). The id attribute is a reflection of the bid
// request ID for logging purposes. Similarly, bidid is an optional response
// tracking ID for bidders. If specified, it can be included in the subsequent
// win notice call if the bidder wins. At least one seatbid object is required,
// which contains at least one bid for an impression. Other attributes are
// optional. To express a "no-bid", the options are to return an empty response
// with HTTP 204. Alternately if the bidder wishes to convey to the exchange a
// reason for not bidding, just a BidResponse object is returned with a
// reason code in the nbr attribute.
type BidResponse struct {
	// ID of the bid request to which this is a response.
	// REQUIRED by the OpenRTB specification.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Array of seatbid objects; 1+ required if a bid is to be made.
	Seatbid []*BidResponse_SeatBid `protobuf:"bytes,2,rep,name=seatbid,proto3" json:"seatbid,omitempty"`
	// Bidder generated response ID to assist with logging/tracking.
	Bidid string `protobuf:"bytes,3,opt,name=bidid,proto3" json:"bidid,omitempty"`
	// Bid currency using ISO-4217 alpha codes.
	Cur string `protobuf:"bytes,4,opt,name=cur,proto3" json:"cur,omitempty"`
	// Optional feature to allow a bidder to set data in the exchange's cookie.
	// The string must be in base85 cookie safe characters and be in any format.
	// Proper JSON encoding must be used to include "escaped" quotation marks.
	Customdata string `protobuf:"bytes,5,opt,name=customdata,proto3" json:"customdata,omitempty"`
	// Reason for not bidding.
	Nbr                  NoBidReason `protobuf:"varint,6,opt,name=nbr,proto3,enum=openrtb.NoBidReason" json:"nbr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BidResponse) Reset()         { *m = BidResponse{} }
func (m *BidResponse) String() string { return proto.CompactTextString(m) }
func (*BidResponse) ProtoMessage()    {}
func (*BidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{23}
}
func (m *BidResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BidResponse.Unmarshal(m, b)
}
func (m *BidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BidResponse.Marshal(b, m, deterministic)
}
func (dst *BidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidResponse.Merge(dst, src)
}
func (m *BidResponse) XXX_Size() int {
	return xxx_messageInfo_BidResponse.Size(m)
}
func (m *BidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BidResponse proto.InternalMessageInfo

func (m *BidResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidResponse) GetSeatbid() []*BidResponse_SeatBid {
	if m != nil {
		return m.Seatbid
	}
	return nil
}

func (m *BidResponse) GetBidid() string {
	if m != nil {
		return m.Bidid
	}
	return ""
}

func (m *BidResponse) GetCur() string {
	if m != nil {
		return m.Cur
	}
	return ""
}

func (m *BidResponse) GetCustomdata() string {
	if m != nil {
		return m.Customdata
	}
	return ""
}

func (m *BidResponse) GetNbr() NoBidReason {
	if m != nil {
		return m.Nbr
	}
	return NoBidReason_UNKNOWN_ERROR
}

// OpenRTB 2.0: A bid response can contain multiple SeatBid objects, each on
// behalf of a different bidder seat and each containing one or more
// individual bids. If multiple impressions are presented in the request, the
// group attribute can be used to specify if a seat is willing to accept any
// impressions that it can win (default) or if it is only interested in
// winning any if it can win them all as a group.
type BidResponse_SeatBid struct {
	// Array of 1+ Bid objects (Section 4.2.3) each related to an impression.
	// Multiple bids can relate to the same impression.
	Bid []*BidResponse_SeatBid_Bid `protobuf:"bytes,1,rep,name=bid,proto3" json:"bid,omitempty"`
	// ID of the buyer seat (e.g., advertiser, agency) on whose behalf
	// this bid is made.
	Seat string `protobuf:"bytes,2,opt,name=seat,proto3" json:"seat,omitempty"`
	// 0 = impressions can be won individually; 1 = impressions must be won or
	// lost as a group.
	Group                bool     `protobuf:"varint,3,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BidResponse_SeatBid) Reset()         { *m = BidResponse_SeatBid{} }
func (m *BidResponse_SeatBid) String() string { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid) ProtoMessage()    {}
func (*BidResponse_SeatBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{23, 0}
}
func (m *BidResponse_SeatBid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BidResponse_SeatBid.Unmarshal(m, b)
}
func (m *BidResponse_SeatBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BidResponse_SeatBid.Marshal(b, m, deterministic)
}
func (dst *BidResponse_SeatBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidResponse_SeatBid.Merge(dst, src)
}
func (m *BidResponse_SeatBid) XXX_Size() int {
	return xxx_messageInfo_BidResponse_SeatBid.Size(m)
}
func (m *BidResponse_SeatBid) XXX_DiscardUnknown() {
	xxx_messageInfo_BidResponse_SeatBid.DiscardUnknown(m)
}

var xxx_messageInfo_BidResponse_SeatBid proto.InternalMessageInfo

func (m *BidResponse_SeatBid) GetBid() []*BidResponse_SeatBid_Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

func (m *BidResponse_SeatBid) GetSeat() string {
	if m != nil {
		return m.Seat
	}
	return ""
}

func (m *BidResponse_SeatBid) GetGroup() bool {
	if m != nil {
		return m.Group
	}
	return false
}

// OpenRTB 2.0: A SeatBid object contains one or more Bid objects,
// each of which relates to a specific impression in the bid request
// via the impid attribute and constitutes an offer to buy that impression
// for a given price.
type BidResponse_SeatBid_Bid struct {
	// Bidder generated bid ID to assist with logging/tracking.
	// REQUIRED by the OpenRTB specification.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the Imp object in the related bid request.
	// REQUIRED by the OpenRTB specification.
	Impid string `protobuf:"bytes,2,opt,name=impid,proto3" json:"impid,omitempty"`
	// Bid price expressed as CPM although the actual transaction is for a
	// unit impression only. Note that while the type indicates float, integer
	// math is highly recommended when handling currencies
	// (e.g., BigDecimal in Java).
	// REQUIRED by the OpenRTB specification.
	Price float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	// ID of a preloaded ad to be served if the bid wins.
	Adid string `protobuf:"bytes,4,opt,name=adid,proto3" json:"adid,omitempty"`
	// Win notice URL called by the exchange if the bid wins; optional means
	// of serving ad markup.
	Nurl string `protobuf:"bytes,5,opt,name=nurl,proto3" json:"nurl,omitempty"`
	// Types that are valid to be assigned to AdmOneof:
	//	*BidResponse_SeatBid_Bid_Adm
	//	*BidResponse_SeatBid_Bid_AdmNative
	AdmOneof isBidResponse_SeatBid_Bid_AdmOneof `protobuf_oneof:"adm_oneof"`
	// Advertiser domain for block list checking (e.g., "ford.com"). This can
	// be an array of for the case of rotating creatives. Exchanges can
	// mandate that only one domain is allowed.
	Adomain []string `protobuf:"bytes,7,rep,name=adomain,proto3" json:"adomain,omitempty"`
	// A platform-specific application identifier intended to be
	// unique to the app and independent of the exchange. On Android,
	// this should be a bundle or package name (e.g., com.foo.mygame).
	// On iOS, it is a numeric ID.
	Bundle string `protobuf:"bytes,14,opt,name=bundle,proto3" json:"bundle,omitempty"`
	// URL without cache-busting to an image that is representative of the
	// content of the campaign for ad quality/safety checking.
	Iurl string `protobuf:"bytes,8,opt,name=iurl,proto3" json:"iurl,omitempty"`
	// Campaign ID to assist with ad quality checking; the collection of
	// creatives for which iurl should be representative.
	Cid string `protobuf:"bytes,9,opt,name=cid,proto3" json:"cid,omitempty"`
	// Creative ID to assist with ad quality checking.
	Crid string `protobuf:"bytes,10,opt,name=crid,proto3" json:"crid,omitempty"`
	// IAB content categories of the creative.
	Cat []string `protobuf:"bytes,15,rep,name=cat,proto3" json:"cat,omitempty"`
	// Set of attributes describing the creative.
	Attr []CreativeAttribute `protobuf:"varint,11,rep,packed,name=attr,proto3,enum=openrtb.CreativeAttribute" json:"attr,omitempty"`
	// API required by the markup if applicable.
	Api APIFramework `protobuf:"varint,18,opt,name=api,proto3,enum=openrtb.APIFramework" json:"api,omitempty"`
	// Video response protocol of the markup if applicable.
	Protocol Protocol `protobuf:"varint,19,opt,name=protocol,proto3,enum=openrtb.Protocol" json:"protocol,omitempty"`
	// Creative media rating per QAG guidelines.
	Qagmediarating QAGMediaRating `protobuf:"varint,20,opt,name=qagmediarating,proto3,enum=openrtb.QAGMediaRating" json:"qagmediarating,omitempty"`
	// Reference to the deal.id from the bid request if this bid pertains to a
	// private marketplace direct deal.
	Dealid string `protobuf:"bytes,13,opt,name=dealid,proto3" json:"dealid,omitempty"`
	// Width of the creative in device independent pixels (DIPS).
	W int32 `protobuf:"varint,16,opt,name=w,proto3" json:"w,omitempty"`
	// Height of the creative in device independent pixels (DIPS).
	H int32 `protobuf:"varint,17,opt,name=h,proto3" json:"h,omitempty"`
	// Advisory as to the number of seconds the bidder is willing to
	// wait between the auction and the actual impression.
	Exp int32 `protobuf:"varint,21,opt,name=exp,proto3" json:"exp,omitempty"`
	// Billing notice URL called by the exchange when a winning bid
	// becomes billable based on exchange-specific business policy
	// (e.g., typically delivered, viewed, etc.). Substitution macros
	// (Section 4.4) may be included.
	Burl string `protobuf:"bytes,22,opt,name=burl,proto3" json:"burl,omitempty"`
	// Loss notice URL called by the exchange when a bid is known to
	// have been lost. Substitution macros (Section 4.4) may be
	// included. Exchange-specific policy may preclude support for
	// loss notices or the disclosure of winning clearing prices
	// resulting in ${AUCTION_PRICE} macros being removed (i.e.,
	// replaced with a zero-length string).
	Lurl string `protobuf:"bytes,23,opt,name=lurl,proto3" json:"lurl,omitempty"`
	// Tactic ID to enable buyers to label bids for reporting to the
	// exchange the tactic through which their bid was submitted.
	// The specific usage and meaning of the tactic ID should be
	// communicated between buyer and exchanges a priori.
	Tactic string `protobuf:"bytes,24,opt,name=tactic,proto3" json:"tactic,omitempty"`
	// Language of the creative using ISO-639-1-alpha-2. The nonstandard
	// code "xx" may also be used if the creative has no
	// linguistic content (e.g., a banner with just a company logo).
	Language string `protobuf:"bytes,25,opt,name=language,proto3" json:"language,omitempty"`
	// Relative width of the creative when expressing size as a ratio.
	// Required for Flex Ads.
	Wratio int32 `protobuf:"varint,26,opt,name=wratio,proto3" json:"wratio,omitempty"`
	// Relative height of the creative when expressing size as a ratio.
	// Required for Flex Ads.
	Hratio               int32    `protobuf:"varint,27,opt,name=hratio,proto3" json:"hratio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BidResponse_SeatBid_Bid) Reset()         { *m = BidResponse_SeatBid_Bid{} }
func (m *BidResponse_SeatBid_Bid) String() string { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid_Bid) ProtoMessage()    {}
func (*BidResponse_SeatBid_Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{23, 0, 0}
}
func (m *BidResponse_SeatBid_Bid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BidResponse_SeatBid_Bid.Unmarshal(m, b)
}
func (m *BidResponse_SeatBid_Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BidResponse_SeatBid_Bid.Marshal(b, m, deterministic)
}
func (dst *BidResponse_SeatBid_Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidResponse_SeatBid_Bid.Merge(dst, src)
}
func (m *BidResponse_SeatBid_Bid) XXX_Size() int {
	return xxx_messageInfo_BidResponse_SeatBid_Bid.Size(m)
}
func (m *BidResponse_SeatBid_Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_BidResponse_SeatBid_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_BidResponse_SeatBid_Bid proto.InternalMessageInfo

func (m *BidResponse_SeatBid_Bid) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetImpid() string {
	if m != nil {
		return m.Impid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetAdid() string {
	if m != nil {
		return m.Adid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetNurl() string {
	if m != nil {
		return m.Nurl
	}
	return ""
}

type isBidResponse_SeatBid_Bid_AdmOneof interface {
	isBidResponse_SeatBid_Bid_AdmOneof()
}

type BidResponse_SeatBid_Bid_Adm struct {
	Adm string `protobuf:"bytes,6,opt,name=adm,proto3,oneof"`
}

type BidResponse_SeatBid_Bid_AdmNative struct {
	AdmNative *NativeResponse `protobuf:"bytes,50,opt,name=adm_native,json=admNative,proto3,oneof"`
}

func (*BidResponse_SeatBid_Bid_Adm) isBidResponse_SeatBid_Bid_AdmOneof() {}

func (*BidResponse_SeatBid_Bid_AdmNative) isBidResponse_SeatBid_Bid_AdmOneof() {}

func (m *BidResponse_SeatBid_Bid) GetAdmOneof() isBidResponse_SeatBid_Bid_AdmOneof {
	if m != nil {
		return m.AdmOneof
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetAdm() string {
	if x, ok := m.GetAdmOneof().(*BidResponse_SeatBid_Bid_Adm); ok {
		return x.Adm
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetAdmNative() *NativeResponse {
	if x, ok := m.GetAdmOneof().(*BidResponse_SeatBid_Bid_AdmNative); ok {
		return x.AdmNative
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetAdomain() []string {
	if m != nil {
		return m.Adomain
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetBundle() string {
	if m != nil {
		return m.Bundle
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetIurl() string {
	if m != nil {
		return m.Iurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCrid() string {
	if m != nil {
		return m.Crid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetAttr() []CreativeAttribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetApi() APIFramework {
	if m != nil {
		return m.Api
	}
	return APIFramework_UNKNOWNAPIF
}

func (m *BidResponse_SeatBid_Bid) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_UNKNOWNP
}

func (m *BidResponse_SeatBid_Bid) GetQagmediarating() QAGMediaRating {
	if m != nil {
		return m.Qagmediarating
	}
	return QAGMediaRating_UNKNOWNQAGMR
}

func (m *BidResponse_SeatBid_Bid) GetDealid() string {
	if m != nil {
		return m.Dealid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetBurl() string {
	if m != nil {
		return m.Burl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetLurl() string {
	if m != nil {
		return m.Lurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetTactic() string {
	if m != nil {
		return m.Tactic
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetWratio() int32 {
	if m != nil {
		return m.Wratio
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetHratio() int32 {
	if m != nil {
		return m.Hratio
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BidResponse_SeatBid_Bid) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BidResponse_SeatBid_Bid_OneofMarshaler, _BidResponse_SeatBid_Bid_OneofUnmarshaler, _BidResponse_SeatBid_Bid_OneofSizer, []interface{}{
		(*BidResponse_SeatBid_Bid_Adm)(nil),
		(*BidResponse_SeatBid_Bid_AdmNative)(nil),
	}
}

func _BidResponse_SeatBid_Bid_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BidResponse_SeatBid_Bid)
	// adm_oneof
	switch x := m.AdmOneof.(type) {
	case *BidResponse_SeatBid_Bid_Adm:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Adm)
	case *BidResponse_SeatBid_Bid_AdmNative:
		b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdmNative); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BidResponse_SeatBid_Bid.AdmOneof has unexpected type %T", x)
	}
	return nil
}

func _BidResponse_SeatBid_Bid_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BidResponse_SeatBid_Bid)
	switch tag {
	case 6: // adm_oneof.adm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.AdmOneof = &BidResponse_SeatBid_Bid_Adm{x}
		return true, err
	case 50: // adm_oneof.adm_native
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse)
		err := b.DecodeMessage(msg)
		m.AdmOneof = &BidResponse_SeatBid_Bid_AdmNative{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BidResponse_SeatBid_Bid_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BidResponse_SeatBid_Bid)
	// adm_oneof
	switch x := m.AdmOneof.(type) {
	case *BidResponse_SeatBid_Bid_Adm:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Adm)))
		n += len(x.Adm)
	case *BidResponse_SeatBid_Bid_AdmNative:
		s := proto.Size(x.AdmNative)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OpenRTB Native 1.0: The native response object is the top level JSON object
// which identifies an native response.
// Note: Prior to VERSION 1.1, the native response's root node was an object
// with a single field "native" that would contain the object above as its
// value.
// In 1.2 The NativeResponse Object specified here is now the root object.
type NativeResponse struct {
	// Version of the Native Markup version in use.
	// RECOMMENDED in 1.2
	Ver string `protobuf:"bytes,1,opt,name=ver,proto3" json:"ver,omitempty"`
	// List of native ad's assets.
	// RECOMMENDED in 1.0, 1.1, or in 1.2 as a fallback if assetsurl is provided.
	// REQUIRED in 1.2, if not assetsurl is provided.
	Assets []*NativeResponse_Asset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	// URL of alternate source for the assets object. The expected response is a
	// JSON object mirroring the asset object in the bid response, subject to
	// certain requirements as specified in the individual objects.
	// Where present, overrides the assets object in the response.
	// Implemented in 1.2
	Assetsurl string `protobuf:"bytes,6,opt,name=assetsurl,proto3" json:"assetsurl,omitempty"`
	// URL where a dynamic creative specification may be found for populating this
	// ad, per the Dynamic Content Ads Specification.
	// Note this is a beta option as the interpretation of the Dynamic Content Ads
	// Specification and how to assign those elementes into a native ad is outside
	// the scope of this spec and must be agreed offline between parties or as may
	// be specified in a future revision of the Dynamic Content Ads spec.
	// Where present, overrides the assets object in the response.
	// Implemented in 1.2
	Dcourl string `protobuf:"bytes,7,opt,name=dcourl,proto3" json:"dcourl,omitempty"`
	// Destination Link. This is default link object for the ad.
	// Individual assets can also have a link object which applies if the asset is
	// activated (clicked). If the asset doesn't have a link object, the parent
	// link object applies.
	// See ResponseLink definition.
	// REQUIRED by the OpenRTB Native specification.
	Link *NativeResponse_Link `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	// Array of impression tracking URLs, expected to return a 1x1 image or
	// 204 response - typically only passed when using 3rd party trackers.
	// To be deprecated in 1.2 - Replaced with EventTracker.
	Imptrackers []string `protobuf:"bytes,4,rep,name=imptrackers,proto3" json:"imptrackers,omitempty"`
	// Optional javascript impression tracker. Contains <script> tags to be
	// executed at impression time where it can be supported.
	// To be deprecated in 1.2 - Replaced with EventTracker.
	Jstracker string `protobuf:"bytes,5,opt,name=jstracker,proto3" json:"jstracker,omitempty"`
	// Array of response event trackers to run with the ad, in response to the
	// declared supported methods in the NativeRequest. Replaces imptrackers and
	// jstrackers.
	// Implemented in 1.2
	Eventtrackers []*NativeResponse_EventTracker `protobuf:"bytes,8,rep,name=eventtrackers,proto3" json:"eventtrackers,omitempty"`
	// If support was indicated in the request, URL of a page informing the user
	// about the buyer's targeting activity.
	// Implemented in 1.2
	Privacy              string   `protobuf:"bytes,9,opt,name=privacy,proto3" json:"privacy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeResponse) Reset()         { *m = NativeResponse{} }
func (m *NativeResponse) String() string { return proto.CompactTextString(m) }
func (*NativeResponse) ProtoMessage()    {}
func (*NativeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{24}
}
func (m *NativeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeResponse.Unmarshal(m, b)
}
func (m *NativeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeResponse.Marshal(b, m, deterministic)
}
func (dst *NativeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeResponse.Merge(dst, src)
}
func (m *NativeResponse) XXX_Size() int {
	return xxx_messageInfo_NativeResponse.Size(m)
}
func (m *NativeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NativeResponse proto.InternalMessageInfo

func (m *NativeResponse) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *NativeResponse) GetAssets() []*NativeResponse_Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *NativeResponse) GetAssetsurl() string {
	if m != nil {
		return m.Assetsurl
	}
	return ""
}

func (m *NativeResponse) GetDcourl() string {
	if m != nil {
		return m.Dcourl
	}
	return ""
}

func (m *NativeResponse) GetLink() *NativeResponse_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *NativeResponse) GetImptrackers() []string {
	if m != nil {
		return m.Imptrackers
	}
	return nil
}

func (m *NativeResponse) GetJstracker() string {
	if m != nil {
		return m.Jstracker
	}
	return ""
}

func (m *NativeResponse) GetEventtrackers() []*NativeResponse_EventTracker {
	if m != nil {
		return m.Eventtrackers
	}
	return nil
}

func (m *NativeResponse) GetPrivacy() string {
	if m != nil {
		return m.Privacy
	}
	return ""
}

// OpenRTB Native 1.0: Used for "call to action" assets, or other links from
// the Native ad. This Object should be associated to its peer object in the
// parent Asset Object or as the master link in the top level NativeResponse
// object. When that peer object is activated (clicked) the action should take
// the user to the location of the link.
type NativeResponse_Link struct {
	// Landing URL of the clickable link.
	// REQUIRED by the OpenRTB Native specification.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// List of third-party tracker URLs to be fired on click of the URL.
	Clicktrackers []string `protobuf:"bytes,2,rep,name=clicktrackers,proto3" json:"clicktrackers,omitempty"`
	// Fallback URL for deeplink. To be used if the URL given in url is not
	// supported by the device.
	Fallback             string   `protobuf:"bytes,3,opt,name=fallback,proto3" json:"fallback,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeResponse_Link) Reset()         { *m = NativeResponse_Link{} }
func (m *NativeResponse_Link) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Link) ProtoMessage()    {}
func (*NativeResponse_Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{24, 0}
}
func (m *NativeResponse_Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeResponse_Link.Unmarshal(m, b)
}
func (m *NativeResponse_Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeResponse_Link.Marshal(b, m, deterministic)
}
func (dst *NativeResponse_Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeResponse_Link.Merge(dst, src)
}
func (m *NativeResponse_Link) XXX_Size() int {
	return xxx_messageInfo_NativeResponse_Link.Size(m)
}
func (m *NativeResponse_Link) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeResponse_Link.DiscardUnknown(m)
}

var xxx_messageInfo_NativeResponse_Link proto.InternalMessageInfo

func (m *NativeResponse_Link) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NativeResponse_Link) GetClicktrackers() []string {
	if m != nil {
		return m.Clicktrackers
	}
	return nil
}

func (m *NativeResponse_Link) GetFallback() string {
	if m != nil {
		return m.Fallback
	}
	return ""
}

// OpenRTB Native 1.0: Corresponds to the Asset Object in the request.
// The main container object for each asset requested or supported by Exchange
// on behalf of the rendering client. Any object that is required is to be
// flagged as such. Only one of the {title,img,video,data} objects should be
// present in each object. All others should be null/absent. The id is to be
// unique within the Asset array so that the response can be aligned.
type NativeResponse_Asset struct {
	// Unique asset ID, assigned by exchange, must match one of the asset IDs
	// in request.
	// REQUIRED in 1.0, or in 1.2 if embedded asset is being used.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Set to 1 if asset is required. (bidder requires it to be displayed).
	Required bool `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	// RECOMMENDED by the OpenRTB Native specification.
	//
	// Types that are valid to be assigned to AssetOneof:
	//	*NativeResponse_Asset_Title_
	//	*NativeResponse_Asset_Img
	//	*NativeResponse_Asset_Video_
	//	*NativeResponse_Asset_Data_
	AssetOneof isNativeResponse_Asset_AssetOneof `protobuf_oneof:"asset_oneof"`
	// Link object for call to actions.
	// This link object applies if the asset item is activated (clicked).
	// If there is no link object on the asset, the parent link object on the
	// bid response apply.
	Link                 *NativeResponse_Link `protobuf:"bytes,7,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NativeResponse_Asset) Reset()         { *m = NativeResponse_Asset{} }
func (m *NativeResponse_Asset) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset) ProtoMessage()    {}
func (*NativeResponse_Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{24, 1}
}
func (m *NativeResponse_Asset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeResponse_Asset.Unmarshal(m, b)
}
func (m *NativeResponse_Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeResponse_Asset.Marshal(b, m, deterministic)
}
func (dst *NativeResponse_Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeResponse_Asset.Merge(dst, src)
}
func (m *NativeResponse_Asset) XXX_Size() int {
	return xxx_messageInfo_NativeResponse_Asset.Size(m)
}
func (m *NativeResponse_Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeResponse_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_NativeResponse_Asset proto.InternalMessageInfo

func (m *NativeResponse_Asset) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NativeResponse_Asset) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

type isNativeResponse_Asset_AssetOneof interface {
	isNativeResponse_Asset_AssetOneof()
}

type NativeResponse_Asset_Title_ struct {
	Title *NativeResponse_Asset_Title `protobuf:"bytes,3,opt,name=title,proto3,oneof"`
}

type NativeResponse_Asset_Img struct {
	Img *NativeResponse_Asset_Image `protobuf:"bytes,4,opt,name=img,proto3,oneof"`
}

type NativeResponse_Asset_Video_ struct {
	Video *NativeResponse_Asset_Video `protobuf:"bytes,5,opt,name=video,proto3,oneof"`
}

type NativeResponse_Asset_Data_ struct {
	Data *NativeResponse_Asset_Data `protobuf:"bytes,6,opt,name=data,proto3,oneof"`
}

func (*NativeResponse_Asset_Title_) isNativeResponse_Asset_AssetOneof() {}

func (*NativeResponse_Asset_Img) isNativeResponse_Asset_AssetOneof() {}

func (*NativeResponse_Asset_Video_) isNativeResponse_Asset_AssetOneof() {}

func (*NativeResponse_Asset_Data_) isNativeResponse_Asset_AssetOneof() {}

func (m *NativeResponse_Asset) GetAssetOneof() isNativeResponse_Asset_AssetOneof {
	if m != nil {
		return m.AssetOneof
	}
	return nil
}

func (m *NativeResponse_Asset) GetTitle() *NativeResponse_Asset_Title {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Title_); ok {
		return x.Title
	}
	return nil
}

func (m *NativeResponse_Asset) GetImg() *NativeResponse_Asset_Image {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Img); ok {
		return x.Img
	}
	return nil
}

func (m *NativeResponse_Asset) GetVideo() *NativeResponse_Asset_Video {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Video_); ok {
		return x.Video
	}
	return nil
}

func (m *NativeResponse_Asset) GetData() *NativeResponse_Asset_Data {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Data_); ok {
		return x.Data
	}
	return nil
}

func (m *NativeResponse_Asset) GetLink() *NativeResponse_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NativeResponse_Asset) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NativeResponse_Asset_OneofMarshaler, _NativeResponse_Asset_OneofUnmarshaler, _NativeResponse_Asset_OneofSizer, []interface{}{
		(*NativeResponse_Asset_Title_)(nil),
		(*NativeResponse_Asset_Img)(nil),
		(*NativeResponse_Asset_Video_)(nil),
		(*NativeResponse_Asset_Data_)(nil),
	}
}

func _NativeResponse_Asset_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NativeResponse_Asset)
	// asset_oneof
	switch x := m.AssetOneof.(type) {
	case *NativeResponse_Asset_Title_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Title); err != nil {
			return err
		}
	case *NativeResponse_Asset_Img:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Img); err != nil {
			return err
		}
	case *NativeResponse_Asset_Video_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case *NativeResponse_Asset_Data_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NativeResponse_Asset.AssetOneof has unexpected type %T", x)
	}
	return nil
}

func _NativeResponse_Asset_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NativeResponse_Asset)
	switch tag {
	case 3: // asset_oneof.title
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Title)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Title_{msg}
		return true, err
	case 4: // asset_oneof.img
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Image)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Img{msg}
		return true, err
	case 5: // asset_oneof.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Video)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Video_{msg}
		return true, err
	case 6: // asset_oneof.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Data)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NativeResponse_Asset_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NativeResponse_Asset)
	// asset_oneof
	switch x := m.AssetOneof.(type) {
	case *NativeResponse_Asset_Title_:
		s := proto.Size(x.Title)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeResponse_Asset_Img:
		s := proto.Size(x.Img)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeResponse_Asset_Video_:
		s := proto.Size(x.Video)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeResponse_Asset_Data_:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OpenRTB Native 1.0: Corresponds to the Title Object in the request,
// with the value filled in.
// If using assetsurl or dcourl response rather than embedded asset
// response, it is recommended that three title objects be provided, the
// length of each is less than or equal to the three recommended maximum
// title lengths (25,90,140).
type NativeResponse_Asset_Title struct {
	// The text associated with the text element.
	// REQUIRED by the OpenRTB Native specification.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The length of the title being provided.
	// REQUIRED if using assetsurl/dcourl representation.
	// Implemented in 1.2
	Len                  int32    `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeResponse_Asset_Title) Reset()         { *m = NativeResponse_Asset_Title{} }
func (m *NativeResponse_Asset_Title) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Title) ProtoMessage()    {}
func (*NativeResponse_Asset_Title) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{24, 1, 0}
}
func (m *NativeResponse_Asset_Title) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeResponse_Asset_Title.Unmarshal(m, b)
}
func (m *NativeResponse_Asset_Title) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeResponse_Asset_Title.Marshal(b, m, deterministic)
}
func (dst *NativeResponse_Asset_Title) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeResponse_Asset_Title.Merge(dst, src)
}
func (m *NativeResponse_Asset_Title) XXX_Size() int {
	return xxx_messageInfo_NativeResponse_Asset_Title.Size(m)
}
func (m *NativeResponse_Asset_Title) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeResponse_Asset_Title.DiscardUnknown(m)
}

var xxx_messageInfo_NativeResponse_Asset_Title proto.InternalMessageInfo

func (m *NativeResponse_Asset_Title) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *NativeResponse_Asset_Title) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

// OpenRTB Native 1.0: Corresponds to the Image Object in the request.
// The Image object to be used for all image elements of the Native ad
// such as Icons, Main Image, etc.
// It is recommended that if assetsurl/dcourl is being used rather than
// embbedded assets, that an image of each recommended aspect ratio
// (per ImageType enum) be provided for image type 3 (MAIN_IMAGE).
type NativeResponse_Asset_Image struct {
	// The type of image element being submitted from the ImageType enum.
	// REQUIRED for assetsurl or dcourl responses,
	// not required to embedded asset responses.
	// Implemented in 1.2
	Type ImageAssetType `protobuf:"varint,4,opt,name=type,proto3,enum=openrtb.ImageAssetType" json:"type,omitempty"`
	// URL of the image asset.
	// REQUIRED by the OpenRTB Native specification.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Width of the image in pixels.
	// RECOMMENDED in 1.0, 1.1, or in 1.2 for embedded asset responses.
	// REQUIRED in 1.2 for assetsurl or dcourl if multiple assets
	// of the same type submitted.
	W int32 `protobuf:"varint,2,opt,name=w,proto3" json:"w,omitempty"`
	// Height of the image in pixels.
	// RECOMMENDED in 1.0, 1.1, or in 1.2 for embedded asset responses.
	// REQUIRED in 1.2 for assetsurl or dcourl if multiple assets
	// of the same type submitted.
	H                    int32    `protobuf:"varint,3,opt,name=h,proto3" json:"h,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeResponse_Asset_Image) Reset()         { *m = NativeResponse_Asset_Image{} }
func (m *NativeResponse_Asset_Image) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Image) ProtoMessage()    {}
func (*NativeResponse_Asset_Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{24, 1, 1}
}
func (m *NativeResponse_Asset_Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeResponse_Asset_Image.Unmarshal(m, b)
}
func (m *NativeResponse_Asset_Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeResponse_Asset_Image.Marshal(b, m, deterministic)
}
func (dst *NativeResponse_Asset_Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeResponse_Asset_Image.Merge(dst, src)
}
func (m *NativeResponse_Asset_Image) XXX_Size() int {
	return xxx_messageInfo_NativeResponse_Asset_Image.Size(m)
}
func (m *NativeResponse_Asset_Image) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeResponse_Asset_Image.DiscardUnknown(m)
}

var xxx_messageInfo_NativeResponse_Asset_Image proto.InternalMessageInfo

func (m *NativeResponse_Asset_Image) GetType() ImageAssetType {
	if m != nil {
		return m.Type
	}
	return ImageAssetType_UNKNOWNIAT
}

func (m *NativeResponse_Asset_Image) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NativeResponse_Asset_Image) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *NativeResponse_Asset_Image) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

// OpenRTB Native 1.0: Corresponds to the Data Object in the request, with
// the value filled in. The Data Object is to be used for all miscellaneous
// elements of the native unit such as Brand Name, Ratings, Review Count,
// Stars, Downloads, etc. It is also generic for future of native elements
// not contemplated at the time of the writing of this document.
type NativeResponse_Asset_Data struct {
	// The type of data element being submitted from the DataAssetTypes enum.
	// REQUIRED in 1.2 for assetsurl or dcourl responses.
	// Implemented in 1.2.
	Type DataAssetType `protobuf:"varint,3,opt,name=type,proto3,enum=openrtb.DataAssetType" json:"type,omitempty"`
	// The length of the data element being submitted. Where applicable, must
	// comply with the recommended maximum lengths in the DataAssetType enum.
	// REQUIRED in 1.2 for assetsurl or dcourl responses.
	// Implemented in 1.2.
	Len int32 `protobuf:"varint,4,opt,name=len,proto3" json:"len,omitempty"`
	// The optional formatted string name of the data type to be displayed.
	// DEPRECATED in 1.2.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// The formatted string of data to be displayed. Can contain a formatted
	// value such as "5 stars" or "$10" or "3.4 stars out of 5".
	// REQUIRED by the OpenRTB Native specification.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeResponse_Asset_Data) Reset()         { *m = NativeResponse_Asset_Data{} }
func (m *NativeResponse_Asset_Data) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Data) ProtoMessage()    {}
func (*NativeResponse_Asset_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{24, 1, 2}
}
func (m *NativeResponse_Asset_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeResponse_Asset_Data.Unmarshal(m, b)
}
func (m *NativeResponse_Asset_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeResponse_Asset_Data.Marshal(b, m, deterministic)
}
func (dst *NativeResponse_Asset_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeResponse_Asset_Data.Merge(dst, src)
}
func (m *NativeResponse_Asset_Data) XXX_Size() int {
	return xxx_messageInfo_NativeResponse_Asset_Data.Size(m)
}
func (m *NativeResponse_Asset_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeResponse_Asset_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NativeResponse_Asset_Data proto.InternalMessageInfo

func (m *NativeResponse_Asset_Data) GetType() DataAssetType {
	if m != nil {
		return m.Type
	}
	return DataAssetType_UNKNOWNDAT
}

func (m *NativeResponse_Asset_Data) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *NativeResponse_Asset_Data) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *NativeResponse_Asset_Data) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// OpenRTB Native 1.0: Corresponds to the Video Object in the request,
// yet containing a value of a conforming VAST tag as a value.
type NativeResponse_Asset_Video struct {
	// VAST xml.
	// REQUIRED by the OpenRTB Native specification.
	Vasttag              string   `protobuf:"bytes,1,opt,name=vasttag,proto3" json:"vasttag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeResponse_Asset_Video) Reset()         { *m = NativeResponse_Asset_Video{} }
func (m *NativeResponse_Asset_Video) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Video) ProtoMessage()    {}
func (*NativeResponse_Asset_Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{24, 1, 3}
}
func (m *NativeResponse_Asset_Video) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeResponse_Asset_Video.Unmarshal(m, b)
}
func (m *NativeResponse_Asset_Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeResponse_Asset_Video.Marshal(b, m, deterministic)
}
func (dst *NativeResponse_Asset_Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeResponse_Asset_Video.Merge(dst, src)
}
func (m *NativeResponse_Asset_Video) XXX_Size() int {
	return xxx_messageInfo_NativeResponse_Asset_Video.Size(m)
}
func (m *NativeResponse_Asset_Video) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeResponse_Asset_Video.DiscardUnknown(m)
}

var xxx_messageInfo_NativeResponse_Asset_Video proto.InternalMessageInfo

func (m *NativeResponse_Asset_Video) GetVasttag() string {
	if m != nil {
		return m.Vasttag
	}
	return ""
}

// OpenRTB Native 1.2: The event trackers response is an array of objects and
// specifies the types of events the bidder wishes to track and the
// URLs/information to track them. Bidder must only respond with methods
// indicated as available in the request. Note that most javascript trackers
// expect to be loaded at impression time, so it’s not generally recommended
// for the buyer to respond with javascript trackers on other events, but the
// appropriateness of this is up to each buyer.
type NativeResponse_EventTracker struct {
	// Type of event to track.
	// REQUIRED if embedded asset is being used.
	Event EventType `protobuf:"varint,1,opt,name=event,proto3,enum=openrtb.EventType" json:"event,omitempty"`
	// Type of tracking requested.
	// REQUIRED if embedded asset is being used.
	Method EventTrackingMethod `protobuf:"varint,2,opt,name=method,proto3,enum=openrtb.EventTrackingMethod" json:"method,omitempty"`
	// The URL of the image or js.
	// REQUIRED for image or js, optional for custom.
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeResponse_EventTracker) Reset()         { *m = NativeResponse_EventTracker{} }
func (m *NativeResponse_EventTracker) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_EventTracker) ProtoMessage()    {}
func (*NativeResponse_EventTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_ortb_6bd29e6daaa062e4, []int{24, 2}
}
func (m *NativeResponse_EventTracker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NativeResponse_EventTracker.Unmarshal(m, b)
}
func (m *NativeResponse_EventTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NativeResponse_EventTracker.Marshal(b, m, deterministic)
}
func (dst *NativeResponse_EventTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeResponse_EventTracker.Merge(dst, src)
}
func (m *NativeResponse_EventTracker) XXX_Size() int {
	return xxx_messageInfo_NativeResponse_EventTracker.Size(m)
}
func (m *NativeResponse_EventTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeResponse_EventTracker.DiscardUnknown(m)
}

var xxx_messageInfo_NativeResponse_EventTracker proto.InternalMessageInfo

func (m *NativeResponse_EventTracker) GetEvent() EventType {
	if m != nil {
		return m.Event
	}
	return EventType_UNKNOWNET
}

func (m *NativeResponse_EventTracker) GetMethod() EventTrackingMethod {
	if m != nil {
		return m.Method
	}
	return EventTrackingMethod_UNKNOWNETM
}

func (m *NativeResponse_EventTracker) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*BidRequest)(nil), "openrtb.BidRequest")
	proto.RegisterType((*Ext)(nil), "openrtb.Ext")
	proto.RegisterType((*Regs)(nil), "openrtb.Regs")
	proto.RegisterType((*Source)(nil), "openrtb.Source")
	proto.RegisterType((*Site)(nil), "openrtb.Site")
	proto.RegisterType((*Publisher)(nil), "openrtb.Publisher")
	proto.RegisterType((*Content)(nil), "openrtb.Content")
	proto.RegisterType((*App)(nil), "openrtb.App")
	proto.RegisterType((*Device)(nil), "openrtb.Device")
	proto.RegisterType((*Geo)(nil), "openrtb.Geo")
	proto.RegisterType((*User)(nil), "openrtb.User")
	proto.RegisterType((*UserData)(nil), "openrtb.UserData")
	proto.RegisterType((*UserData_Segment)(nil), "openrtb.UserData.Segment")
	proto.RegisterType((*Imp)(nil), "openrtb.Imp")
	proto.RegisterType((*CompanionAd)(nil), "openrtb.CompanionAd")
	proto.RegisterType((*Video)(nil), "openrtb.Video")
	proto.RegisterType((*Banner)(nil), "openrtb.Banner")
	proto.RegisterType((*Format)(nil), "openrtb.Format")
	proto.RegisterType((*Audio)(nil), "openrtb.Audio")
	proto.RegisterType((*Native)(nil), "openrtb.Native")
	proto.RegisterType((*NativeRequest)(nil), "openrtb.NativeRequest")
	proto.RegisterType((*NativeRequest_Asset)(nil), "openrtb.NativeRequest.Asset")
	proto.RegisterType((*NativeRequest_Asset_Title)(nil), "openrtb.NativeRequest.Asset.Title")
	proto.RegisterType((*NativeRequest_Asset_Image)(nil), "openrtb.NativeRequest.Asset.Image")
	proto.RegisterType((*NativeRequest_Asset_Data)(nil), "openrtb.NativeRequest.Asset.Data")
	proto.RegisterType((*NativeRequest_EventTrackers)(nil), "openrtb.NativeRequest.EventTrackers")
	proto.RegisterType((*Pmp)(nil), "openrtb.Pmp")
	proto.RegisterType((*Metric)(nil), "openrtb.Metric")
	proto.RegisterType((*Deal)(nil), "openrtb.Deal")
	proto.RegisterType((*BidResponse)(nil), "openrtb.BidResponse")
	proto.RegisterType((*BidResponse_SeatBid)(nil), "openrtb.BidResponse.SeatBid")
	proto.RegisterType((*BidResponse_SeatBid_Bid)(nil), "openrtb.BidResponse.SeatBid.Bid")
	proto.RegisterType((*NativeResponse)(nil), "openrtb.NativeResponse")
	proto.RegisterType((*NativeResponse_Link)(nil), "openrtb.NativeResponse.Link")
	proto.RegisterType((*NativeResponse_Asset)(nil), "openrtb.NativeResponse.Asset")
	proto.RegisterType((*NativeResponse_Asset_Title)(nil), "openrtb.NativeResponse.Asset.Title")
	proto.RegisterType((*NativeResponse_Asset_Image)(nil), "openrtb.NativeResponse.Asset.Image")
	proto.RegisterType((*NativeResponse_Asset_Data)(nil), "openrtb.NativeResponse.Asset.Data")
	proto.RegisterType((*NativeResponse_Asset_Video)(nil), "openrtb.NativeResponse.Asset.Video")
	proto.RegisterType((*NativeResponse_EventTracker)(nil), "openrtb.NativeResponse.EventTracker")
	proto.RegisterEnum("openrtb.Capping", Capping_name, Capping_value)
	proto.RegisterEnum("openrtb.Mode", Mode_name, Mode_value)
	proto.RegisterEnum("openrtb.IPLocation", IPLocation_name, IPLocation_value)
	proto.RegisterEnum("openrtb.GeoType", GeoType_name, GeoType_value)
	proto.RegisterEnum("openrtb.ConnectionType", ConnectionType_name, ConnectionType_value)
	proto.RegisterEnum("openrtb.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("openrtb.Protocol", Protocol_name, Protocol_value)
	proto.RegisterEnum("openrtb.PlaybackCessationMode", PlaybackCessationMode_name, PlaybackCessationMode_value)
	proto.RegisterEnum("openrtb.VideoPlacementType", VideoPlacementType_name, VideoPlacementType_value)
	proto.RegisterEnum("openrtb.CompanionType", CompanionType_name, CompanionType_value)
	proto.RegisterEnum("openrtb.APIFramework", APIFramework_name, APIFramework_value)
	proto.RegisterEnum("openrtb.AdPosition", AdPosition_name, AdPosition_value)
	proto.RegisterEnum("openrtb.ContentDeliveryMethod", ContentDeliveryMethod_name, ContentDeliveryMethod_value)
	proto.RegisterEnum("openrtb.CreativeAttribute", CreativeAttribute_name, CreativeAttribute_value)
	proto.RegisterEnum("openrtb.PlaybackMethod", PlaybackMethod_name, PlaybackMethod_value)
	proto.RegisterEnum("openrtb.VideoLinearity", VideoLinearity_name, VideoLinearity_value)
	proto.RegisterEnum("openrtb.ExpandableDirection", ExpandableDirection_name, ExpandableDirection_value)
	proto.RegisterEnum("openrtb.BannerAdType", BannerAdType_name, BannerAdType_value)
	proto.RegisterEnum("openrtb.VolumeNormalizationMode", VolumeNormalizationMode_name, VolumeNormalizationMode_value)
	proto.RegisterEnum("openrtb.FeedType", FeedType_name, FeedType_value)
	proto.RegisterEnum("openrtb.PlacementType", PlacementType_name, PlacementType_value)
	proto.RegisterEnum("openrtb.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("openrtb.EventTrackingMethod", EventTrackingMethod_name, EventTrackingMethod_value)
	proto.RegisterEnum("openrtb.AuctionType", AuctionType_name, AuctionType_value)
	proto.RegisterEnum("openrtb.ContentCategory", ContentCategory_name, ContentCategory_value)
	proto.RegisterEnum("openrtb.NoBidReason", NoBidReason_name, NoBidReason_value)
	proto.RegisterEnum("openrtb.QAGMediaRating", QAGMediaRating_name, QAGMediaRating_value)
	proto.RegisterEnum("openrtb.DataAssetType", DataAssetType_name, DataAssetType_value)
	proto.RegisterEnum("openrtb.ImageAssetType", ImageAssetType_name, ImageAssetType_value)
	proto.RegisterEnum("openrtb.NativeRequest_ImageAssetType", NativeRequest_ImageAssetType_name, NativeRequest_ImageAssetType_value)
	proto.RegisterEnum("openrtb.NativeRequest_ContextSubtype", NativeRequest_ContextSubtype_name, NativeRequest_ContextSubtype_value)
	proto.RegisterEnum("openrtb.NativeRequest_ContextType", NativeRequest_ContextType_name, NativeRequest_ContextType_value)
}

func init() { proto.RegisterFile("ortb.proto", fileDescriptor_ortb_6bd29e6daaa062e4) }

var fileDescriptor_ortb_6bd29e6daaa062e4 = []byte{
	// 7578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x9a, 0x77, 0x98, 0x23, 0xcb,
	0x55, 0xe8, 0x57, 0x69, 0x24, 0xd5, 0x84, 0x3d, 0xdb, 0x1b, 0xae, 0xee, 0xdc, 0xc0, 0x7a, 0x7c,
	0xed, 0xbb, 0x8c, 0xed, 0x8b, 0xd4, 0x8a, 0xe3, 0xeb, 0x07, 0xf4, 0x48, 0x3d, 0x33, 0xba, 0xab,
	0xe4, 0x96, 0x34, 0xbb, 0xcb, 0x7b, 0x3c, 0xbd, 0x1e, 0xa9, 0x67, 0xb6, 0xbd, 0x4a, 0x57, 0xd2,
	0x6c, 0xf0, 0x4b, 0xce, 0x01, 0x30, 0xc9, 0x18, 0x13, 0x0c, 0x36, 0x60, 0xc0, 0x60, 0x63, 0x72,
	0xb2, 0xc9, 0xd9, 0xd8, 0x18, 0x30, 0xd8, 0x80, 0xc1, 0x06, 0x63, 0x92, 0xc9, 0x39, 0x87, 0xf7,
	0x9d, 0xaa, 0xea, 0xea, 0xa3, 0x99, 0x4d, 0xf6, 0xfb, 0xde, 0xf7, 0xfe, 0xd2, 0xf9, 0x9d, 0x0a,
	0x5d, 0xe1, 0xd4, 0xa9, 0x53, 0x55, 0x62, 0x6c, 0x34, 0x99, 0xed, 0x3d, 0x31, 0x9e, 0x8c, 0x66,
	0x23, 0x2d, 0x3a, 0x1a, 0x3b, 0xc3, 0xc9, 0x6c, 0x6f, 0xed, 0x13, 0x61, 0xc6, 0x36, 0xdd, 0x9e,
	0xe5, 0x3c, 0x7d, 0xe8, 0x4c, 0x67, 0xda, 0x0a, 0x0b, 0xba, 0xbd, 0x44, 0xe0, 0x7c, 0xe0, 0x42,
	0xdc, 0x0a, 0xba, 0x3d, 0xed, 0x51, 0x16, 0x72, 0x07, 0xe3, 0x44, 0xf0, 0x7c, 0xe8, 0xc2, 0xa2,
	0xbe, 0xf4, 0x84, 0x2c, 0xf5, 0x44, 0x79, 0x30, 0xb6, 0x30, 0x41, 0x7b, 0x26, 0x0b, 0x4f, 0xdd,
	0x99, 0x93, 0x08, 0x9d, 0x0f, 0x5c, 0x58, 0xd4, 0x97, 0x55, 0x86, 0xa6, 0x3b, 0x73, 0x76, 0x4e,
	0x58, 0x3c, 0x51, 0x3b, 0xcf, 0x42, 0xf6, 0x78, 0x9c, 0x08, 0xf3, 0x3c, 0x7e, 0x25, 0xc6, 0x78,
	0xbc, 0x73, 0xc2, 0xc2, 0x24, 0xed, 0x71, 0xb6, 0xd0, 0x73, 0xae, 0xbb, 0x5d, 0x27, 0x11, 0xe1,
	0x99, 0x4e, 0xaa, 0x4c, 0x25, 0xae, 0xb6, 0x64, 0xb2, 0xf6, 0x0c, 0x16, 0x3e, 0x9c, 0x3a, 0x93,
	0xc4, 0xc2, 0x91, 0xef, 0xb5, 0xa7, 0xce, 0xc4, 0xe2, 0x49, 0x98, 0x65, 0xe6, 0x4c, 0x67, 0x89,
	0xe8, 0xf9, 0xc0, 0x85, 0x15, 0x92, 0xa5, 0x3a, 0xea, 0x39, 0x16, 0x4f, 0xd2, 0x34, 0x16, 0x9e,
	0x0d, 0xec, 0x9b, 0x89, 0xd8, 0xf9, 0xc0, 0x85, 0x88, 0xc5, 0x65, 0xed, 0x0c, 0x8b, 0xdc, 0x98,
	0x3a, 0xf6, 0x2c, 0x11, 0x3f, 0x1f, 0xba, 0x10, 0xb7, 0x04, 0xa0, 0x76, 0x8f, 0x6b, 0x99, 0xd0,
	0x72, 0xd0, 0x12, 0x2c, 0x6a, 0xf7, 0xfb, 0xee, 0x60, 0x3c, 0x4d, 0x2c, 0x9e, 0x0f, 0x5c, 0x88,
	0x59, 0x1e, 0x6a, 0xc0, 0x42, 0xdd, 0xc3, 0x49, 0x62, 0x89, 0xe7, 0x46, 0x91, 0xd7, 0xdb, 0xb7,
	0x87, 0x07, 0x89, 0x65, 0x59, 0x2f, 0x82, 0xf6, 0x5c, 0x16, 0xde, 0xeb, 0xda, 0xb3, 0xc4, 0xca,
	0xf9, 0xd0, 0x85, 0x15, 0x3d, 0xa1, 0x1a, 0x59, 0x1c, 0x0d, 0x67, 0xce, 0x70, 0x56, 0xb4, 0x67,
	0xce, 0xc1, 0x68, 0x72, 0xcb, 0xe2, 0xb9, 0xb0, 0xbd, 0x7b, 0x76, 0xef, 0x7a, 0xe2, 0x24, 0xaf,
	0x82, 0xcb, 0x42, 0x37, 0x1e, 0x27, 0xc0, 0xd3, 0x89, 0x61, 0x9c, 0x8e, 0x0e, 0x27, 0x5d, 0x27,
	0x71, 0xea, 0xc8, 0x30, 0x36, 0xb9, 0xda, 0x92, 0xc9, 0x38, 0x46, 0x13, 0xe7, 0x60, 0x9a, 0xd0,
	0x8e, 0x0c, 0xa3, 0xe5, 0x1c, 0x4c, 0x2d, 0x9e, 0x84, 0x33, 0xef, 0xdc, 0x9c, 0x25, 0x4e, 0x1f,
	0x99, 0x34, 0xf3, 0xe6, 0xcc, 0xc2, 0x04, 0xec, 0x57, 0x6b, 0x74, 0xcd, 0x19, 0x26, 0xce, 0x70,
	0x63, 0x11, 0xb0, 0xf9, 0x10, 0x7b, 0xb0, 0xe7, 0x4e, 0x67, 0x13, 0x77, 0xef, 0x70, 0xe6, 0x8e,
	0x86, 0xdd, 0xab, 0xf6, 0x70, 0xe8, 0xf4, 0x3b, 0xa3, 0xa1, 0x33, 0xda, 0x5f, 0x7b, 0x57, 0x80,
	0x85, 0xcc, 0x9b, 0x33, 0xed, 0x11, 0xc6, 0xf6, 0xed, 0x59, 0x67, 0xdf, 0x1d, 0x1e, 0x38, 0x13,
	0x6e, 0x6c, 0x31, 0x2b, 0xbe, 0x6f, 0xcf, 0xb6, 0xb8, 0x02, 0x47, 0x77, 0x3c, 0x71, 0xae, 0x3b,
	0xc3, 0x59, 0x22, 0x28, 0x46, 0x57, 0xa2, 0xf6, 0x28, 0x63, 0x87, 0xc3, 0x9e, 0x33, 0xd9, 0xef,
	0x8f, 0x46, 0x13, 0x6e, 0x73, 0x31, 0x8b, 0x68, 0xb4, 0x75, 0x16, 0xed, 0xda, 0xe3, 0xb1, 0x3b,
	0x3c, 0xe0, 0xc6, 0xb6, 0xa2, 0x83, 0x3f, 0xb0, 0x42, 0x6f, 0x79, 0x19, 0xb4, 0x55, 0x16, 0x9b,
	0xce, 0x26, 0x38, 0xce, 0xb7, 0x12, 0x11, 0x3e, 0x86, 0x8a, 0xb9, 0x7d, 0xb8, 0xc3, 0x5b, 0xdc,
	0xca, 0x62, 0x16, 0x97, 0xd7, 0x1e, 0x66, 0x61, 0x1c, 0x1d, 0xec, 0x77, 0x77, 0x34, 0x1e, 0xdb,
	0xbc, 0xdd, 0x11, 0x4b, 0xc0, 0xda, 0x26, 0x5b, 0x10, 0x43, 0x8c, 0x2b, 0x68, 0xbf, 0x27, 0x13,
	0x83, 0xfb, 0x3d, 0xb4, 0x88, 0x99, 0xdb, 0xe3, 0x3d, 0x89, 0x5b, 0x28, 0x6a, 0xe7, 0xd8, 0xc2,
	0xb8, 0x7b, 0xd5, 0x76, 0x87, 0xbc, 0x07, 0x71, 0x4b, 0xd2, 0xda, 0x07, 0x42, 0x2c, 0x8c, 0xeb,
	0xe6, 0xd8, 0x22, 0xd4, 0x58, 0x78, 0x68, 0x0f, 0x1c, 0x59, 0x07, 0x97, 0xb1, 0x92, 0xde, 0x68,
	0x40, 0x2a, 0x11, 0xa4, 0xad, 0xb3, 0x10, 0xda, 0x55, 0xf8, 0x1e, 0x76, 0x85, 0x99, 0xb4, 0x02,
	0x63, 0x53, 0xa7, 0xcb, 0xe7, 0xc9, 0x9e, 0xf1, 0x41, 0xb8, 0x5b, 0x11, 0x92, 0x57, 0xd3, 0x59,
	0x74, 0x6c, 0x1f, 0x38, 0x58, 0x6c, 0xe1, 0x1e, 0xc5, 0xbc, 0x8c, 0xd8, 0x0b, 0x14, 0xf9, 0xba,
	0x8c, 0x5b, 0x5c, 0xc6, 0xc1, 0x99, 0x38, 0xfb, 0x7c, 0x1d, 0xc6, 0x2d, 0x14, 0xb1, 0x5f, 0x53,
	0xc7, 0x9e, 0x74, 0xaf, 0x26, 0xe2, 0xa2, 0x5f, 0x82, 0x50, 0x3f, 0x18, 0xed, 0xb9, 0x7d, 0x27,
	0xc1, 0xf8, 0xa4, 0x48, 0xd2, 0x1e, 0x63, 0xcb, 0xe3, 0x89, 0x7b, 0xdd, 0xee, 0xde, 0x1a, 0x8f,
	0xfa, 0x6e, 0xf7, 0x96, 0x5c, 0x90, 0xf3, 0x4a, 0x2d, 0xc9, 0xe2, 0xe3, 0xc3, 0xbd, 0xbe, 0x3b,
	0xbd, 0xea, 0xe0, 0xe2, 0x44, 0x93, 0xd6, 0x54, 0x8b, 0x1b, 0x5e, 0x8a, 0xe5, 0x67, 0xe2, 0xa6,
	0x24, 0x7a, 0x92, 0x58, 0xe6, 0xf9, 0xe1, 0x68, 0x0f, 0x2d, 0x2f, 0x03, 0x9a, 0xd2, 0x35, 0xe7,
	0xd6, 0x8d, 0xd1, 0xa4, 0x37, 0x4d, 0xac, 0xf0, 0x56, 0x2b, 0x5e, 0x3b, 0x64, 0x71, 0x55, 0xff,
	0x7d, 0x4d, 0xac, 0x9c, 0xc0, 0x10, 0xb7, 0xdf, 0x7b, 0x4c, 0x60, 0x82, 0x45, 0x71, 0xda, 0x87,
	0xee, 0x90, 0xdb, 0x7b, 0xdc, 0xf2, 0x70, 0xad, 0xcc, 0xa2, 0xb2, 0xc4, 0xb1, 0x8f, 0x26, 0x58,
	0xd4, 0x19, 0xbb, 0xd3, 0x51, 0x4f, 0x7c, 0x37, 0x62, 0x79, 0x88, 0xa6, 0x3d, 0x73, 0x67, 0x7d,
	0x47, 0x9a, 0x94, 0x80, 0xb5, 0x0f, 0x86, 0x58, 0xc8, 0x18, 0x8f, 0xef, 0xd7, 0x2a, 0xf7, 0x0e,
	0x87, 0x3d, 0x55, 0x85, 0x24, 0x62, 0xad, 0xe1, 0x39, 0x6b, 0xe5, 0x8b, 0x70, 0x34, 0x71, 0x0e,
	0x27, 0x7d, 0xee, 0xf9, 0xf9, 0x22, 0x14, 0xec, 0x0d, 0xc4, 0xc2, 0x27, 0x6f, 0xc9, 0xd1, 0x4f,
	0xcd, 0x92, 0x63, 0xf7, 0x6b, 0xc9, 0xc0, 0x42, 0xd7, 0x9d, 0x89, 0x34, 0x50, 0x14, 0x8f, 0x5b,
	0x21, 0xbb, 0x9d, 0x15, 0xf2, 0x15, 0xe0, 0xf6, 0xa4, 0x89, 0x72, 0xf9, 0xff, 0xa3, 0x65, 0x7e,
	0x34, 0xc2, 0x16, 0xc4, 0xee, 0x8a, 0x53, 0x7b, 0x68, 0x7b, 0x53, 0x7b, 0x68, 0xa3, 0xef, 0x3f,
	0x70, 0x46, 0x7c, 0x66, 0xa9, 0xef, 0xdf, 0x76, 0x46, 0x16, 0x26, 0xe0, 0x00, 0xf4, 0x86, 0x33,
	0xe9, 0x80, 0x51, 0x44, 0x4d, 0x7f, 0x30, 0xe3, 0xb3, 0x1b, 0xb3, 0x50, 0xe4, 0xe6, 0x32, 0x96,
	0x93, 0x1a, 0x74, 0xc7, 0xd8, 0x79, 0x77, 0x7c, 0x3d, 0xc7, 0x7d, 0x6a, 0xdc, 0xe2, 0xb2, 0x96,
	0x66, 0x4c, 0xec, 0xeb, 0xb3, 0x5b, 0x63, 0x47, 0x6e, 0xd8, 0xa7, 0x8f, 0x6c, 0xfd, 0xad, 0x5b,
	0x63, 0xc7, 0x22, 0xd9, 0xb0, 0xa2, 0x81, 0x7d, 0xcd, 0x91, 0x4e, 0x83, 0xcb, 0x68, 0xb9, 0x83,
	0x51, 0xcf, 0xe9, 0xcb, 0x39, 0x11, 0x80, 0x4d, 0x18, 0x4d, 0xf9, 0x54, 0xc4, 0xad, 0xe0, 0x88,
	0x6f, 0xce, 0xa3, 0xe9, 0x75, 0x3e, 0xfc, 0x71, 0x0b, 0x45, 0xd4, 0x5c, 0xbd, 0x71, 0x9d, 0x8f,
	0x7b, 0xdc, 0x42, 0x51, 0x5b, 0x62, 0x81, 0xab, 0x7c, 0x5c, 0x23, 0x56, 0xe0, 0x2a, 0xd2, 0x0d,
	0x3e, 0x70, 0x11, 0x2b, 0x70, 0x03, 0x73, 0x8f, 0xc7, 0x6e, 0xe2, 0x24, 0x67, 0x14, 0xf9, 0x56,
	0x75, 0x73, 0x62, 0xcf, 0xdc, 0x51, 0x02, 0xce, 0x07, 0x2e, 0x04, 0x2d, 0x0f, 0xf1, 0xdb, 0x2f,
	0x9a, 0xf2, 0x6d, 0x38, 0x66, 0x05, 0x5f, 0x34, 0xc5, 0x99, 0x38, 0x70, 0x46, 0xfb, 0xce, 0xac,
	0x7b, 0x95, 0xef, 0xba, 0x31, 0x4b, 0x31, 0xa6, 0xed, 0xf7, 0xed, 0xe9, 0x55, 0x34, 0xaa, 0xd3,
	0x62, 0x96, 0x3c, 0xc6, 0x34, 0x0c, 0x18, 0x0e, 0xd1, 0x73, 0x8a, 0x9d, 0x56, 0x31, 0x7e, 0xbd,
	0x6b, 0x4f, 0x26, 0xae, 0x33, 0x49, 0x9c, 0x15, 0xcb, 0x5f, 0x22, 0xf7, 0x96, 0xdd, 0xee, 0x60,
	0xd8, 0x4d, 0x9c, 0x13, 0xeb, 0x4d, 0x90, 0xf6, 0x59, 0x6c, 0xa5, 0x3b, 0x1a, 0x0e, 0x85, 0xf9,
	0xf3, 0x41, 0x7f, 0x80, 0x0f, 0xfa, 0x03, 0xd4, 0x84, 0x64, 0x32, 0x1f, 0xf8, 0x23, 0xd9, 0x71,
	0x08, 0xdc, 0x7d, 0x3b, 0x91, 0x10, 0x03, 0xe6, 0xee, 0xdb, 0xdc, 0x07, 0xb9, 0xbd, 0xe9, 0x55,
	0x3b, 0x95, 0x78, 0x50, 0xfa, 0x20, 0x81, 0x7c, 0xd1, 0xbb, 0xbd, 0x41, 0x2f, 0x9b, 0x58, 0x95,
	0x8b, 0x9e, 0x13, 0x76, 0xa9, 0x37, 0x96, 0x45, 0x1e, 0x12, 0x5d, 0xf2, 0x98, 0xd7, 0x36, 0x16,
	0x85, 0x1e, 0x96, 0xb5, 0x09, 0xc4, 0x94, 0x81, 0xdd, 0xe5, 0x85, 0x1e, 0x11, 0x29, 0x12, 0x79,
	0x67, 0xed, 0x2e, 0x16, 0x79, 0x54, 0x76, 0x96, 0xd3, 0xda, 0xfb, 0x82, 0x2c, 0xb4, 0x2d, 0xac,
	0xb5, 0x6f, 0xcf, 0xb8, 0x79, 0x07, 0x2d, 0x14, 0xb9, 0x66, 0x34, 0xe4, 0xf6, 0x8d, 0x9a, 0xd1,
	0x50, 0x7b, 0x8c, 0x85, 0xf9, 0x70, 0x84, 0x8e, 0x84, 0x0d, 0xdb, 0xce, 0x88, 0x8f, 0x03, 0x4f,
	0xc5, 0x96, 0xdb, 0xdd, 0xee, 0xe1, 0xc4, 0xee, 0xde, 0xe2, 0xa6, 0x1e, 0xb1, 0x14, 0x63, 0xfb,
	0xfa, 0xf6, 0x74, 0xb6, 0xef, 0xde, 0xe4, 0x46, 0x1f, 0xb1, 0x3c, 0xd4, 0x52, 0x2c, 0xee, 0x8e,
	0xa7, 0xce, 0x84, 0xc7, 0xb7, 0x0b, 0x47, 0x8c, 0xbc, 0xdc, 0xa8, 0x8c, 0xba, 0x68, 0x31, 0x43,
	0xcb, 0xcf, 0xc5, 0x67, 0x76, 0x74, 0x38, 0x9c, 0x4d, 0x6e, 0xc9, 0xed, 0xd2, 0x43, 0xec, 0xec,
	0xc4, 0x39, 0x70, 0x47, 0x43, 0x69, 0xff, 0x92, 0xd0, 0x03, 0x09, 0x69, 0xdf, 0x1d, 0x4f, 0x53,
	0xc9, 0x8c, 0x5c, 0x09, 0xf3, 0x4a, 0xbe, 0x4e, 0x9c, 0xd9, 0x64, 0x24, 0x17, 0x85, 0x00, 0x5c,
	0x51, 0x5d, 0x77, 0x76, 0x4b, 0x2e, 0x0c, 0x2e, 0xe3, 0x10, 0xbd, 0xd8, 0x1d, 0x7b, 0x2b, 0xe3,
	0xc5, 0xee, 0x78, 0xed, 0x23, 0x01, 0x16, 0xc6, 0x30, 0xfb, 0x76, 0x1b, 0xca, 0xde, 0xe1, 0x2d,
	0x67, 0xa2, 0xa2, 0x1c, 0x0f, 0xb1, 0x92, 0x5b, 0xa3, 0x3d, 0x3e, 0xa8, 0x11, 0x0b, 0x45, 0x6c,
	0xfe, 0x81, 0x83, 0x01, 0x9b, 0xb7, 0x11, 0x08, 0x9a, 0x73, 0x54, 0x91, 0x79, 0x47, 0x85, 0x51,
	0x5f, 0xf7, 0x70, 0x3a, 0x1b, 0x0d, 0x7a, 0xf6, 0xcc, 0x96, 0xfe, 0x83, 0x68, 0x3c, 0x6f, 0x15,
	0xbd, 0x93, 0xb7, 0x7a, 0x16, 0x0b, 0xf3, 0x92, 0x31, 0x7e, 0x88, 0x39, 0x35, 0x77, 0x66, 0x28,
	0xd9, 0x33, 0xdb, 0xe2, 0xc9, 0x6b, 0x6f, 0x0b, 0xb0, 0x98, 0xa7, 0xba, 0xaf, 0xcd, 0x2e, 0xcd,
	0xa2, 0x53, 0xe7, 0x60, 0x80, 0x8e, 0x38, 0xcc, 0xab, 0x7e, 0xf0, 0x58, 0xd5, 0x4f, 0x34, 0x45,
	0x06, 0xcb, 0xcb, 0xb9, 0x5a, 0x64, 0x51, 0xa9, 0xbb, 0xaf, 0x6f, 0x9c, 0x61, 0x91, 0xeb, 0x76,
	0xff, 0x50, 0x6d, 0xc9, 0x1c, 0xd6, 0xde, 0x19, 0x66, 0xa1, 0xf2, 0xe0, 0xf8, 0x96, 0xfc, 0x38,
	0x5b, 0xd8, 0xc3, 0x80, 0x7b, 0x22, 0x5d, 0xb7, 0x1f, 0xff, 0x6f, 0x72, 0xb5, 0x25, 0x93, 0xb5,
	0xc7, 0x58, 0xe4, 0xba, 0xdb, 0x73, 0x46, 0xf2, 0xdc, 0xb6, 0xa2, 0xf2, 0xed, 0xa2, 0xd6, 0x12,
	0x89, 0x98, 0xcb, 0x3e, 0xec, 0xb9, 0x23, 0xee, 0xf1, 0x68, 0x2e, 0x03, 0xb5, 0x96, 0x48, 0xd4,
	0x9e, 0xcd, 0x56, 0x7a, 0xee, 0x74, 0xdc, 0xb7, 0x6f, 0x0d, 0xec, 0xa1, 0x7d, 0xa0, 0xa6, 0xf6,
	0x88, 0x56, 0x7b, 0x2e, 0x3b, 0x35, 0xaf, 0x41, 0x77, 0x27, 0xe6, 0xfa, 0x78, 0x02, 0x76, 0xdc,
	0x1d, 0x4e, 0x67, 0x7d, 0x19, 0x83, 0x0b, 0xe0, 0x11, 0x8a, 0x7d, 0xe0, 0xf6, 0xe4, 0xaa, 0x10,
	0x80, 0xc6, 0xb3, 0xe7, 0xf6, 0xc4, 0xa1, 0x00, 0x57, 0x45, 0xc0, 0x52, 0xac, 0x9d, 0x67, 0x8b,
	0x9e, 0x8c, 0x07, 0x33, 0xb1, 0x2a, 0xa8, 0x4a, 0x5b, 0x63, 0x4b, 0xdd, 0xbe, 0xdb, 0xbd, 0xb6,
	0x37, 0x19, 0xdd, 0xc0, 0xa3, 0x25, 0xf0, 0x0f, 0xce, 0xe9, 0x44, 0x54, 0xda, 0x3d, 0x9c, 0x38,
	0x7c, 0x41, 0xc4, 0x2c, 0x49, 0x58, 0xd6, 0xdd, 0x9f, 0xd8, 0x03, 0x67, 0xef, 0x70, 0x3a, 0x73,
	0x26, 0xf2, 0x94, 0x38, 0xa7, 0x43, 0xf3, 0x1c, 0x0f, 0xc6, 0x7c, 0x71, 0x51, 0xf3, 0x6c, 0xe0,
	0x11, 0x7a, 0x3c, 0xe0, 0x87, 0xb6, 0xa1, 0x3d, 0x73, 0xaf, 0x3b, 0x72, 0x3b, 0xf7, 0x27, 0xad,
	0xc6, 0xd5, 0x96, 0x4c, 0xc6, 0xd5, 0xe4, 0xdc, 0x1c, 0xcb, 0xed, 0x08, 0x45, 0x2c, 0x8a, 0x2b,
	0xd8, 0xed, 0x26, 0x4e, 0x71, 0x03, 0xf4, 0x8b, 0x56, 0xb9, 0xda, 0x92, 0xc9, 0x6b, 0x39, 0xb6,
	0x58, 0x1c, 0x0d, 0xc6, 0xf6, 0xd0, 0x1d, 0x0d, 0x0d, 0x6a, 0x27, 0x81, 0x23, 0xe5, 0xe6, 0xed,
	0x64, 0xed, 0xcd, 0x31, 0x16, 0xe1, 0x26, 0xc1, 0x3d, 0x87, 0x3b, 0x70, 0xa6, 0xbc, 0x04, 0x7a,
	0x0e, 0x04, 0x2d, 0xcb, 0xe2, 0x7d, 0x77, 0xe8, 0xd8, 0x13, 0x74, 0x1f, 0xc1, 0x23, 0x5b, 0x09,
	0x2f, 0x58, 0xf1, 0x92, 0x2d, 0x3f, 0x27, 0x4e, 0xca, 0xc0, 0x1d, 0xf6, 0x0e, 0xf9, 0x56, 0x39,
	0x94, 0xfe, 0x81, 0xaa, 0x78, 0x0e, 0xfb, 0xa6, 0xca, 0x11, 0x96, 0x39, 0x7c, 0x95, 0xf6, 0x19,
	0x2c, 0xce, 0xaf, 0x32, 0xba, 0xa3, 0xfe, 0x54, 0x9e, 0x5d, 0xfc, 0xa5, 0xdd, 0x90, 0x29, 0x96,
	0x9f, 0x47, 0xec, 0xe5, 0x0b, 0xde, 0x5e, 0xce, 0xf7, 0xf9, 0xa8, 0xb7, 0xcf, 0x3f, 0xca, 0xd8,
	0x74, 0x66, 0x4f, 0x66, 0x3d, 0xa7, 0x6f, 0xdf, 0x92, 0xd7, 0x02, 0x44, 0x83, 0x4b, 0x73, 0x7a,
	0xcd, 0x1d, 0xf3, 0xdd, 0x32, 0x66, 0x71, 0x19, 0xdd, 0x1e, 0xfe, 0x0e, 0xdc, 0x21, 0xdf, 0x0e,
	0x23, 0x96, 0x87, 0xda, 0xc3, 0x2c, 0x8e, 0xa2, 0xbd, 0x8f, 0x26, 0xf1, 0x20, 0x4f, 0xf3, 0x15,
	0x3c, 0xe6, 0x75, 0x9e, 0x3e, 0x74, 0x86, 0x5d, 0x87, 0x9b, 0x63, 0xc4, 0x52, 0xac, 0x25, 0x59,
	0x64, 0xcf, 0x9e, 0xcd, 0x84, 0x21, 0xad, 0xe8, 0xab, 0xfe, 0xb6, 0x3c, 0x71, 0xb8, 0x11, 0x18,
	0x33, 0x71, 0xb6, 0x76, 0x2c, 0x91, 0x51, 0x0e, 0x94, 0x73, 0x73, 0x86, 0x7e, 0x54, 0x84, 0x96,
	0x62, 0xa0, 0x3c, 0x15, 0xf6, 0x6d, 0xe0, 0x0e, 0xf7, 0x5c, 0x7e, 0xb8, 0xe5, 0xf6, 0x1b, 0xb1,
	0x88, 0x86, 0xa7, 0xdb, 0x37, 0xbd, 0xf4, 0x65, 0x99, 0xae, 0x34, 0xb8, 0xb3, 0xec, 0x8d, 0x6e,
	0xba, 0xc3, 0x03, 0xbb, 0xdf, 0x1f, 0xdd, 0x70, 0x7a, 0xdc, 0x00, 0x63, 0xd6, 0xbc, 0x12, 0x23,
	0x0b, 0x5c, 0xc1, 0x7b, 0x76, 0xf7, 0xda, 0xc0, 0x99, 0x5d, 0x1d, 0xf5, 0xf8, 0x65, 0x05, 0x35,
	0x87, 0x86, 0x4c, 0xae, 0xf2, 0x64, 0xeb, 0x48, 0x76, 0xed, 0xf9, 0x2c, 0xd6, 0x73, 0xfa, 0xee,
	0x75, 0x67, 0x72, 0x8b, 0xdf, 0x69, 0xac, 0xe8, 0x8f, 0x1e, 0x8d, 0x6b, 0x4b, 0x32, 0x5d, 0xd6,
	0xa0, 0xf2, 0x6b, 0xcf, 0x62, 0xa1, 0xf1, 0x48, 0x44, 0x5b, 0x74, 0x6f, 0x35, 0x7a, 0x8d, 0xd1,
	0xd4, 0xe5, 0x7b, 0x2b, 0xa6, 0x6b, 0x29, 0xb6, 0xd8, 0xf5, 0x56, 0x81, 0xdd, 0x4b, 0x68, 0xb7,
	0xb7, 0x7d, 0x9a, 0x47, 0x7b, 0x12, 0x03, 0x26, 0x85, 0x1d, 0x3d, 0xc5, 0x03, 0xaa, 0x45, 0xfd,
	0x0c, 0x69, 0x9b, 0x5a, 0x57, 0xd6, 0x32, 0xc9, 0xab, 0xa7, 0xb4, 0xc7, 0x59, 0xc8, 0x1e, 0xbb,
	0x89, 0xd3, 0xbc, 0x37, 0x67, 0xfd, 0x66, 0x35, 0xca, 0x5b, 0xe8, 0x1f, 0x6e, 0x8c, 0x26, 0xd7,
	0x2c, 0xcc, 0xa1, 0xbd, 0x80, 0xf9, 0x25, 0x79, 0x18, 0x72, 0x86, 0x17, 0x39, 0x77, 0xfc, 0x23,
	0x3c, 0x18, 0x99, 0xcf, 0xac, 0x6d, 0xb0, 0xf8, 0xb8, 0x6f, 0x77, 0x1d, 0xbe, 0x13, 0xad, 0xf2,
	0x31, 0x78, 0x68, 0x7e, 0x11, 0x36, 0xbc, 0x64, 0x5e, 0xdc, 0xcf, 0xad, 0x7d, 0x36, 0x5b, 0xf4,
	0xa6, 0xc1, 0x19, 0xf6, 0x78, 0x34, 0x46, 0xc7, 0xdd, 0x9b, 0xb2, 0xa2, 0x33, 0x9d, 0xf2, 0x55,
	0xc7, 0xef, 0xd0, 0x68, 0x91, 0xb5, 0x0f, 0x85, 0xd8, 0x82, 0x18, 0x38, 0xb1, 0xc0, 0x02, 0x73,
	0x0b, 0x2c, 0xe8, 0x2d, 0xb0, 0xc7, 0xd9, 0xc2, 0xfe, 0x68, 0x32, 0xb0, 0x67, 0xdc, 0x2c, 0xe8,
	0xa8, 0x6f, 0x71, 0xb5, 0x25, 0x93, 0x71, 0xa5, 0xdd, 0x18, 0xd8, 0x37, 0xa5, 0x21, 0x73, 0x19,
	0x75, 0x57, 0x51, 0x27, 0x6c, 0x97, 0xcb, 0x22, 0x9f, 0x3b, 0x94, 0xf6, 0xca, 0x65, 0x91, 0xcf,
	0x1d, 0x4a, 0x0f, 0xc9, 0x65, 0xb9, 0x45, 0x86, 0xd4, 0x16, 0x29, 0x4d, 0x25, 0x7c, 0x0f, 0x53,
	0x79, 0x0e, 0x8b, 0xec, 0xf1, 0x99, 0x88, 0x1c, 0x99, 0x3c, 0xd1, 0x57, 0xa3, 0xc7, 0x47, 0x52,
	0xe4, 0xf1, 0x57, 0xed, 0xc2, 0xfd, 0xae, 0x5a, 0xe5, 0x4d, 0xa3, 0xd4, 0x9b, 0xae, 0xb2, 0xd8,
	0x6c, 0x34, 0xe6, 0x7b, 0x07, 0xf7, 0x41, 0x31, 0x4b, 0xb1, 0x96, 0x61, 0x0b, 0xce, 0xcd, 0x71,
	0xcf, 0x9d, 0xf0, 0xfb, 0xc9, 0x15, 0xfd, 0x61, 0x72, 0x23, 0x37, 0xb6, 0x87, 0x3d, 0x7b, 0xaf,
	0xef, 0x94, 0xdc, 0x89, 0x08, 0xd5, 0x2d, 0x99, 0xd7, 0xb3, 0x40, 0x76, 0x4f, 0x0b, 0xc4, 0x23,
	0x6d, 0x77, 0x20, 0xf7, 0x3e, 0x14, 0xd7, 0xae, 0xb2, 0x05, 0x31, 0x35, 0x77, 0x9d, 0xd7, 0x73,
	0x6c, 0xe1, 0x86, 0x38, 0xff, 0x08, 0x27, 0x2e, 0x09, 0xf5, 0x57, 0x85, 0x5e, 0xb8, 0x6e, 0x49,
	0x6a, 0xda, 0x22, 0xfe, 0xb4, 0xad, 0xbd, 0x27, 0xc2, 0x22, 0x3c, 0xa2, 0xb8, 0xc3, 0x26, 0x73,
	0x64, 0xb7, 0x08, 0xde, 0x73, 0xb7, 0x08, 0xdd, 0x63, 0xb7, 0x08, 0xdf, 0xc7, 0x6e, 0x31, 0xbf,
	0x23, 0x44, 0x8e, 0xed, 0x08, 0xd4, 0x8b, 0x2f, 0xdc, 0xc9, 0x8b, 0x47, 0x3f, 0x45, 0x2f, 0x1e,
	0xbb, 0x97, 0x17, 0x8f, 0xdf, 0xc3, 0x8b, 0xb3, 0x63, 0x5e, 0x9c, 0xba, 0xd7, 0xc5, 0x4f, 0xd2,
	0xbd, 0x1e, 0xf1, 0x9b, 0x4b, 0xf7, 0xe1, 0x37, 0xa5, 0xe1, 0x2d, 0xff, 0x3f, 0x76, 0x7d, 0xfc,
	0xe8, 0x77, 0x73, 0xea, 0x3c, 0xcd, 0x0f, 0xc0, 0x11, 0x4b, 0x12, 0x86, 0xfc, 0xfb, 0x8e, 0xd3,
	0xe3, 0xce, 0x9a, 0xce, 0xf4, 0x96, 0xe3, 0x88, 0x95, 0xcb, 0x93, 0xc5, 0xf5, 0x93, 0x3b, 0xeb,
	0x5e, 0x75, 0x7a, 0x72, 0x6b, 0x57, 0xac, 0x65, 0x58, 0x78, 0x78, 0x7d, 0xd4, 0xe7, 0x7b, 0xfb,
	0x8a, 0x7e, 0xde, 0x77, 0xa8, 0xa3, 0xfe, 0xe1, 0xc0, 0xa9, 0xe1, 0xd2, 0xe8, 0xbb, 0x2f, 0xf6,
	0xbd, 0x22, 0xcf, 0xbd, 0xf6, 0xf1, 0x00, 0x5b, 0x10, 0x61, 0x9b, 0xb6, 0xca, 0xa2, 0x13, 0xf1,
	0xaa, 0x22, 0x22, 0xf4, 0x9d, 0x13, 0x96, 0xa7, 0xc0, 0xdd, 0x52, 0x8a, 0x1d, 0x19, 0xfb, 0xe9,
	0x7c, 0x5b, 0x39, 0x77, 0x34, 0xf6, 0x13, 0x99, 0x76, 0x4e, 0xe0, 0x41, 0x8e, 0x8b, 0x35, 0x15,
	0x0b, 0x5e, 0x97, 0x61, 0xbe, 0xbc, 0x82, 0x92, 0x23, 0x1e, 0xba, 0xe7, 0x88, 0x2b, 0xeb, 0x0c,
	0xdf, 0xa7, 0x75, 0x6e, 0x9e, 0x64, 0xde, 0xd7, 0xe5, 0x45, 0xfe, 0x3b, 0x96, 0xd8, 0xf2, 0x5c,
	0x03, 0xbd, 0xf6, 0x04, 0xfc, 0xf6, 0xbc, 0x40, 0x5e, 0x53, 0xdd, 0x9c, 0xc9, 0xc0, 0x70, 0xed,
	0xf6, 0x7d, 0x13, 0xd6, 0x77, 0x53, 0x6c, 0x4d, 0x5e, 0x11, 0xad, 0xca, 0x2f, 0x2a, 0x50, 0x9c,
	0x1e, 0xee, 0x91, 0x93, 0xf9, 0xb3, 0xee, 0x5e, 0x49, 0x53, 0x64, 0xb6, 0x8e, 0x14, 0xd6, 0x32,
	0xb8, 0x45, 0x76, 0x07, 0x33, 0x5e, 0x93, 0xf0, 0xfd, 0xe7, 0xe8, 0x2e, 0x37, 0xbf, 0x3b, 0xca,
	0x8c, 0x68, 0x1e, 0x1c, 0xba, 0xc3, 0x99, 0xf4, 0x00, 0x8a, 0xb1, 0xc3, 0x68, 0x76, 0x62, 0xe9,
	0xa3, 0x88, 0x1e, 0xda, 0x9e, 0x4e, 0x9d, 0x99, 0x70, 0xea, 0x8b, 0xc4, 0x43, 0xcf, 0x37, 0xd5,
	0xc0, 0x4c, 0x96, 0xcc, 0x8b, 0x2b, 0xdf, 0x3e, 0x9c, 0xf4, 0xa7, 0x87, 0xe3, 0xf1, 0x68, 0x32,
	0x93, 0x57, 0x83, 0x54, 0x85, 0x39, 0x7a, 0x24, 0x87, 0x38, 0x80, 0x50, 0x95, 0xf6, 0x14, 0x5b,
	0xe6, 0xef, 0x23, 0xb3, 0x09, 0x6e, 0xca, 0x93, 0x29, 0x5f, 0x76, 0x8b, 0xfa, 0x63, 0x77, 0x68,
	0x80, 0x89, 0x79, 0x5b, 0x32, 0xaf, 0x35, 0x5f, 0x54, 0x3c, 0xbe, 0xf0, 0x4b, 0x4b, 0x19, 0xe7,
	0x79, 0xb8, 0xfa, 0xc6, 0x30, 0x8b, 0xf0, 0xb6, 0x93, 0x63, 0x67, 0x84, 0xef, 0xa9, 0xab, 0x2c,
	0x86, 0xf6, 0xe1, 0x4e, 0x9c, 0x9e, 0x7c, 0xb1, 0x51, 0xac, 0x3d, 0x9f, 0xde, 0x29, 0x2f, 0xde,
	0xd1, 0x08, 0x78, 0xc5, 0x4f, 0xb4, 0x30, 0xe7, 0xce, 0x09, 0x79, 0xf3, 0xac, 0xe5, 0x58, 0xc8,
	0x1d, 0x1c, 0xc8, 0x77, 0xc3, 0xbb, 0x97, 0x2c, 0x0f, 0xec, 0x03, 0x2c, 0x89, 0x05, 0xb4, 0x67,
	0x7b, 0xa7, 0xdb, 0xc8, 0xed, 0x4e, 0xb7, 0x58, 0xbf, 0x38, 0xdf, 0xe6, 0xe5, 0xc5, 0x80, 0x78,
	0x4c, 0x7c, 0xc6, 0x5d, 0x3f, 0x80, 0xa7, 0xf9, 0x9d, 0x13, 0xe2, 0xaa, 0x60, 0xf5, 0x41, 0x16,
	0xe1, 0x4d, 0xe5, 0x17, 0x49, 0xce, 0x50, 0x0e, 0x05, 0x8a, 0xab, 0x6f, 0x0a, 0xb0, 0x08, 0x6f,
	0x8c, 0xb6, 0x21, 0xaf, 0x94, 0x02, 0x77, 0x35, 0x5c, 0x9e, 0x97, 0x7f, 0x82, 0xdc, 0x33, 0xf1,
	0x1d, 0x37, 0x38, 0xb7, 0xe3, 0x86, 0xbc, 0x1d, 0xd7, 0xdb, 0x41, 0xc3, 0xb7, 0x09, 0x7c, 0x22,
	0x24, 0xf0, 0x51, 0x7b, 0xe9, 0x02, 0xd9, 0x4b, 0x57, 0x4b, 0x2c, 0xcc, 0xef, 0x37, 0xd6, 0xe7,
	0x1a, 0xe7, 0xaf, 0x05, 0x4c, 0x3c, 0xda, 0x1a, 0xd9, 0xc9, 0xa0, 0xea, 0xe4, 0xe6, 0x32, 0x5b,
	0xe4, 0xe6, 0x2b, 0xdc, 0xc1, 0xea, 0xd3, 0x6c, 0x79, 0xce, 0xa6, 0xb4, 0x0b, 0x2c, 0x22, 0xde,
	0xef, 0x44, 0xf5, 0xfe, 0x85, 0xb6, 0xc8, 0xc6, 0x43, 0x27, 0xf1, 0xa2, 0x97, 0x63, 0x51, 0x11,
	0xff, 0x4f, 0xf9, 0x1b, 0xf3, 0x5c, 0x5c, 0xa3, 0xaa, 0x74, 0x87, 0x07, 0x72, 0x4f, 0xf2, 0x32,
	0xaf, 0x7d, 0x26, 0x5b, 0x99, 0x1f, 0x39, 0x6d, 0x85, 0xb1, 0x76, 0xed, 0x62, 0xad, 0x7e, 0xa9,
	0x56, 0x36, 0x5a, 0x70, 0x42, 0x8b, 0xb1, 0x70, 0xb9, 0x58, 0xaf, 0x41, 0x00, 0xa5, 0x4a, 0x7d,
	0xbb, 0x0e, 0x41, 0x94, 0xaa, 0x46, 0xb9, 0x06, 0xa1, 0xb5, 0xb7, 0x06, 0xd9, 0xca, 0xbc, 0xcf,
	0x20, 0x15, 0x14, 0x9b, 0x58, 0xc1, 0xc3, 0x2c, 0x51, 0xac, 0xd7, 0x5a, 0x66, 0xad, 0xd5, 0xd9,
	0x36, 0x6b, 0xa6, 0x65, 0x54, 0x3a, 0x75, 0xab, 0x53, 0x2d, 0x5f, 0x36, 0x4b, 0xc0, 0xb4, 0xd3,
	0xec, 0xa4, 0x97, 0x6a, 0x58, 0xad, 0x72, 0xb1, 0x62, 0xc2, 0xa2, 0x76, 0x8a, 0x2d, 0x7b, 0xca,
	0xdd, 0x72, 0xc9, 0xac, 0xc3, 0x12, 0x55, 0x19, 0xed, 0x52, 0xb9, 0x0e, 0xcb, 0x54, 0x55, 0xae,
	0x1a, 0xdb, 0x26, 0xac, 0x68, 0xab, 0xec, 0x9c, 0xa7, 0x6a, 0x37, 0x4d, 0x4b, 0x7e, 0xb0, 0x65,
	0x96, 0xe0, 0xa4, 0xa6, 0xb1, 0x95, 0x66, 0xbd, 0x58, 0x36, 0x2a, 0x5e, 0x33, 0xe0, 0x8c, 0x06,
	0x6c, 0x49, 0xea, 0xcc, 0xaa, 0x51, 0xae, 0xc0, 0x59, 0x92, 0xab, 0xb8, 0x63, 0x60, 0xc5, 0x70,
	0x0e, 0xdb, 0xd8, 0xb0, 0xea, 0xa5, 0x76, 0xb1, 0xd5, 0x69, 0x9a, 0x95, 0x4a, 0xb9, 0xb6, 0x0d,
	0x8f, 0x6a, 0x0f, 0xb0, 0xd3, 0x9e, 0xb2, 0x6a, 0x58, 0x17, 0xcd, 0x56, 0xa3, 0x62, 0x14, 0x4d,
	0xf8, 0x34, 0xac, 0xc1, 0x4b, 0xb0, 0xcc, 0xdd, 0xb2, 0x79, 0x09, 0xce, 0xaf, 0x95, 0xd8, 0x22,
	0x71, 0xcf, 0xda, 0x49, 0xb6, 0xe8, 0x0d, 0x51, 0xeb, 0x32, 0x8e, 0xd1, 0x22, 0x8b, 0xca, 0x76,
	0x43, 0x40, 0x63, 0x6c, 0x41, 0x34, 0x01, 0x82, 0x98, 0x20, 0x2b, 0x83, 0xd0, 0x5a, 0x93, 0x85,
	0x1a, 0xfc, 0xa2, 0xe3, 0x24, 0xf7, 0x25, 0x33, 0xa7, 0x63, 0x1f, 0xf2, 0x38, 0x55, 0xbe, 0xfd,
	0xae, 0x48, 0xb5, 0x21, 0xb4, 0xda, 0x33, 0x59, 0xa4, 0xe7, 0xd8, 0xfd, 0xa9, 0xfc, 0xdb, 0xc1,
	0x32, 0x79, 0x11, 0xb0, 0xfb, 0x96, 0x48, 0x5b, 0x7b, 0x8a, 0x2d, 0x88, 0x4b, 0x0e, 0xfe, 0x5a,
	0xeb, 0xd9, 0x72, 0x5c, 0xda, 0xac, 0xba, 0x37, 0x0b, 0xf2, 0xfb, 0x20, 0x01, 0x18, 0x2e, 0x5c,
	0x77, 0x86, 0x3d, 0xf9, 0x76, 0x1c, 0xb7, 0x24, 0xad, 0xbd, 0x23, 0xc0, 0xc2, 0x58, 0xf7, 0xb1,
	0x0b, 0x35, 0x7a, 0xb3, 0x14, 0xbc, 0xfb, 0xcd, 0x52, 0xe8, 0xf8, 0xcd, 0x92, 0xfa, 0x4b, 0x41,
	0x98, 0xfe, 0xa5, 0x60, 0x95, 0xc5, 0x6e, 0xd8, 0xf2, 0x35, 0x4c, 0x3e, 0x3c, 0x7b, 0xac, 0x3d,
	0xc6, 0x82, 0xfc, 0xc9, 0x0b, 0x57, 0xcd, 0x19, 0x72, 0xdd, 0xe6, 0x5f, 0xc8, 0x07, 0xed, 0xd9,
	0xda, 0xeb, 0x63, 0x6c, 0x91, 0xff, 0x67, 0x63, 0x3a, 0x1e, 0x0d, 0xa7, 0xc7, 0xdf, 0x8b, 0x73,
	0x2c, 0x8a, 0x5f, 0xda, 0xe3, 0x17, 0xb2, 0xf3, 0x5b, 0x11, 0x29, 0xf6, 0x44, 0xd3, 0xb1, 0x67,
	0xc8, 0x5e, 0x66, 0xfe, 0x67, 0x07, 0xb7, 0xa7, 0x8e, 0x4b, 0x02, 0xbc, 0xbf, 0x34, 0x88, 0x4b,
	0x3d, 0xfe, 0x97, 0x86, 0xf9, 0x0b, 0xd9, 0xc8, 0xb1, 0x0b, 0xd9, 0x67, 0xb3, 0xd0, 0x70, 0x6f,
	0x72, 0xac, 0x1b, 0xb5, 0x11, 0xff, 0xba, 0x3d, 0xc5, 0x43, 0xd6, 0x70, 0x6f, 0xb2, 0xfa, 0xde,
	0x05, 0x16, 0x95, 0x8d, 0xd0, 0x74, 0x16, 0xda, 0xe3, 0x9d, 0xc0, 0xf6, 0x9e, 0xbf, 0x5b, 0x7b,
	0xb9, 0x0e, 0x33, 0xf3, 0x5b, 0x19, 0x1c, 0x5e, 0x79, 0x61, 0xea, 0xfd, 0x61, 0xe3, 0x60, 0x32,
	0x3a, 0x1c, 0xcb, 0xc7, 0x29, 0x01, 0xab, 0x1f, 0x8b, 0xb0, 0x10, 0x7e, 0xe5, 0xe8, 0x48, 0x9d,
	0x61, 0x11, 0x77, 0x30, 0x56, 0x17, 0xd7, 0x02, 0x50, 0x3b, 0x9e, 0xb8, 0x5d, 0xb1, 0x67, 0x05,
	0x2c, 0x01, 0xf8, 0x35, 0x1b, 0x07, 0x47, 0x0c, 0x04, 0x97, 0xf9, 0x95, 0xad, 0xff, 0x76, 0xc9,
	0x65, 0x4d, 0x63, 0x21, 0xbb, 0x37, 0x10, 0xf7, 0xd4, 0xfc, 0xff, 0x2d, 0xbd, 0x81, 0x56, 0x60,
	0xcc, 0xee, 0x0d, 0xe6, 0x63, 0xbd, 0x07, 0x8e, 0xed, 0x08, 0xa2, 0x9f, 0x3b, 0x27, 0xac, 0xb8,
	0xdd, 0x1b, 0xc8, 0x40, 0x2f, 0xc1, 0xa2, 0x9e, 0xb1, 0x88, 0xb3, 0xa2, 0x87, 0xe4, 0xad, 0x75,
	0x65, 0xee, 0xad, 0x55, 0x63, 0x61, 0x17, 0xdb, 0x24, 0xdf, 0xc7, 0x50, 0xe6, 0x73, 0xe8, 0xf6,
	0xbc, 0x17, 0xcb, 0xae, 0x68, 0x79, 0x77, 0xe2, 0xf6, 0xe4, 0x43, 0x00, 0x97, 0x79, 0x2e, 0x79,
	0x42, 0x8f, 0x8b, 0x77, 0x55, 0x9d, 0x85, 0x79, 0xa8, 0xb8, 0x78, 0xaf, 0x50, 0x71, 0x33, 0x08,
	0x01, 0x8b, 0xe7, 0xf5, 0x02, 0x51, 0x8d, 0xcf, 0xfe, 0xdd, 0x02, 0xd1, 0xe7, 0xb1, 0x98, 0x77,
	0xde, 0xe2, 0xcf, 0x5e, 0xb7, 0x3d, 0x92, 0xa9, 0x2c, 0x18, 0x33, 0x3f, 0x6d, 0x1f, 0x0c, 0x9c,
	0x9e, 0x6b, 0xe3, 0xa1, 0x6e, 0x78, 0xc0, 0xdf, 0xc3, 0xe8, 0x0d, 0xd3, 0x0b, 0x8d, 0xed, 0x2a,
	0x26, 0x5b, 0x3c, 0xd9, 0x3a, 0x92, 0x9d, 0xbf, 0x47, 0x39, 0x76, 0xdf, 0xed, 0xf1, 0x4b, 0x83,
	0xb8, 0x25, 0x49, 0xec, 0xb6, 0x30, 0xb7, 0xdb, 0x9e, 0xf2, 0x76, 0x5b, 0x79, 0xe7, 0x7a, 0xd6,
	0xbf, 0x73, 0xd5, 0x58, 0x78, 0x0f, 0x87, 0x57, 0x3c, 0xac, 0x71, 0x19, 0x75, 0x7d, 0xd4, 0x3d,
	0x20, 0x74, 0x28, 0xe3, 0xd7, 0x66, 0x76, 0x77, 0xe6, 0x76, 0xe5, 0x63, 0x99, 0xa4, 0xb9, 0x07,
	0xbd, 0x07, 0x8f, 0x3c, 0xe8, 0xf9, 0xa7, 0xe9, 0xd5, 0x3b, 0x9c, 0xa6, 0x1f, 0xa2, 0xa7, 0xe9,
	0xcd, 0x45, 0x86, 0x96, 0x22, 0x83, 0xf2, 0x0f, 0xc4, 0xd9, 0xca, 0xbc, 0x25, 0xdd, 0x26, 0x2a,
	0xcf, 0xaa, 0x20, 0x55, 0x78, 0x86, 0x47, 0xee, 0x60, 0x84, 0x47, 0xa2, 0xd4, 0x87, 0x59, 0x5c,
	0x48, 0xd8, 0x4b, 0xf1, 0x02, 0xe3, 0x2b, 0xf8, 0xc0, 0x76, 0x47, 0x98, 0x14, 0x95, 0x03, 0xcb,
	0x49, 0x4b, 0xb2, 0x70, 0xdf, 0x1d, 0x5e, 0x93, 0xa1, 0xdf, 0xc3, 0x77, 0xfa, 0x54, 0xc5, 0x1d,
	0x5e, 0xb3, 0x78, 0x4e, 0xf4, 0xa9, 0xee, 0x60, 0xac, 0xe2, 0x58, 0xe1, 0x37, 0xa9, 0x0a, 0x5b,
	0xf2, 0xa2, 0xa9, 0x24, 0xb9, 0xec, 0x7c, 0xc5, 0xf1, 0x48, 0x38, 0x76, 0x87, 0x48, 0x58, 0x7e,
	0x9a, 0x86, 0x2d, 0x77, 0x89, 0x84, 0xc5, 0xba, 0x51, 0x91, 0xf0, 0xe7, 0xb0, 0x30, 0xb6, 0x19,
	0x87, 0x17, 0x3b, 0x2d, 0x87, 0x17, 0x7b, 0xfc, 0x18, 0x5b, 0xe6, 0xef, 0x06, 0xea, 0xfb, 0x41,
	0xde, 0x83, 0x79, 0x25, 0x7f, 0xef, 0xb5, 0xfb, 0xfd, 0x3d, 0xbb, 0x7b, 0x4d, 0xba, 0x5a, 0xc5,
	0xab, 0xaf, 0x8d, 0x7c, 0x2a, 0x51, 0xf6, 0x93, 0xf3, 0x51, 0xf6, 0x33, 0xef, 0x3a, 0xab, 0x47,
	0xc3, 0xec, 0x3c, 0x0d, 0xb3, 0xef, 0x51, 0x74, 0x2e, 0xce, 0x7e, 0x72, 0x3e, 0xce, 0xbe, 0x47,
	0xd1, 0x23, 0xc1, 0x77, 0x61, 0x2e, 0xf8, 0x5e, 0xbb, 0x7b, 0x59, 0x1a, 0x7d, 0x2b, 0xb3, 0x8a,
	0xde, 0xaf, 0x59, 0xad, 0x3e, 0xcf, 0x8b, 0xd7, 0x31, 0x54, 0xc0, 0x13, 0xa9, 0x17, 0x2a, 0xe0,
	0x51, 0xf3, 0x58, 0x78, 0xbb, 0xba, 0xe7, 0x85, 0xf0, 0xcf, 0x91, 0x91, 0x45, 0xf8, 0x88, 0xa3,
	0xb9, 0x6d, 0xd0, 0x7e, 0xdc, 0x1a, 0xee, 0x12, 0xc6, 0xaf, 0x8e, 0x8f, 0x04, 0xe2, 0xa1, 0xfb,
	0x0f, 0xc4, 0xc3, 0xaa, 0xa5, 0xb8, 0x53, 0xf5, 0xed, 0x3d, 0xc7, 0xfb, 0xaa, 0x80, 0xf9, 0xe0,
	0xc7, 0x7b, 0x34, 0x5c, 0x7d, 0x86, 0xf7, 0x94, 0x93, 0x60, 0xd1, 0xeb, 0xf6, 0x74, 0x36, 0xb3,
	0x0f, 0x64, 0x31, 0x0f, 0x8f, 0xc6, 0xf5, 0x2f, 0x09, 0xb0, 0x25, 0xba, 0x42, 0x3e, 0x89, 0xb8,
	0x3e, 0xc3, 0x5f, 0xa6, 0xae, 0x8e, 0x7a, 0xf2, 0xf0, 0x7f, 0xf7, 0xb0, 0x5e, 0xe6, 0xf5, 0x86,
	0x30, 0xa4, 0x86, 0x70, 0x7d, 0x9d, 0x45, 0xe5, 0x3f, 0xf7, 0x78, 0x78, 0x89, 0xf1, 0xde, 0x0c,
	0x4e, 0x68, 0x71, 0x16, 0xb1, 0x9c, 0xa9, 0x33, 0x13, 0xd1, 0x7d, 0x6d, 0x34, 0x74, 0x20, 0xb8,
	0xbe, 0xca, 0xc2, 0xd5, 0x51, 0xcf, 0xe1, 0xf1, 0x7e, 0x79, 0xd7, 0x14, 0x67, 0x80, 0x96, 0xd9,
	0x6c, 0x41, 0x60, 0xbd, 0xcd, 0x98, 0xff, 0xd2, 0xae, 0x2d, 0xb3, 0xb8, 0x77, 0x56, 0x68, 0xc0,
	0x09, 0x0c, 0x6b, 0xcb, 0x0d, 0xbd, 0x52, 0x2f, 0x1a, 0xad, 0x32, 0x3f, 0x31, 0x2c, 0xb2, 0x68,
	0xcd, 0x6c, 0x37, 0x5b, 0x86, 0x25, 0x42, 0xd9, 0xaa, 0x71, 0xb9, 0x5a, 0xae, 0x95, 0x20, 0x84,
	0x25, 0x6b, 0x66, 0xcb, 0x28, 0xb6, 0xcb, 0xad, 0x2b, 0x10, 0x5e, 0xdf, 0x64, 0x51, 0xf9, 0x0f,
	0x01, 0x52, 0xe7, 0x36, 0x46, 0xc6, 0x51, 0x16, 0xda, 0x6e, 0x34, 0x21, 0x80, 0xfa, 0x72, 0xc3,
	0x28, 0x95, 0x2c, 0xb3, 0xd9, 0x84, 0x20, 0x46, 0xee, 0x18, 0xe1, 0x37, 0xac, 0x3a, 0x9e, 0x10,
	0x4a, 0x10, 0x5a, 0x7f, 0x4b, 0x80, 0x1f, 0x45, 0xc8, 0xbf, 0x2e, 0x48, 0x5d, 0x45, 0xac, 0x6b,
	0x89, 0xc5, 0xcc, 0x9d, 0x96, 0x69, 0xd5, 0xcc, 0x96, 0xe8, 0xf0, 0xa5, 0xf2, 0x56, 0x19, 0x82,
	0xfc, 0x84, 0x62, 0x56, 0x2a, 0xed, 0x8a, 0xd1, 0xea, 0xd4, 0xcc, 0xd6, 0xa5, 0xba, 0x75, 0xb1,
	0x23, 0xcb, 0x41, 0x08, 0x03, 0xfd, 0x63, 0xa9, 0xfa, 0x36, 0x84, 0x6f, 0x9b, 0x90, 0xde, 0x86,
	0xc8, 0x6d, 0x13, 0x32, 0xdb, 0xb0, 0xb0, 0xfe, 0x86, 0x00, 0x63, 0xfe, 0xbf, 0x71, 0x48, 0xf3,
	0x4a, 0xd8, 0xbc, 0x53, 0x6c, 0xb9, 0x5a, 0xdf, 0x2c, 0x57, 0xcc, 0x4e, 0xcb, 0xd8, 0xac, 0xf0,
	0x36, 0x9e, 0x65, 0xa7, 0x1a, 0xa6, 0xd5, 0xac, 0xd7, 0xf0, 0x3c, 0x52, 0xaf, 0x36, 0xda, 0x2d,
	0xd3, 0x12, 0x9d, 0x2f, 0xd6, 0x6b, 0x35, 0xb3, 0xd8, 0x32, 0x4b, 0x9d, 0xd6, 0x2e, 0x84, 0x70,
	0x22, 0x1b, 0x3b, 0xf5, 0x9a, 0x09, 0x61, 0x9c, 0x5f, 0x59, 0x3e, 0xa2, 0x9d, 0x61, 0xe0, 0x67,
	0x2c, 0x99, 0xbb, 0xe5, 0xa2, 0x09, 0x0b, 0x38, 0x4f, 0x4d, 0xb3, 0xd5, 0x69, 0xd5, 0x1b, 0x9d,
	0xcd, 0xfa, 0x65, 0x88, 0xae, 0xbf, 0x3f, 0xc0, 0x62, 0x5e, 0xa4, 0x80, 0xa3, 0x24, 0x5b, 0xd5,
	0x10, 0x63, 0xb6, 0x6b, 0x34, 0x5b, 0x9d, 0x54, 0x27, 0x09, 0x01, 0x45, 0x7a, 0x27, 0x09, 0x41,
	0x45, 0xe9, 0x4e, 0x12, 0x42, 0xf8, 0x2d, 0x2f, 0x67, 0xe7, 0x92, 0x65, 0x34, 0x1a, 0xa6, 0x05,
	0x61, 0xa5, 0xd5, 0x89, 0x36, 0xa2, 0xb4, 0x69, 0xa2, 0x5d, 0x50, 0xf5, 0x65, 0x3a, 0x49, 0x88,
	0xaa, 0x3c, 0x19, 0x92, 0x27, 0x86, 0x63, 0x56, 0x32, 0xbc, 0x06, 0xc5, 0x71, 0x80, 0x14, 0xaa,
	0x5c, 0x6c, 0x7d, 0xcc, 0xce, 0xde, 0xf6, 0xcd, 0x05, 0x8d, 0xd0, 0x9b, 0xd9, 0x13, 0xda, 0x39,
	0xa6, 0xe1, 0xa0, 0x56, 0x4c, 0x34, 0x57, 0x3c, 0x94, 0xa2, 0x45, 0x41, 0x00, 0xcf, 0x7b, 0x15,
	0xd3, 0xd8, 0x2d, 0xd7, 0xb6, 0x95, 0x32, 0xa8, 0x3d, 0xc2, 0x1e, 0xf4, 0x94, 0x78, 0x54, 0x2b,
	0xd7, 0xda, 0x66, 0x53, 0x25, 0x87, 0xd6, 0xdf, 0x19, 0x60, 0xda, 0xf1, 0x37, 0x22, 0x2c, 0xd5,
	0xae, 0x95, 0xcc, 0xad, 0x72, 0xcd, 0x2c, 0x89, 0xb3, 0x6c, 0x87, 0x9f, 0x13, 0xab, 0x78, 0xd4,
	0x3b, 0x81, 0x96, 0x52, 0xae, 0x75, 0x9a, 0x2d, 0xcb, 0x34, 0xaa, 0x24, 0x21, 0x20, 0x13, 0x36,
	0x8d, 0x5a, 0xcd, 0xb4, 0x48, 0x42, 0x50, 0x4b, 0xb0, 0x33, 0xe5, 0x9a, 0x77, 0x54, 0x26, 0x29,
	0x21, 0x1c, 0x8a, 0x72, 0xad, 0xb3, 0x65, 0x9a, 0x25, 0xa2, 0x0e, 0x63, 0x27, 0xb7, 0x2a, 0x75,
	0xa3, 0x85, 0x0d, 0xf7, 0xf5, 0x91, 0xf5, 0x8b, 0x6c, 0x79, 0xee, 0x4a, 0x98, 0x9e, 0xdb, 0x1b,
	0xd8, 0x36, 0xf4, 0x13, 0x2d, 0xa3, 0x55, 0x2e, 0x8a, 0xb5, 0xb2, 0xd3, 0xaa, 0xe2, 0x81, 0x94,
	0x5b, 0x54, 0xb5, 0x61, 0xd4, 0x70, 0xc8, 0xca, 0x5b, 0x96, 0x51, 0x35, 0x21, 0xb4, 0x7e, 0x8d,
	0x2d, 0xd1, 0xb8, 0x94, 0x1c, 0x70, 0x51, 0x2d, 0x0e, 0xb8, 0xbb, 0x0d, 0xa3, 0x5c, 0xea, 0xa4,
	0x84, 0x5b, 0x10, 0xa0, 0x4b, 0xb7, 0x60, 0x89, 0x14, 0x6e, 0xc6, 0x75, 0xab, 0x5a, 0x35, 0x20,
	0xec, 0xeb, 0x75, 0x88, 0xf8, 0x90, 0x86, 0x85, 0xf5, 0xb7, 0x07, 0x18, 0xf3, 0xdf, 0x99, 0x48,
	0xbb, 0x8d, 0x12, 0x5a, 0xac, 0xc6, 0x56, 0x8c, 0xcd, 0xfa, 0xae, 0xd9, 0x69, 0xed, 0x98, 0x9d,
	0xad, 0x7a, 0xa5, 0x04, 0x01, 0xed, 0x31, 0x76, 0xbe, 0x64, 0x36, 0x2c, 0xb3, 0x68, 0xe0, 0x42,
	0xa8, 0x94, 0x2f, 0x9a, 0x95, 0x2b, 0x9d, 0x4d, 0xb3, 0x52, 0xbf, 0xe4, 0xe7, 0x0a, 0x62, 0xc9,
	0x23, 0xba, 0x10, 0x8e, 0xc2, 0x8e, 0x69, 0x94, 0xb8, 0x2d, 0x33, 0xb6, 0xb0, 0x55, 0xaf, 0xb7,
	0xb8, 0x05, 0x2f, 0xb2, 0x68, 0xb3, 0x5c, 0x32, 0x37, 0x0d, 0x34, 0xdc, 0x55, 0x76, 0xce, 0x28,
	0x75, 0x1a, 0xf5, 0x66, 0x99, 0x5b, 0xd2, 0x56, 0xbb, 0x52, 0x69, 0x16, 0x2d, 0xd3, 0xac, 0x41,
	0x74, 0x7d, 0x9b, 0x9d, 0xbd, 0xed, 0xbb, 0x00, 0x1d, 0xef, 0x52, 0x15, 0x4e, 0xa0, 0x65, 0x0b,
	0x43, 0x28, 0xd7, 0xb6, 0x21, 0x80, 0x43, 0xd8, 0xb0, 0xea, 0xdb, 0xe8, 0xee, 0xd0, 0x09, 0x07,
	0xd7, 0xdf, 0x1d, 0x62, 0xa7, 0x8e, 0x9d, 0x17, 0xa8, 0x8b, 0x33, 0xe0, 0x04, 0x9a, 0x2e, 0xbf,
	0x1e, 0xe9, 0x18, 0xed, 0x16, 0x37, 0xb5, 0x2b, 0x10, 0x40, 0x9b, 0x11, 0x4a, 0x7e, 0x27, 0x52,
	0xae, 0x95, 0x5b, 0x65, 0x7e, 0x27, 0xc2, 0xad, 0xc9, 0xbc, 0xdc, 0x30, 0x6a, 0x25, 0x74, 0x18,
	0xbc, 0x4c, 0x95, 0xcf, 0x78, 0x48, 0x7b, 0x94, 0xad, 0x92, 0x94, 0x62, 0xa5, 0x5c, 0xbc, 0x48,
	0x4a, 0x86, 0xb5, 0x67, 0xb0, 0x47, 0x48, 0xba, 0x55, 0xaf, 0x54, 0xea, 0xbb, 0x73, 0x95, 0x47,
	0xd0, 0xf6, 0x85, 0xc5, 0xfb, 0x96, 0xec, 0xb7, 0x6a, 0x41, 0x5b, 0x63, 0x8f, 0x1e, 0x4d, 0x3e,
	0xd2, 0xbe, 0x28, 0x7a, 0xff, 0x46, 0xbd, 0x01, 0x31, 0xac, 0x0b, 0x5d, 0x3d, 0xdf, 0x5a, 0x76,
	0x4d, 0x5c, 0x77, 0xcd, 0xf6, 0xf6, 0xb6, 0xd9, 0x44, 0x82, 0x38, 0x7a, 0x0e, 0xa3, 0x56, 0xab,
	0x5f, 0xc1, 0xa1, 0x63, 0x7c, 0x6e, 0xda, 0xd6, 0xae, 0x79, 0xa5, 0x09, 0x8b, 0x38, 0x40, 0x2d,
	0xf3, 0x72, 0xab, 0x53, 0xaf, 0x55, 0xae, 0xc0, 0x12, 0xda, 0xaf, 0xfc, 0x4a, 0xcb, 0xb4, 0x8c,
	0x22, 0x2f, 0xbf, 0x8c, 0xbd, 0xb9, 0x54, 0xae, 0x95, 0xea, 0x97, 0x9a, 0x9d, 0x52, 0xd9, 0xa8,
	0xd4, 0xf9, 0xc2, 0x37, 0x2a, 0xa6, 0xd5, 0xea, 0x34, 0x5b, 0x57, 0x2a, 0x26, 0xac, 0x68, 0x0f,
	0xb1, 0x07, 0x76, 0x8c, 0xa6, 0xb8, 0x7c, 0xea, 0xa0, 0xbb, 0xd8, 0xda, 0xea, 0x6c, 0xb6, 0x5b,
	0xad, 0x7a, 0x0d, 0x4e, 0xe2, 0xda, 0x33, 0x4a, 0x9d, 0xa2, 0x51, 0xeb, 0x6c, 0x9a, 0x9d, 0xe6,
	0xc5, 0x72, 0xa3, 0x61, 0x96, 0x00, 0xd0, 0x9c, 0xb7, 0x2a, 0x46, 0x73, 0x07, 0x4e, 0xad, 0xbf,
	0x29, 0xc0, 0x56, 0xe6, 0x5f, 0xee, 0xc9, 0xd4, 0x35, 0xaa, 0xc2, 0x1b, 0xa9, 0xe1, 0xe9, 0x34,
	0xeb, 0xed, 0x5a, 0xa9, 0xc3, 0x37, 0xd1, 0x07, 0xd8, 0xe9, 0x63, 0xfa, 0xad, 0x2d, 0x08, 0xf2,
	0xfb, 0x2f, 0x3e, 0x2f, 0xde, 0x98, 0x86, 0xd0, 0xa6, 0xaa, 0xf5, 0x76, 0xd3, 0xec, 0xe0, 0x64,
	0x40, 0x18, 0x2d, 0xda, 0xc4, 0x8e, 0xfa, 0xf5, 0x45, 0xd0, 0x44, 0xe6, 0x74, 0x5b, 0x5b, 0xb0,
	0xb0, 0xfe, 0x24, 0x5b, 0x99, 0xff, 0x9b, 0x09, 0x69, 0xdd, 0x6e, 0x45, 0x78, 0x83, 0x4a, 0xb9,
	0x66, 0x1a, 0xe8, 0x1f, 0x57, 0x18, 0xab, 0xd5, 0x6b, 0x1d, 0xc9, 0xc1, 0xf5, 0x7d, 0x76, 0xfa,
	0x36, 0x8f, 0xa7, 0xa4, 0x06, 0xb3, 0x24, 0x82, 0x88, 0x8a, 0xb9, 0x85, 0xce, 0x0d, 0xa3, 0x8e,
	0xf2, 0xf6, 0x0e, 0xba, 0xb3, 0x05, 0x16, 0x6c, 0x37, 0x20, 0x84, 0x89, 0x25, 0x74, 0xca, 0x61,
	0xed, 0x41, 0x76, 0x96, 0x18, 0x16, 0x59, 0x4a, 0x91, 0xf5, 0x7d, 0xb6, 0x44, 0x9f, 0x8d, 0x89,
	0x97, 0xd9, 0x34, 0xbc, 0x1d, 0xf4, 0x32, 0xfa, 0xa9, 0x0e, 0x9f, 0x71, 0xa3, 0x24, 0x7c, 0xb9,
	0x50, 0x79, 0x16, 0x58, 0x12, 0x23, 0xf7, 0x94, 0xb1, 0x6b, 0x34, 0x8b, 0x56, 0xb9, 0xc1, 0xf3,
	0xf1, 0x75, 0x2e, 0xbd, 0x59, 0x78, 0xdd, 0x65, 0x0f, 0xdc, 0xe1, 0x75, 0x8a, 0x47, 0x49, 0xb8,
	0xcd, 0x0a, 0x37, 0xb3, 0x6b, 0x5a, 0xc6, 0xb6, 0xd9, 0xd9, 0xad, 0x57, 0xda, 0x55, 0x53, 0xae,
	0x59, 0xd3, 0xb8, 0xe8, 0x29, 0xf8, 0x0e, 0x59, 0xa9, 0xb7, 0x4b, 0x35, 0x8c, 0x59, 0x42, 0x7c,
	0xc2, 0xda, 0xcd, 0x56, 0xbd, 0xea, 0x65, 0x08, 0xaf, 0xef, 0xb0, 0x98, 0xf7, 0x96, 0x46, 0xc6,
	0x6b, 0xcb, 0x0b, 0x07, 0xda, 0xcd, 0x72, 0xb1, 0xd3, 0x34, 0x2d, 0xbe, 0x71, 0xf3, 0x18, 0x68,
	0xd3, 0xaa, 0x1b, 0xa5, 0xa2, 0xd1, 0x6c, 0xc9, 0xcb, 0xc1, 0xba, 0x80, 0xd0, 0xfa, 0xe7, 0xb2,
	0xe5, 0xf9, 0xad, 0x87, 0x98, 0x97, 0xbc, 0x62, 0x94, 0xdb, 0x83, 0x68, 0xa8, 0xd1, 0xaa, 0x57,
	0xcb, 0xc5, 0x4e, 0xbb, 0x56, 0x96, 0x55, 0xd5, 0xdb, 0x2d, 0xf4, 0x68, 0x10, 0xc2, 0xae, 0x59,
	0x66, 0xb1, 0x5e, 0xad, 0x9a, 0xb5, 0x92, 0x08, 0xe5, 0xc2, 0xeb, 0x7d, 0x16, 0x57, 0xc1, 0x29,
	0x9d, 0x59, 0xac, 0x7a, 0x85, 0xb1, 0x72, 0xb5, 0xc1, 0x3d, 0x15, 0xb7, 0xd8, 0xd3, 0xec, 0xe4,
	0x6e, 0xd9, 0xbc, 0xc4, 0x27, 0xb0, 0x6a, 0x15, 0x3b, 0xd9, 0xa4, 0xd8, 0x38, 0xe6, 0x94, 0xa9,
	0x64, 0x52, 0x6c, 0x5a, 0x4a, 0x2b, 0xbc, 0x41, 0x36, 0x09, 0xe1, 0xf5, 0x1c, 0x3b, 0x7d, 0x9b,
	0xf8, 0x96, 0xb8, 0x4c, 0xb3, 0x55, 0x15, 0xc1, 0x61, 0xb9, 0x8a, 0xce, 0x72, 0x81, 0x05, 0x9f,
	0x6a, 0x42, 0x70, 0xbd, 0xc6, 0x16, 0xc9, 0x25, 0x1f, 0xf6, 0xaa, 0x64, 0x6e, 0x19, 0xed, 0x4a,
	0x4b, 0x44, 0xa7, 0x5b, 0x65, 0xab, 0xd9, 0xea, 0x34, 0x2c, 0x31, 0x9a, 0xc0, 0x96, 0x9a, 0x66,
	0xb1, 0x5e, 0x2b, 0x49, 0x4d, 0x50, 0x64, 0xb9, 0x6c, 0x7a, 0x8a, 0xd0, 0xfa, 0x87, 0x3f, 0x9d,
	0x9d, 0x3c, 0xf2, 0xf7, 0x75, 0xd1, 0x79, 0xb9, 0xa5, 0xcb, 0xfb, 0x71, 0x63, 0x33, 0x25, 0xee,
	0x6d, 0x51, 0x6a, 0xa6, 0x20, 0xa8, 0x64, 0x5d, 0x9a, 0x16, 0xca, 0x69, 0xb1, 0x85, 0x70, 0x39,
	0x03, 0x11, 0x25, 0x67, 0x61, 0x41, 0xc9, 0x39, 0x88, 0x2a, 0x39, 0x0f, 0x31, 0x59, 0xbb, 0x0e,
	0x71, 0xa9, 0xd5, 0x9b, 0x29, 0x60, 0x4a, 0xd6, 0x61, 0x51, 0xc9, 0x69, 0x58, 0x52, 0x72, 0x06,
	0x96, 0x95, 0x9c, 0x85, 0x15, 0x25, 0xe7, 0xe0, 0xa4, 0x92, 0xf3, 0x00, 0x4a, 0x2e, 0xc0, 0x29,
	0x25, 0x6f, 0x80, 0xc6, 0x6d, 0x85, 0x7f, 0x2b, 0x09, 0xa7, 0x7d, 0x48, 0xc1, 0x19, 0x1f, 0x74,
	0x38, 0xeb, 0x43, 0x1a, 0xce, 0xf9, 0x90, 0x81, 0x07, 0x7c, 0xc8, 0x42, 0xc2, 0x87, 0x1c, 0x3c,
	0xe8, 0x43, 0x1e, 0x56, 0x7d, 0x28, 0xc0, 0x43, 0x3e, 0x6c, 0xc0, 0xc3, 0x0a, 0xf4, 0x24, 0x3c,
	0xe2, 0x43, 0x0a, 0x1e, 0xf5, 0x41, 0x87, 0x4f, 0xf3, 0x21, 0x0d, 0xe7, 0xe5, 0x58, 0xa5, 0xe1,
	0x19, 0xb2, 0x2f, 0xe9, 0x66, 0x0a, 0xd6, 0x94, 0xac, 0xc3, 0x33, 0x95, 0x9c, 0x86, 0xc7, 0x94,
	0x9c, 0x81, 0x67, 0x29, 0x39, 0x0b, 0xcf, 0x56, 0x72, 0x0e, 0x1e, 0x57, 0x72, 0x1e, 0x2e, 0x28,
	0xb9, 0x00, 0x9f, 0xae, 0xe4, 0x0d, 0x58, 0x97, 0x4d, 0x48, 0xe3, 0x58, 0x3d, 0xc7, 0x87, 0x14,
	0x3c, 0xd7, 0x07, 0x1d, 0x9e, 0x27, 0x1b, 0x97, 0x81, 0x27, 0x64, 0xe1, 0x4c, 0x33, 0x05, 0x9f,
	0xa1, 0x64, 0x1d, 0x92, 0x4a, 0x4e, 0x43, 0x4a, 0xc9, 0x19, 0xd0, 0x95, 0x9c, 0x85, 0xb4, 0x92,
	0x73, 0x90, 0x51, 0x72, 0x1e, 0xb2, 0x4a, 0x2e, 0x40, 0x4e, 0xc9, 0x1b, 0x90, 0x97, 0x4d, 0xc8,
	0x60, 0xe3, 0x0a, 0x3e, 0xa4, 0x60, 0x43, 0xb6, 0x27, 0x0b, 0xcf, 0x97, 0xf9, 0xb3, 0xcd, 0x14,
	0x3c, 0xa9, 0x64, 0x1d, 0x5e, 0xa0, 0xe4, 0x34, 0xfc, 0x27, 0x25, 0x67, 0xe0, 0x33, 0x95, 0x9c,
	0x85, 0xcf, 0x52, 0x72, 0x0e, 0x3e, 0x5b, 0xc9, 0x79, 0x30, 0x94, 0x5c, 0x80, 0x4d, 0x25, 0x6f,
	0x40, 0x51, 0x36, 0x21, 0x8b, 0xed, 0x29, 0xf9, 0x90, 0x02, 0xd3, 0x07, 0x1d, 0xb6, 0x7c, 0x48,
	0xc3, 0xb6, 0x0f, 0x19, 0xd8, 0xf1, 0x21, 0x0b, 0x65, 0xd9, 0x87, 0x1c, 0x3c, 0x25, 0xbf, 0x91,
	0x6b, 0xa6, 0xe0, 0xa2, 0x92, 0x75, 0xa8, 0x28, 0x39, 0x0d, 0x55, 0x25, 0x67, 0xa0, 0xa6, 0xe4,
	0x2c, 0xd4, 0x95, 0x9c, 0x83, 0x86, 0x92, 0xf3, 0xf0, 0x42, 0x25, 0x17, 0xc0, 0x52, 0xf2, 0x06,
	0x34, 0xe5, 0x57, 0xf3, 0xd0, 0x92, 0xda, 0x7c, 0x33, 0x05, 0x6d, 0x25, 0xeb, 0xb0, 0xab, 0xe4,
	0x34, 0x5c, 0x52, 0x72, 0x06, 0x2e, 0x2b, 0x39, 0x0b, 0x57, 0x94, 0x9c, 0x83, 0xcf, 0x51, 0x72,
	0x1e, 0xfe, 0xb3, 0x92, 0x0b, 0xf0, 0x5f, 0x94, 0xbc, 0x01, 0x9f, 0x2b, 0x3b, 0x9e, 0xc7, 0x91,
	0xfb, 0xaf, 0x3e, 0xa4, 0xa0, 0xe3, 0x83, 0x0e, 0xff, 0xcd, 0x87, 0x34, 0xd8, 0x3e, 0x64, 0x60,
	0xcf, 0x87, 0x2c, 0x74, 0x7d, 0xc8, 0x41, 0xcf, 0x87, 0x3c, 0x38, 0x3e, 0x14, 0x60, 0xdf, 0x87,
	0x0d, 0x38, 0x50, 0xa0, 0x27, 0xe1, 0xaa, 0x0f, 0x29, 0x70, 0x7d, 0xd0, 0xe1, 0x45, 0x3e, 0xa4,
	0xe1, 0x9a, 0x0f, 0x19, 0xe8, 0xfb, 0x90, 0x85, 0x81, 0x0f, 0x39, 0x18, 0xfa, 0x90, 0x87, 0x91,
	0x0f, 0x05, 0x18, 0xfb, 0xb0, 0x01, 0x4f, 0x2b, 0x48, 0x27, 0x61, 0xe2, 0x43, 0x0a, 0xa6, 0x3e,
	0xe8, 0x30, 0xf3, 0x21, 0x0d, 0x87, 0x3e, 0x64, 0xe0, 0xba, 0x0f, 0x59, 0xb8, 0xe1, 0x43, 0x0e,
	0x6e, 0xfa, 0x90, 0x87, 0x5b, 0x3e, 0x14, 0xe0, 0xc5, 0x3e, 0x6c, 0xc0, 0x7f, 0x57, 0x90, 0x49,
	0xc2, 0xff, 0xf0, 0x21, 0x05, 0xff, 0xd3, 0x07, 0x1d, 0xfe, 0x97, 0x0f, 0x69, 0xf8, 0xdf, 0xda,
	0x92, 0x07, 0x19, 0x78, 0x49, 0xc0, 0xa7, 0x2c, 0xbc, 0x14, 0x23, 0x21, 0xb4, 0xa5, 0x02, 0xbc,
	0x0c, 0x0f, 0x45, 0x38, 0xd9, 0x85, 0x66, 0x0a, 0x5e, 0xee, 0x83, 0x0e, 0xaf, 0xf0, 0x21, 0x0d,
	0xaf, 0xf4, 0x21, 0x03, 0xaf, 0xf2, 0x21, 0x0b, 0xaf, 0xf6, 0x21, 0x07, 0xaf, 0xf1, 0x21, 0x0f,
	0xaf, 0xf5, 0xa1, 0x00, 0x9f, 0xe7, 0xc3, 0x06, 0x7c, 0xbe, 0xd7, 0x9a, 0x02, 0x5a, 0xd5, 0x17,
	0x10, 0x4a, 0xc1, 0xeb, 0x08, 0xe9, 0xf0, 0x85, 0x84, 0xd2, 0xf0, 0x45, 0x84, 0x32, 0xf0, 0xc5,
	0x84, 0xb2, 0xf0, 0x25, 0x84, 0x72, 0xf0, 0xa5, 0x84, 0xf2, 0xf0, 0x7a, 0x42, 0x05, 0xf8, 0x32,
	0xaf, 0xf7, 0x1b, 0xf0, 0x06, 0xaf, 0x55, 0x1b, 0xcd, 0x14, 0x7c, 0xb9, 0x0f, 0x3a, 0xbc, 0xd1,
	0x87, 0x34, 0x7c, 0x85, 0x0f, 0x19, 0xf8, 0x4a, 0x1f, 0xb2, 0xf0, 0x55, 0x3e, 0xe4, 0xe0, 0xab,
	0x7d, 0xc8, 0xc3, 0x9b, 0x7c, 0x28, 0xc0, 0xd7, 0xf8, 0xb0, 0x01, 0x5f, 0xeb, 0xb5, 0x66, 0x03,
	0x7b, 0xff, 0x66, 0x42, 0x29, 0x78, 0x0b, 0x21, 0x1d, 0xbe, 0x8e, 0x50, 0x1a, 0xbe, 0x9e, 0x50,
	0x06, 0xbe, 0x81, 0x50, 0x16, 0xde, 0x4a, 0x28, 0x07, 0xdf, 0x48, 0x28, 0x0f, 0xdf, 0x44, 0xa8,
	0x00, 0xdf, 0x4c, 0x68, 0x03, 0xde, 0xe6, 0x93, 0x9e, 0x84, 0x6f, 0x21, 0x94, 0x82, 0x6f, 0x25,
	0xa4, 0xc3, 0xdb, 0x09, 0xa5, 0xe1, 0x1d, 0x84, 0x32, 0xf0, 0x6d, 0x84, 0xb2, 0xf0, 0x4e, 0x42,
	0x39, 0xf8, 0x76, 0x42, 0x79, 0xf8, 0x0e, 0x42, 0x05, 0xf8, 0x4e, 0x42, 0x1b, 0xf0, 0x5d, 0x3e,
	0xa5, 0x93, 0xf0, 0xdd, 0x84, 0x52, 0xf0, 0x3d, 0x18, 0xe4, 0x44, 0x78, 0x70, 0x02, 0xdf, 0xeb,
	0xa5, 0xa4, 0x9a, 0xc9, 0x14, 0x7c, 0x1f, 0x21, 0x1d, 0xbe, 0x9f, 0x50, 0x1a, 0x7e, 0x80, 0x50,
	0x06, 0x7e, 0x90, 0x50, 0x16, 0xde, 0x45, 0x28, 0x07, 0xef, 0x26, 0x94, 0x87, 0x1f, 0x22, 0x54,
	0x80, 0x1f, 0x26, 0xb4, 0x01, 0x3f, 0xa2, 0x5a, 0x92, 0x82, 0x1f, 0x55, 0x29, 0xa9, 0x64, 0x0a,
	0x7e, 0x8c, 0x90, 0x0e, 0x3f, 0x4e, 0x28, 0x0d, 0x3f, 0x41, 0x28, 0x03, 0x3f, 0x49, 0x28, 0x0b,
	0x3f, 0xa5, 0x6a, 0xd4, 0xe1, 0xa7, 0x55, 0x8a, 0x9e, 0x4c, 0xc1, 0xcf, 0x10, 0xd2, 0xe1, 0x67,
	0x09, 0xa5, 0xe1, 0xe7, 0x54, 0xa9, 0x34, 0xbc, 0x47, 0xa5, 0xa4, 0x93, 0x29, 0xf8, 0x79, 0x42,
	0x3a, 0xbc, 0x97, 0x50, 0x1a, 0xde, 0x47, 0x28, 0x03, 0xbf, 0x40, 0x28, 0x0b, 0xef, 0x27, 0x94,
	0x83, 0x5f, 0x24, 0x94, 0x87, 0x5f, 0x22, 0x54, 0x80, 0x5f, 0x26, 0xb4, 0x01, 0x1f, 0xc0, 0xe3,
	0x41, 0x4c, 0x7e, 0x3d, 0x09, 0xbf, 0x42, 0x31, 0x05, 0xbf, 0x4a, 0x51, 0x87, 0x0f, 0xaa, 0x66,
	0x67, 0xe0, 0x43, 0xaa, 0x9a, 0x4c, 0x32, 0x05, 0xbf, 0x46, 0x48, 0x87, 0x5f, 0x27, 0x94, 0x86,
	0xdf, 0x20, 0x94, 0x81, 0x0f, 0x13, 0xca, 0xc2, 0x6f, 0x12, 0xca, 0xc1, 0x6f, 0x11, 0xca, 0xc3,
	0x47, 0x08, 0x15, 0xe0, 0xa3, 0xea, 0xdb, 0x59, 0xf8, 0x6d, 0x95, 0x92, 0x4d, 0xa6, 0xe0, 0x77,
	0x08, 0xe9, 0xf0, 0x31, 0x42, 0x69, 0xf8, 0x5d, 0x42, 0x19, 0xf8, 0x38, 0xa1, 0x2c, 0xfc, 0x1e,
	0xa1, 0x1c, 0xfc, 0x3e, 0xa1, 0x3c, 0xfc, 0x01, 0xa1, 0x02, 0xfc, 0x21, 0xa1, 0x0d, 0xf8, 0x23,
	0x35, 0x28, 0x59, 0x1c, 0xb2, 0x4f, 0xa8, 0x86, 0xe5, 0xe0, 0x8f, 0x55, 0xc6, 0x5c, 0x32, 0x05,
	0x7f, 0x42, 0x48, 0x87, 0x3f, 0x25, 0x94, 0x86, 0x3f, 0x23, 0x94, 0x81, 0x3f, 0x27, 0x94, 0x85,
	0xbf, 0x20, 0x94, 0x83, 0xbf, 0x24, 0x94, 0x87, 0xbf, 0x52, 0x5f, 0xcb, 0xc3, 0x5f, 0xab, 0x94,
	0x7c, 0x32, 0x05, 0x7f, 0x43, 0x48, 0x87, 0xbf, 0x25, 0x94, 0x86, 0xbf, 0x23, 0x94, 0x81, 0xbf,
	0x27, 0x94, 0x85, 0x7f, 0x20, 0x94, 0x83, 0x7f, 0x24, 0x94, 0x87, 0x7f, 0x22, 0x54, 0x80, 0x7f,
	0x26, 0xb4, 0x01, 0xff, 0xa2, 0x86, 0x21, 0x8f, 0xc3, 0xf0, 0xaf, 0x14, 0x53, 0xf0, 0x6f, 0x14,
	0x75, 0xf8, 0x77, 0x8a, 0x69, 0xf8, 0x0f, 0x8a, 0x19, 0x78, 0x49, 0x90, 0x60, 0x16, 0x5e, 0x4a,
	0x31, 0x07, 0x2f, 0xa3, 0x98, 0x87, 0x97, 0x53, 0x2c, 0xc0, 0x2b, 0x28, 0x6e, 0xc0, 0x2b, 0x09,
	0xea, 0x49, 0x78, 0x15, 0xc5, 0x14, 0xbc, 0x9a, 0xa2, 0x0e, 0xaf, 0xa1, 0x98, 0x86, 0xd7, 0x52,
	0xcc, 0xc0, 0xe7, 0x51, 0xcc, 0xc2, 0xe7, 0x53, 0xcc, 0xc1, 0x17, 0x50, 0xcc, 0xc3, 0xeb, 0x28,
	0x16, 0xe0, 0x0b, 0x29, 0x6e, 0xc0, 0x17, 0x11, 0x4c, 0x27, 0xe1, 0x8b, 0x29, 0xa6, 0xe0, 0x4b,
	0x28, 0xea, 0xf0, 0xa5, 0x14, 0xd3, 0xf0, 0x7a, 0x8a, 0x19, 0xf8, 0x32, 0x8a, 0x59, 0x78, 0x03,
	0xc5, 0x1c, 0x7c, 0x39, 0xc5, 0x3c, 0xbc, 0x91, 0x62, 0x01, 0xbe, 0x82, 0xe2, 0x06, 0x7c, 0x25,
	0xc1, 0x4c, 0x12, 0xbe, 0x8a, 0x62, 0x0a, 0xbe, 0x9a, 0xa2, 0x0e, 0x6f, 0xa2, 0x98, 0x86, 0xaf,
	0xa1, 0x98, 0x81, 0xaf, 0x0d, 0x7a, 0x66, 0x59, 0x80, 0x37, 0x07, 0x3d, 0x33, 0x29, 0x24, 0x53,
	0xf0, 0x16, 0x42, 0x3a, 0x7c, 0x1d, 0xa1, 0x34, 0x7c, 0x3d, 0xa1, 0x0c, 0x7c, 0x03, 0xa1, 0x2c,
	0xbc, 0x95, 0x50, 0x0e, 0xbe, 0x51, 0xd5, 0xbf, 0x01, 0xdf, 0xa4, 0x52, 0x36, 0x92, 0x29, 0xf8,
	0x66, 0x42, 0x3a, 0xbc, 0x8d, 0x50, 0x1a, 0xbe, 0x85, 0x50, 0x06, 0xbe, 0x95, 0x50, 0x16, 0xde,
	0x4e, 0x28, 0x07, 0xef, 0x20, 0x94, 0x87, 0x6f, 0x23, 0x54, 0x80, 0x77, 0x12, 0xda, 0x80, 0x6f,
	0x57, 0x1d, 0xdf, 0x40, 0xb3, 0xff, 0x0e, 0x8a, 0x29, 0xf8, 0x4e, 0x8a, 0x3a, 0x7c, 0x17, 0xc5,
	0x34, 0x7c, 0x37, 0xc5, 0x0c, 0x7c, 0x0f, 0xc5, 0x2c, 0x7c, 0x2f, 0xc5, 0x1c, 0x7c, 0x1f, 0xc5,
	0x3c, 0x7c, 0x3f, 0xc5, 0x02, 0xfc, 0x00, 0xc5, 0x0d, 0xf8, 0x41, 0x82, 0x7a, 0x12, 0xde, 0x45,
	0x31, 0x05, 0xef, 0xa6, 0xa8, 0xc3, 0x0f, 0x51, 0x4c, 0xc3, 0x0f, 0x53, 0xcc, 0xc0, 0x8f, 0x50,
	0xcc, 0xc2, 0x8f, 0x52, 0xcc, 0xc1, 0x8f, 0x51, 0xcc, 0xc3, 0x8f, 0x53, 0x2c, 0xc0, 0x4f, 0x50,
	0xdc, 0x80, 0x9f, 0x24, 0x98, 0x4e, 0xc2, 0x4f, 0x51, 0x4c, 0xc1, 0x4f, 0x53, 0xd4, 0xe1, 0x67,
	0x28, 0xa6, 0xe1, 0x67, 0x29, 0x66, 0xe0, 0xe7, 0x28, 0x66, 0xe1, 0x3d, 0x14, 0x73, 0xf0, 0xf3,
	0x9e, 0x79, 0xe8, 0x4d, 0x78, 0xaf, 0x37, 0x5d, 0x3a, 0x46, 0x18, 0xef, 0x23, 0xa4, 0xc3, 0x2f,
	0x10, 0x4a, 0xc3, 0xfb, 0x09, 0x65, 0xe0, 0x17, 0x09, 0x65, 0xe1, 0x97, 0x08, 0xe5, 0xe0, 0x97,
	0x09, 0xe5, 0xe1, 0x03, 0x84, 0x0a, 0xf0, 0x2b, 0x84, 0x36, 0xe0, 0x57, 0xbd, 0x86, 0xe1, 0xd7,
	0x93, 0xf0, 0x41, 0x8a, 0x29, 0xf8, 0x10, 0x45, 0x1d, 0x7e, 0x8d, 0x62, 0x1a, 0x7e, 0x9d, 0x62,
	0x06, 0x7e, 0x83, 0x62, 0x16, 0x3e, 0x4c, 0x31, 0x07, 0xbf, 0x49, 0x31, 0x0f, 0xbf, 0x45, 0xb1,
	0x00, 0x1f, 0xa1, 0xb8, 0x01, 0x1f, 0x25, 0xa8, 0x27, 0xe1, 0xb7, 0x29, 0xa6, 0xe0, 0x77, 0x28,
	0xea, 0xf0, 0x31, 0x8a, 0x69, 0xf8, 0x5d, 0x8a, 0x19, 0xf8, 0x38, 0xc5, 0x2c, 0xfc, 0x1e, 0xc5,
	0x1c, 0xfc, 0x3e, 0xc5, 0x3c, 0xfc, 0x81, 0x9a, 0x97, 0x14, 0xfc, 0xa1, 0x1a, 0x27, 0x8c, 0xb7,
	0xfe, 0x88, 0x90, 0x0e, 0x9f, 0x20, 0x94, 0x86, 0x3f, 0x56, 0xa5, 0x74, 0xf8, 0x13, 0x95, 0x82,
	0x31, 0xd5, 0x9f, 0x12, 0xd2, 0xe1, 0xcf, 0x08, 0xa5, 0xe1, 0xcf, 0x09, 0x65, 0xe0, 0x2f, 0x54,
	0x1d, 0x69, 0xf8, 0x4b, 0x95, 0x82, 0x11, 0xd6, 0x5f, 0x11, 0xd2, 0xe1, 0xaf, 0x09, 0xa5, 0xe1,
	0x6f, 0x08, 0x65, 0xe0, 0x6f, 0x09, 0x65, 0xe1, 0xef, 0x08, 0xe5, 0xe0, 0xef, 0x09, 0xe5, 0xe1,
	0x1f, 0x08, 0x15, 0xe0, 0x1f, 0x09, 0x6d, 0xc0, 0x3f, 0xa9, 0x21, 0xe1, 0x11, 0xd6, 0x3f, 0xab,
	0x86, 0x65, 0xe0, 0x5f, 0x94, 0x9c, 0x85, 0x7f, 0x55, 0x85, 0x30, 0xa6, 0xf9, 0x37, 0x42, 0x3a,
	0xfc, 0x3b, 0xa1, 0x34, 0xfc, 0x07, 0xa1, 0x0c, 0xbc, 0x24, 0xe4, 0x53, 0x16, 0x5e, 0x4a, 0x28,
	0x07, 0x2f, 0x23, 0x94, 0x87, 0x97, 0x87, 0xbc, 0xaf, 0xe5, 0xe0, 0x15, 0x2a, 0x05, 0x03, 0x95,
	0x57, 0x12, 0xd2, 0xe1, 0x55, 0x84, 0xd2, 0xf0, 0x6a, 0x42, 0x19, 0x78, 0x4d, 0x68, 0xfd, 0x75,
	0x41, 0xb6, 0x48, 0xfe, 0x4b, 0xa8, 0x9d, 0x62, 0xcb, 0xf2, 0x76, 0xb5, 0x63, 0x5a, 0x56, 0xdd,
	0x12, 0xcf, 0x49, 0x2d, 0xb3, 0xb8, 0x53, 0x2b, 0x17, 0x8d, 0x8a, 0x54, 0xf2, 0xeb, 0xdd, 0x72,
	0x6d, 0xd7, 0xa8, 0x94, 0x4b, 0x1d, 0xcb, 0x7c, 0x61, 0xdb, 0xe4, 0x77, 0xd1, 0x67, 0x18, 0x88,
	0xa2, 0x97, 0xcc, 0xcd, 0x4e, 0xb3, 0x51, 0x2e, 0x99, 0x96, 0x78, 0x45, 0x6a, 0xb6, 0x9b, 0x0d,
	0xf1, 0xfe, 0x5c, 0xab, 0xd7, 0x76, 0xda, 0x55, 0xa3, 0xd6, 0x69, 0x59, 0xc6, 0xd6, 0x56, 0xb9,
	0x08, 0x61, 0xfe, 0xf2, 0x5e, 0xa9, 0xb7, 0x4b, 0x9d, 0x92, 0xd1, 0x32, 0x8a, 0xe2, 0x59, 0xa2,
	0x61, 0xd5, 0x2f, 0x5f, 0x29, 0x37, 0x20, 0xa2, 0x9d, 0x63, 0x5a, 0xbb, 0xd6, 0x6c, 0x37, 0x1a,
	0x75, 0x6b, 0xee, 0xfd, 0xfa, 0x2c, 0x3b, 0xb5, 0x59, 0xa9, 0x17, 0x2f, 0x9a, 0xa5, 0x4e, 0xa3,
	0xbd, 0x59, 0x29, 0x37, 0x77, 0x4c, 0x0b, 0xa2, 0x9a, 0xc6, 0x56, 0xda, 0xb5, 0xaa, 0xd1, 0x2a,
	0xee, 0x98, 0x25, 0xf1, 0x2c, 0x1b, 0xc3, 0x66, 0x95, 0x8c, 0x72, 0xe5, 0x4a, 0xc7, 0xe2, 0x8f,
	0x78, 0x9d, 0xa2, 0xd1, 0x80, 0xb8, 0xaf, 0x2d, 0xd5, 0xab, 0x46, 0xb9, 0xc6, 0xb5, 0x6c, 0xfd,
	0x12, 0x5b, 0x99, 0xff, 0xe7, 0x1b, 0xff, 0x93, 0x81, 0x18, 0x11, 0x4c, 0xb0, 0xc4, 0xa5, 0xbc,
	0x51, 0xa9, 0xf0, 0x57, 0x20, 0xb3, 0x56, 0x34, 0x9b, 0x10, 0xc0, 0xca, 0xcc, 0x5d, 0xd3, 0xba,
	0x52, 0xaf, 0x89, 0x67, 0x97, 0x4e, 0x4a, 0x17, 0x17, 0xc0, 0x55, 0xa3, 0xd5, 0xb6, 0x4c, 0x08,
	0xad, 0xbf, 0x3b, 0xc0, 0x96, 0xe7, 0xfe, 0x87, 0x42, 0x2e, 0xb2, 0x4b, 0xfc, 0x4f, 0xd6, 0xcb,
	0x2c, 0xde, 0x6c, 0xd4, 0x6b, 0xcd, 0xba, 0xc5, 0xaf, 0xe7, 0x63, 0x2c, 0x5c, 0x32, 0x9b, 0x45,
	0x51, 0x8d, 0xc5, 0xdf, 0x6e, 0xc5, 0xe3, 0x68, 0xa5, 0x7c, 0xd1, 0x6c, 0x42, 0x98, 0xbf, 0x82,
	0xd7, 0x2f, 0xd5, 0x2a, 0x75, 0xa3, 0xd4, 0x84, 0x08, 0x7f, 0xfd, 0xb7, 0xc4, 0xd8, 0x60, 0x4d,
	0x46, 0xc5, 0x14, 0x18, 0xd5, 0x96, 0x58, 0x8c, 0xff, 0x2f, 0x00, 0x3f, 0x13, 0xd3, 0x16, 0x59,
	0xd4, 0xfb, 0x07, 0x45, 0x1c, 0x0b, 0xe1, 0x47, 0x74, 0x60, 0xd8, 0x9c, 0x52, 0xb9, 0xd9, 0xa8,
	0x18, 0x57, 0xda, 0x56, 0x05, 0x16, 0xf9, 0xdf, 0x91, 0x5b, 0x46, 0xcb, 0xbc, 0xdc, 0x82, 0xa5,
	0xf5, 0xff, 0xcb, 0xbf, 0x88, 0xef, 0x2d, 0xf0, 0x7f, 0x1e, 0xa6, 0xff, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x09, 0xa9, 0x56, 0xd0, 0x37, 0x4d, 0x00, 0x00,
}
