// Code generated by protoc-gen-go. DO NOT EDIT.
// source: svc.proto

package openrtb // import "clickyab.com/crane/openrtb/v2.5"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Token struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_svc_0e299245225a7c2d, []int{0}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (dst *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(dst, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*Token)(nil), "openrtb.Token")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrtbServiceClient is the client API for OrtbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrtbServiceClient interface {
	Ortb(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error)
	OrtbStream(ctx context.Context, opts ...grpc.CallOption) (OrtbService_OrtbStreamClient, error)
}

type ortbServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrtbServiceClient(cc *grpc.ClientConn) OrtbServiceClient {
	return &ortbServiceClient{cc}
}

func (c *ortbServiceClient) Ortb(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error) {
	out := new(BidResponse)
	err := c.cc.Invoke(ctx, "/openrtb.OrtbService/Ortb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ortbServiceClient) OrtbStream(ctx context.Context, opts ...grpc.CallOption) (OrtbService_OrtbStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrtbService_serviceDesc.Streams[0], "/openrtb.OrtbService/OrtbStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ortbServiceOrtbStreamClient{stream}
	return x, nil
}

type OrtbService_OrtbStreamClient interface {
	Send(*BidRequest) error
	Recv() (*BidResponse, error)
	grpc.ClientStream
}

type ortbServiceOrtbStreamClient struct {
	grpc.ClientStream
}

func (x *ortbServiceOrtbStreamClient) Send(m *BidRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ortbServiceOrtbStreamClient) Recv() (*BidResponse, error) {
	m := new(BidResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrtbServiceServer is the server API for OrtbService service.
type OrtbServiceServer interface {
	Ortb(context.Context, *BidRequest) (*BidResponse, error)
	OrtbStream(OrtbService_OrtbStreamServer) error
}

func RegisterOrtbServiceServer(s *grpc.Server, srv OrtbServiceServer) {
	s.RegisterService(&_OrtbService_serviceDesc, srv)
}

func _OrtbService_Ortb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrtbServiceServer).Ortb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openrtb.OrtbService/Ortb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrtbServiceServer).Ortb(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrtbService_OrtbStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrtbServiceServer).OrtbStream(&ortbServiceOrtbStreamServer{stream})
}

type OrtbService_OrtbStreamServer interface {
	Send(*BidResponse) error
	Recv() (*BidRequest, error)
	grpc.ServerStream
}

type ortbServiceOrtbStreamServer struct {
	grpc.ServerStream
}

func (x *ortbServiceOrtbStreamServer) Send(m *BidResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ortbServiceOrtbStreamServer) Recv() (*BidRequest, error) {
	m := new(BidRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _OrtbService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openrtb.OrtbService",
	HandlerType: (*OrtbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ortb",
			Handler:    _OrtbService_Ortb_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OrtbStream",
			Handler:       _OrtbService_OrtbStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "svc.proto",
}

func init() { proto.RegisterFile("svc.proto", fileDescriptor_svc_0e299245225a7c2d) }

var fileDescriptor_svc_0e299245225a7c2d = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0x4b, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0x2f, 0x48, 0xcd, 0x2b, 0x2a, 0x49, 0x92, 0xe2,
	0xca, 0x2f, 0x2a, 0x49, 0x82, 0x08, 0x2a, 0xc9, 0x72, 0xb1, 0x86, 0xe4, 0x67, 0xa7, 0xe6, 0x09,
	0x89, 0x70, 0xb1, 0x96, 0x80, 0x18, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x51,
	0x23, 0x23, 0x17, 0xb7, 0x7f, 0x51, 0x49, 0x52, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90,
	0x31, 0x17, 0x0b, 0x88, 0x2b, 0x24, 0xac, 0x07, 0x35, 0x4c, 0xcf, 0x29, 0x33, 0x25, 0x28, 0xb5,
	0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x4a, 0x04, 0x55, 0xb0, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x89,
	0x41, 0xc8, 0x96, 0x8b, 0x0b, 0x6c, 0x46, 0x49, 0x51, 0x6a, 0x62, 0x2e, 0x49, 0x5a, 0x35, 0x18,
	0x0d, 0x18, 0x9d, 0x34, 0xa3, 0xd4, 0x93, 0x73, 0x32, 0x93, 0xb3, 0x2b, 0x13, 0x93, 0xf4, 0x92,
	0xf3, 0x73, 0xf5, 0x93, 0x8b, 0x12, 0xf3, 0x52, 0xf5, 0xa1, 0xea, 0xf5, 0xcb, 0x8c, 0xf4, 0x4c,
	0xad, 0xa1, 0x9c, 0x24, 0x36, 0xb0, 0xa7, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x21, 0xd1,
	0xf9, 0xcd, 0xf6, 0x00, 0x00, 0x00,
}
