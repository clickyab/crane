// Code generated by MockGen. DO NOT EDIT.
// Source: clickyab.com/crane/crane/entity (interfaces: Impression,Advertise,Campaign,Publisher,Location,Slot,Supplier)

package mock_entity

import (
	entity "clickyab.com/crane/crane/entity"
	gomock "github.com/golang/mock/gomock"
	net "net"
)

// MockImpression is a mock of Impression interface
type MockImpression struct {
	ctrl     *gomock.Controller
	recorder *MockImpressionMockRecorder
}

// MockImpressionMockRecorder is the mock recorder for MockImpression
type MockImpressionMockRecorder struct {
	mock *MockImpression
}

// NewMockImpression creates a new mock instance
func NewMockImpression(ctrl *gomock.Controller) *MockImpression {
	mock := &MockImpression{ctrl: ctrl}
	mock.recorder = &MockImpressionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockImpression) EXPECT() *MockImpressionMockRecorder {
	return _m.recorder
}

// Attributes mocks base method
func (_m *MockImpression) Attributes() map[string]string {
	ret := _m.ctrl.Call(_m, "Attributes")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Attributes indicates an expected call of Attributes
func (_mr *MockImpressionMockRecorder) Attributes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Attributes")
}

// Category mocks base method
func (_m *MockImpression) Category() []entity.Category {
	ret := _m.ctrl.Call(_m, "Category")
	ret0, _ := ret[0].([]entity.Category)
	return ret0
}

// Category indicates an expected call of Category
func (_mr *MockImpressionMockRecorder) Category() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Category")
}

// ClientID mocks base method
func (_m *MockImpression) ClientID() string {
	ret := _m.ctrl.Call(_m, "ClientID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientID indicates an expected call of ClientID
func (_mr *MockImpressionMockRecorder) ClientID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientID")
}

// IP mocks base method
func (_m *MockImpression) IP() net.IP {
	ret := _m.ctrl.Call(_m, "IP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// IP indicates an expected call of IP
func (_mr *MockImpressionMockRecorder) IP() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IP")
}

// Location mocks base method
func (_m *MockImpression) Location() entity.Location {
	ret := _m.ctrl.Call(_m, "Location")
	ret0, _ := ret[0].(entity.Location)
	return ret0
}

// Location indicates an expected call of Location
func (_mr *MockImpressionMockRecorder) Location() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Location")
}

// OS mocks base method
func (_m *MockImpression) OS() entity.OS {
	ret := _m.ctrl.Call(_m, "OS")
	ret0, _ := ret[0].(entity.OS)
	return ret0
}

// OS indicates an expected call of OS
func (_mr *MockImpressionMockRecorder) OS() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OS")
}

// Protocol mocks base method
func (_m *MockImpression) Protocol() string {
	ret := _m.ctrl.Call(_m, "Protocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// Protocol indicates an expected call of Protocol
func (_mr *MockImpressionMockRecorder) Protocol() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Protocol")
}

// Publisher mocks base method
func (_m *MockImpression) Publisher() entity.Publisher {
	ret := _m.ctrl.Call(_m, "Publisher")
	ret0, _ := ret[0].(entity.Publisher)
	return ret0
}

// Publisher indicates an expected call of Publisher
func (_mr *MockImpressionMockRecorder) Publisher() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publisher")
}

// Slots mocks base method
func (_m *MockImpression) Slots() []entity.Slot {
	ret := _m.ctrl.Call(_m, "Slots")
	ret0, _ := ret[0].([]entity.Slot)
	return ret0
}

// Slots indicates an expected call of Slots
func (_mr *MockImpressionMockRecorder) Slots() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Slots")
}

// TrackID mocks base method
func (_m *MockImpression) TrackID() string {
	ret := _m.ctrl.Call(_m, "TrackID")
	ret0, _ := ret[0].(string)
	return ret0
}

// TrackID indicates an expected call of TrackID
func (_mr *MockImpressionMockRecorder) TrackID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TrackID")
}

// UserAgent mocks base method
func (_m *MockImpression) UserAgent() string {
	ret := _m.ctrl.Call(_m, "UserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserAgent indicates an expected call of UserAgent
func (_mr *MockImpressionMockRecorder) UserAgent() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UserAgent")
}

// MockAdvertise is a mock of Advertise interface
type MockAdvertise struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertiseMockRecorder
}

// MockAdvertiseMockRecorder is the mock recorder for MockAdvertise
type MockAdvertiseMockRecorder struct {
	mock *MockAdvertise
}

// NewMockAdvertise creates a new mock instance
func NewMockAdvertise(ctrl *gomock.Controller) *MockAdvertise {
	mock := &MockAdvertise{ctrl: ctrl}
	mock.recorder = &MockAdvertiseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockAdvertise) EXPECT() *MockAdvertiseMockRecorder {
	return _m.recorder
}

// AdCTR mocks base method
func (_m *MockAdvertise) AdCTR() float64 {
	ret := _m.ctrl.Call(_m, "AdCTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

// AdCTR indicates an expected call of AdCTR
func (_mr *MockAdvertiseMockRecorder) AdCTR() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AdCTR")
}

// Attributes mocks base method
func (_m *MockAdvertise) Attributes() map[string]interface{} {
	ret := _m.ctrl.Call(_m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (_mr *MockAdvertiseMockRecorder) Attributes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Attributes")
}

// CPM mocks base method
func (_m *MockAdvertise) CPM() int64 {
	ret := _m.ctrl.Call(_m, "CPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CPM indicates an expected call of CPM
func (_mr *MockAdvertiseMockRecorder) CPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CPM")
}

// CTR mocks base method
func (_m *MockAdvertise) CTR() float64 {
	ret := _m.ctrl.Call(_m, "CTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CTR indicates an expected call of CTR
func (_mr *MockAdvertiseMockRecorder) CTR() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CTR")
}

// Campaign mocks base method
func (_m *MockAdvertise) Campaign() entity.Campaign {
	ret := _m.ctrl.Call(_m, "Campaign")
	ret0, _ := ret[0].(entity.Campaign)
	return ret0
}

// Campaign indicates an expected call of Campaign
func (_mr *MockAdvertiseMockRecorder) Campaign() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Campaign")
}

// Capping mocks base method
func (_m *MockAdvertise) Capping() entity.Capping {
	ret := _m.ctrl.Call(_m, "Capping")
	ret0, _ := ret[0].(entity.Capping)
	return ret0
}

// Capping indicates an expected call of Capping
func (_mr *MockAdvertiseMockRecorder) Capping() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Capping")
}

// Duplicate mocks base method
func (_m *MockAdvertise) Duplicate() entity.Advertise {
	ret := _m.ctrl.Call(_m, "Duplicate")
	ret0, _ := ret[0].(entity.Advertise)
	return ret0
}

// Duplicate indicates an expected call of Duplicate
func (_mr *MockAdvertiseMockRecorder) Duplicate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Duplicate")
}

// Height mocks base method
func (_m *MockAdvertise) Height() int {
	ret := _m.ctrl.Call(_m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

// Height indicates an expected call of Height
func (_mr *MockAdvertiseMockRecorder) Height() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Height")
}

// ID mocks base method
func (_m *MockAdvertise) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockAdvertiseMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

// Media mocks base method
func (_m *MockAdvertise) Media() string {
	ret := _m.ctrl.Call(_m, "Media")
	ret0, _ := ret[0].(string)
	return ret0
}

// Media indicates an expected call of Media
func (_mr *MockAdvertiseMockRecorder) Media() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Media")
}

// SetCPM mocks base method
func (_m *MockAdvertise) SetCPM(_param0 int64) {
	_m.ctrl.Call(_m, "SetCPM", _param0)
}

// SetCPM indicates an expected call of SetCPM
func (_mr *MockAdvertiseMockRecorder) SetCPM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCPM", arg0)
}

// SetCTR mocks base method
func (_m *MockAdvertise) SetCTR(_param0 float64) {
	_m.ctrl.Call(_m, "SetCTR", _param0)
}

// SetCTR indicates an expected call of SetCTR
func (_mr *MockAdvertiseMockRecorder) SetCTR(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCTR", arg0)
}

// SetCapping mocks base method
func (_m *MockAdvertise) SetCapping(_param0 entity.Capping) {
	_m.ctrl.Call(_m, "SetCapping", _param0)
}

// SetCapping indicates an expected call of SetCapping
func (_mr *MockAdvertiseMockRecorder) SetCapping(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCapping", arg0)
}

// SetWinnerBID mocks base method
func (_m *MockAdvertise) SetWinnerBID(_param0 int64) {
	_m.ctrl.Call(_m, "SetWinnerBID", _param0)
}

// SetWinnerBID indicates an expected call of SetWinnerBID
func (_mr *MockAdvertiseMockRecorder) SetWinnerBID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWinnerBID", arg0)
}

// TargetURL mocks base method
func (_m *MockAdvertise) TargetURL() string {
	ret := _m.ctrl.Call(_m, "TargetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// TargetURL indicates an expected call of TargetURL
func (_mr *MockAdvertiseMockRecorder) TargetURL() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TargetURL")
}

// Type mocks base method
func (_m *MockAdvertise) Type() entity.AdType {
	ret := _m.ctrl.Call(_m, "Type")
	ret0, _ := ret[0].(entity.AdType)
	return ret0
}

// Type indicates an expected call of Type
func (_mr *MockAdvertiseMockRecorder) Type() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Type")
}

// Width mocks base method
func (_m *MockAdvertise) Width() int {
	ret := _m.ctrl.Call(_m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width
func (_mr *MockAdvertiseMockRecorder) Width() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Width")
}

// WinnerBID mocks base method
func (_m *MockAdvertise) WinnerBID() int64 {
	ret := _m.ctrl.Call(_m, "WinnerBID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// WinnerBID indicates an expected call of WinnerBID
func (_mr *MockAdvertiseMockRecorder) WinnerBID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WinnerBID")
}

// MockCampaign is a mock of Campaign interface
type MockCampaign struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignMockRecorder
}

// MockCampaignMockRecorder is the mock recorder for MockCampaign
type MockCampaignMockRecorder struct {
	mock *MockCampaign
}

// NewMockCampaign creates a new mock instance
func NewMockCampaign(ctrl *gomock.Controller) *MockCampaign {
	mock := &MockCampaign{ctrl: ctrl}
	mock.recorder = &MockCampaignMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCampaign) EXPECT() *MockCampaignMockRecorder {
	return _m.recorder
}

// AllowedOS mocks base method
func (_m *MockCampaign) AllowedOS() []string {
	ret := _m.ctrl.Call(_m, "AllowedOS")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AllowedOS indicates an expected call of AllowedOS
func (_mr *MockCampaignMockRecorder) AllowedOS() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllowedOS")
}

// Attributes mocks base method
func (_m *MockCampaign) Attributes() map[string]interface{} {
	ret := _m.ctrl.Call(_m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (_mr *MockCampaignMockRecorder) Attributes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Attributes")
}

// BlackListPublisher mocks base method
func (_m *MockCampaign) BlackListPublisher() []string {
	ret := _m.ctrl.Call(_m, "BlackListPublisher")
	ret0, _ := ret[0].([]string)
	return ret0
}

// BlackListPublisher indicates an expected call of BlackListPublisher
func (_mr *MockCampaignMockRecorder) BlackListPublisher() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlackListPublisher")
}

// Category mocks base method
func (_m *MockCampaign) Category() []entity.Category {
	ret := _m.ctrl.Call(_m, "Category")
	ret0, _ := ret[0].([]entity.Category)
	return ret0
}

// Category indicates an expected call of Category
func (_mr *MockCampaignMockRecorder) Category() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Category")
}

// Country mocks base method
func (_m *MockCampaign) Country() []string {
	ret := _m.ctrl.Call(_m, "Country")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Country indicates an expected call of Country
func (_mr *MockCampaignMockRecorder) Country() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Country")
}

// Frequency mocks base method
func (_m *MockCampaign) Frequency() int {
	ret := _m.ctrl.Call(_m, "Frequency")
	ret0, _ := ret[0].(int)
	return ret0
}

// Frequency indicates an expected call of Frequency
func (_mr *MockCampaignMockRecorder) Frequency() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Frequency")
}

// ID mocks base method
func (_m *MockCampaign) ID() int64 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockCampaignMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

// LanLon mocks base method
func (_m *MockCampaign) LanLon() (float64, float64, int) {
	ret := _m.ctrl.Call(_m, "LanLon")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// LanLon indicates an expected call of LanLon
func (_mr *MockCampaignMockRecorder) LanLon() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LanLon")
}

// MaxBID mocks base method
func (_m *MockCampaign) MaxBID() int64 {
	ret := _m.ctrl.Call(_m, "MaxBID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxBID indicates an expected call of MaxBID
func (_mr *MockCampaignMockRecorder) MaxBID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxBID")
}

// Name mocks base method
func (_m *MockCampaign) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockCampaignMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

// Province mocks base method
func (_m *MockCampaign) Province() []string {
	ret := _m.ctrl.Call(_m, "Province")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Province indicates an expected call of Province
func (_mr *MockCampaignMockRecorder) Province() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Province")
}

// Target mocks base method
func (_m *MockCampaign) Target() []entity.Target {
	ret := _m.ctrl.Call(_m, "Target")
	ret0, _ := ret[0].([]entity.Target)
	return ret0
}

// Target indicates an expected call of Target
func (_mr *MockCampaignMockRecorder) Target() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Target")
}

// WhiteListPublisher mocks base method
func (_m *MockCampaign) WhiteListPublisher() []string {
	ret := _m.ctrl.Call(_m, "WhiteListPublisher")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WhiteListPublisher indicates an expected call of WhiteListPublisher
func (_mr *MockCampaignMockRecorder) WhiteListPublisher() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WhiteListPublisher")
}

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return _m.recorder
}

// AcceptedTargets mocks base method
func (_m *MockPublisher) AcceptedTargets() []entity.Target {
	ret := _m.ctrl.Call(_m, "AcceptedTargets")
	ret0, _ := ret[0].([]entity.Target)
	return ret0
}

// AcceptedTargets indicates an expected call of AcceptedTargets
func (_mr *MockPublisherMockRecorder) AcceptedTargets() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AcceptedTargets")
}

// AcceptedTypes mocks base method
func (_m *MockPublisher) AcceptedTypes() []entity.AdType {
	ret := _m.ctrl.Call(_m, "AcceptedTypes")
	ret0, _ := ret[0].([]entity.AdType)
	return ret0
}

// AcceptedTypes indicates an expected call of AcceptedTypes
func (_mr *MockPublisherMockRecorder) AcceptedTypes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AcceptedTypes")
}

// Attributes mocks base method
func (_m *MockPublisher) Attributes() map[string]interface{} {
	ret := _m.ctrl.Call(_m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (_mr *MockPublisherMockRecorder) Attributes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Attributes")
}

// BIDType mocks base method
func (_m *MockPublisher) BIDType() entity.BIDType {
	ret := _m.ctrl.Call(_m, "BIDType")
	ret0, _ := ret[0].(entity.BIDType)
	return ret0
}

// BIDType indicates an expected call of BIDType
func (_mr *MockPublisherMockRecorder) BIDType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BIDType")
}

// FloorCPM mocks base method
func (_m *MockPublisher) FloorCPM() int64 {
	ret := _m.ctrl.Call(_m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FloorCPM indicates an expected call of FloorCPM
func (_mr *MockPublisherMockRecorder) FloorCPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FloorCPM")
}

// MinCPC mocks base method
func (_m *MockPublisher) MinCPC() int64 {
	ret := _m.ctrl.Call(_m, "MinCPC")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MinCPC indicates an expected call of MinCPC
func (_mr *MockPublisherMockRecorder) MinCPC() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinCPC")
}

// Name mocks base method
func (_m *MockPublisher) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockPublisherMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

// SoftFloorCPM mocks base method
func (_m *MockPublisher) SoftFloorCPM() int64 {
	ret := _m.ctrl.Call(_m, "SoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SoftFloorCPM indicates an expected call of SoftFloorCPM
func (_mr *MockPublisherMockRecorder) SoftFloorCPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SoftFloorCPM")
}

// Supplier mocks base method
func (_m *MockPublisher) Supplier() string {
	ret := _m.ctrl.Call(_m, "Supplier")
	ret0, _ := ret[0].(string)
	return ret0
}

// Supplier indicates an expected call of Supplier
func (_mr *MockPublisherMockRecorder) Supplier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Supplier")
}

// UnderFloor mocks base method
func (_m *MockPublisher) UnderFloor() bool {
	ret := _m.ctrl.Call(_m, "UnderFloor")
	ret0, _ := ret[0].(bool)
	return ret0
}

// UnderFloor indicates an expected call of UnderFloor
func (_mr *MockPublisherMockRecorder) UnderFloor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnderFloor")
}

// MockLocation is a mock of Location interface
type MockLocation struct {
	ctrl     *gomock.Controller
	recorder *MockLocationMockRecorder
}

// MockLocationMockRecorder is the mock recorder for MockLocation
type MockLocationMockRecorder struct {
	mock *MockLocation
}

// NewMockLocation creates a new mock instance
func NewMockLocation(ctrl *gomock.Controller) *MockLocation {
	mock := &MockLocation{ctrl: ctrl}
	mock.recorder = &MockLocationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLocation) EXPECT() *MockLocationMockRecorder {
	return _m.recorder
}

// Country mocks base method
func (_m *MockLocation) Country() entity.Country {
	ret := _m.ctrl.Call(_m, "Country")
	ret0, _ := ret[0].(entity.Country)
	return ret0
}

// Country indicates an expected call of Country
func (_mr *MockLocationMockRecorder) Country() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Country")
}

// LatLon mocks base method
func (_m *MockLocation) LatLon() entity.LatLon {
	ret := _m.ctrl.Call(_m, "LatLon")
	ret0, _ := ret[0].(entity.LatLon)
	return ret0
}

// LatLon indicates an expected call of LatLon
func (_mr *MockLocationMockRecorder) LatLon() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatLon")
}

// Province mocks base method
func (_m *MockLocation) Province() entity.Province {
	ret := _m.ctrl.Call(_m, "Province")
	ret0, _ := ret[0].(entity.Province)
	return ret0
}

// Province indicates an expected call of Province
func (_mr *MockLocationMockRecorder) Province() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Province")
}

// MockSlot is a mock of Slot interface
type MockSlot struct {
	ctrl     *gomock.Controller
	recorder *MockSlotMockRecorder
}

// MockSlotMockRecorder is the mock recorder for MockSlot
type MockSlotMockRecorder struct {
	mock *MockSlot
}

// NewMockSlot creates a new mock instance
func NewMockSlot(ctrl *gomock.Controller) *MockSlot {
	mock := &MockSlot{ctrl: ctrl}
	mock.recorder = &MockSlotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSlot) EXPECT() *MockSlotMockRecorder {
	return _m.recorder
}

// Attribute mocks base method
func (_m *MockSlot) Attribute() map[string]interface{} {
	ret := _m.ctrl.Call(_m, "Attribute")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attribute indicates an expected call of Attribute
func (_mr *MockSlotMockRecorder) Attribute() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Attribute")
}

// Height mocks base method
func (_m *MockSlot) Height() int {
	ret := _m.ctrl.Call(_m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

// Height indicates an expected call of Height
func (_mr *MockSlotMockRecorder) Height() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Height")
}

// ID mocks base method
func (_m *MockSlot) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockSlotMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

// IsSizeAllowed mocks base method
func (_m *MockSlot) IsSizeAllowed(_param0 int, _param1 int) bool {
	ret := _m.ctrl.Call(_m, "IsSizeAllowed", _param0, _param1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSizeAllowed indicates an expected call of IsSizeAllowed
func (_mr *MockSlotMockRecorder) IsSizeAllowed(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsSizeAllowed", arg0, arg1)
}

// SetShowURL mocks base method
func (_m *MockSlot) SetShowURL(_param0 string) {
	_m.ctrl.Call(_m, "SetShowURL", _param0)
}

// SetShowURL indicates an expected call of SetShowURL
func (_mr *MockSlotMockRecorder) SetShowURL(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShowURL", arg0)
}

// SetSlotCTR mocks base method
func (_m *MockSlot) SetSlotCTR(_param0 float64) {
	_m.ctrl.Call(_m, "SetSlotCTR", _param0)
}

// SetSlotCTR indicates an expected call of SetSlotCTR
func (_mr *MockSlotMockRecorder) SetSlotCTR(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetSlotCTR", arg0)
}

// SetWinnerAdvertise mocks base method
func (_m *MockSlot) SetWinnerAdvertise(_param0 entity.Advertise) {
	_m.ctrl.Call(_m, "SetWinnerAdvertise", _param0)
}

// SetWinnerAdvertise indicates an expected call of SetWinnerAdvertise
func (_mr *MockSlotMockRecorder) SetWinnerAdvertise(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWinnerAdvertise", arg0)
}

// ShowURL mocks base method
func (_m *MockSlot) ShowURL() string {
	ret := _m.ctrl.Call(_m, "ShowURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShowURL indicates an expected call of ShowURL
func (_mr *MockSlotMockRecorder) ShowURL() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShowURL")
}

// SlotCTR mocks base method
func (_m *MockSlot) SlotCTR() float64 {
	ret := _m.ctrl.Call(_m, "SlotCTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

// SlotCTR indicates an expected call of SlotCTR
func (_mr *MockSlotMockRecorder) SlotCTR() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SlotCTR")
}

// TrackID mocks base method
func (_m *MockSlot) TrackID() string {
	ret := _m.ctrl.Call(_m, "TrackID")
	ret0, _ := ret[0].(string)
	return ret0
}

// TrackID indicates an expected call of TrackID
func (_mr *MockSlotMockRecorder) TrackID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TrackID")
}

// Width mocks base method
func (_m *MockSlot) Width() int {
	ret := _m.ctrl.Call(_m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width
func (_mr *MockSlotMockRecorder) Width() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Width")
}

// WinnerAdvertise mocks base method
func (_m *MockSlot) WinnerAdvertise() entity.Advertise {
	ret := _m.ctrl.Call(_m, "WinnerAdvertise")
	ret0, _ := ret[0].(entity.Advertise)
	return ret0
}

// WinnerAdvertise indicates an expected call of WinnerAdvertise
func (_mr *MockSlotMockRecorder) WinnerAdvertise() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WinnerAdvertise")
}

// MockSupplier is a mock of Supplier interface
type MockSupplier struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierMockRecorder
}

// MockSupplierMockRecorder is the mock recorder for MockSupplier
type MockSupplierMockRecorder struct {
	mock *MockSupplier
}

// NewMockSupplier creates a new mock instance
func NewMockSupplier(ctrl *gomock.Controller) *MockSupplier {
	mock := &MockSupplier{ctrl: ctrl}
	mock.recorder = &MockSupplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSupplier) EXPECT() *MockSupplierMockRecorder {
	return _m.recorder
}

// AcceptedTypes mocks base method
func (_m *MockSupplier) AcceptedTypes() []entity.AdType {
	ret := _m.ctrl.Call(_m, "AcceptedTypes")
	ret0, _ := ret[0].([]entity.AdType)
	return ret0
}

// AcceptedTypes indicates an expected call of AcceptedTypes
func (_mr *MockSupplierMockRecorder) AcceptedTypes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AcceptedTypes")
}

// CPMFloor mocks base method
func (_m *MockSupplier) CPMFloor() int64 {
	ret := _m.ctrl.Call(_m, "CPMFloor")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CPMFloor indicates an expected call of CPMFloor
func (_mr *MockSupplierMockRecorder) CPMFloor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CPMFloor")
}

// CountryWhiteList mocks base method
func (_m *MockSupplier) CountryWhiteList() []entity.Country {
	ret := _m.ctrl.Call(_m, "CountryWhiteList")
	ret0, _ := ret[0].([]entity.Country)
	return ret0
}

// CountryWhiteList indicates an expected call of CountryWhiteList
func (_mr *MockSupplierMockRecorder) CountryWhiteList() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CountryWhiteList")
}

// ExcludedDemands mocks base method
func (_m *MockSupplier) ExcludedDemands() []string {
	ret := _m.ctrl.Call(_m, "ExcludedDemands")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ExcludedDemands indicates an expected call of ExcludedDemands
func (_mr *MockSupplierMockRecorder) ExcludedDemands() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExcludedDemands")
}

// ID mocks base method
func (_m *MockSupplier) ID() int64 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockSupplierMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

// Name mocks base method
func (_m *MockSupplier) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockSupplierMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}
