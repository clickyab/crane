// Automatically generated by MockGen. DO NOT EDIT!
// Source: clickyab.com/exchange/crane/entity (interfaces: Impression,Demand,Advertise,Campaign,Publisher,Location,Slot,Supplier)

package mock_entity

import (
	entity "clickyab.com/exchange/crane/entity"
	context "context"
	gomock "github.com/golang/mock/gomock"
	net "net"
	http "net/http"
)

// Mock of Impression interface
type MockImpression struct {
	ctrl     *gomock.Controller
	recorder *_MockImpressionRecorder
}

// Recorder for MockImpression (not exported)
type _MockImpressionRecorder struct {
	mock *MockImpression
}

func NewMockImpression(ctrl *gomock.Controller) *MockImpression {
	mock := &MockImpression{ctrl: ctrl}
	mock.recorder = &_MockImpressionRecorder{mock}
	return mock
}

func (_m *MockImpression) EXPECT() *_MockImpressionRecorder {
	return _m.recorder
}

func (_m *MockImpression) Attributes(_param0 entity.ImpressionAttributes) interface{} {
	ret := _m.ctrl.Call(_m, "Attributes", _param0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

func (_mr *_MockImpressionRecorder) Attributes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Attributes", arg0)
}

func (_m *MockImpression) Category() []entity.Category {
	ret := _m.ctrl.Call(_m, "Category")
	ret0, _ := ret[0].([]entity.Category)
	return ret0
}

func (_mr *_MockImpressionRecorder) Category() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Category")
}

func (_m *MockImpression) ClientID() int64 {
	ret := _m.ctrl.Call(_m, "ClientID")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockImpressionRecorder) ClientID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientID")
}

func (_m *MockImpression) IP() net.IP {
	ret := _m.ctrl.Call(_m, "IP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

func (_mr *_MockImpressionRecorder) IP() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IP")
}

func (_m *MockImpression) Location() entity.Location {
	ret := _m.ctrl.Call(_m, "Location")
	ret0, _ := ret[0].(entity.Location)
	return ret0
}

func (_mr *_MockImpressionRecorder) Location() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Location")
}

func (_m *MockImpression) MegaIMP() string {
	ret := _m.ctrl.Call(_m, "MegaIMP")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockImpressionRecorder) MegaIMP() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MegaIMP")
}

func (_m *MockImpression) OS() entity.OS {
	ret := _m.ctrl.Call(_m, "OS")
	ret0, _ := ret[0].(entity.OS)
	return ret0
}

func (_mr *_MockImpressionRecorder) OS() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OS")
}

func (_m *MockImpression) Request() *http.Request {
	ret := _m.ctrl.Call(_m, "Request")
	ret0, _ := ret[0].(*http.Request)
	return ret0
}

func (_mr *_MockImpressionRecorder) Request() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Request")
}

func (_m *MockImpression) Slots() []entity.Slot {
	ret := _m.ctrl.Call(_m, "Slots")
	ret0, _ := ret[0].([]entity.Slot)
	return ret0
}

func (_mr *_MockImpressionRecorder) Slots() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Slots")
}

func (_m *MockImpression) Source() entity.Publisher {
	ret := _m.ctrl.Call(_m, "Source")
	ret0, _ := ret[0].(entity.Publisher)
	return ret0
}

func (_mr *_MockImpressionRecorder) Source() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Source")
}

func (_m *MockImpression) UserAgent() string {
	ret := _m.ctrl.Call(_m, "UserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockImpressionRecorder) UserAgent() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UserAgent")
}

// Mock of Demand interface
type MockDemand struct {
	ctrl     *gomock.Controller
	recorder *_MockDemandRecorder
}

// Recorder for MockDemand (not exported)
type _MockDemandRecorder struct {
	mock *MockDemand
}

func NewMockDemand(ctrl *gomock.Controller) *MockDemand {
	mock := &MockDemand{ctrl: ctrl}
	mock.recorder = &_MockDemandRecorder{mock}
	return mock
}

func (_m *MockDemand) EXPECT() *_MockDemandRecorder {
	return _m.recorder
}

func (_m *MockDemand) Provide(_param0 context.Context, _param1 entity.Impression, _param2 chan map[string]entity.Advertise) {
	_m.ctrl.Call(_m, "Provide", _param0, _param1, _param2)
}

func (_mr *_MockDemandRecorder) Provide(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Provide", arg0, arg1, arg2)
}

func (_m *MockDemand) Status(_param0 context.Context, _param1 http.ResponseWriter, _param2 *http.Request) {
	_m.ctrl.Call(_m, "Status", _param0, _param1, _param2)
}

func (_mr *_MockDemandRecorder) Status(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status", arg0, arg1, arg2)
}

// Mock of Advertise interface
type MockAdvertise struct {
	ctrl     *gomock.Controller
	recorder *_MockAdvertiseRecorder
}

// Recorder for MockAdvertise (not exported)
type _MockAdvertiseRecorder struct {
	mock *MockAdvertise
}

func NewMockAdvertise(ctrl *gomock.Controller) *MockAdvertise {
	mock := &MockAdvertise{ctrl: ctrl}
	mock.recorder = &_MockAdvertiseRecorder{mock}
	return mock
}

func (_m *MockAdvertise) EXPECT() *_MockAdvertiseRecorder {
	return _m.recorder
}

func (_m *MockAdvertise) AdCTR() float64 {
	ret := _m.ctrl.Call(_m, "AdCTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) AdCTR() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AdCTR")
}

func (_m *MockAdvertise) AllowedOS() []int64 {
	ret := _m.ctrl.Call(_m, "AllowedOS")
	ret0, _ := ret[0].([]int64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) AllowedOS() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllowedOS")
}

func (_m *MockAdvertise) BlackListPublisher() []int64 {
	ret := _m.ctrl.Call(_m, "BlackListPublisher")
	ret0, _ := ret[0].([]int64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) BlackListPublisher() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlackListPublisher")
}

func (_m *MockAdvertise) CPM() int64 {
	ret := _m.ctrl.Call(_m, "CPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) CPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CPM")
}

func (_m *MockAdvertise) CTR() float64 {
	ret := _m.ctrl.Call(_m, "CTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) CTR() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CTR")
}

func (_m *MockAdvertise) Campaign() entity.Campaign {
	ret := _m.ctrl.Call(_m, "Campaign")
	ret0, _ := ret[0].(entity.Campaign)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Campaign() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Campaign")
}

func (_m *MockAdvertise) Capping() entity.Capping {
	ret := _m.ctrl.Call(_m, "Capping")
	ret0, _ := ret[0].(entity.Capping)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Capping() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Capping")
}

func (_m *MockAdvertise) Category() []entity.Category {
	ret := _m.ctrl.Call(_m, "Category")
	ret0, _ := ret[0].([]entity.Category)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Category() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Category")
}

func (_m *MockAdvertise) Copy() entity.Advertise {
	ret := _m.ctrl.Call(_m, "Copy")
	ret0, _ := ret[0].(entity.Advertise)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Copy() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Copy")
}

func (_m *MockAdvertise) Country() []int64 {
	ret := _m.ctrl.Call(_m, "Country")
	ret0, _ := ret[0].([]int64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Country() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Country")
}

func (_m *MockAdvertise) ID() int64 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockAdvertise) LanLon() (float64, float64) {
	ret := _m.ctrl.Call(_m, "LanLon")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	return ret0, ret1
}

func (_mr *_MockAdvertiseRecorder) LanLon() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LanLon")
}

func (_m *MockAdvertise) Province() []int64 {
	ret := _m.ctrl.Call(_m, "Province")
	ret0, _ := ret[0].([]int64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Province() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Province")
}

func (_m *MockAdvertise) SetCPM(_param0 int64) {
	_m.ctrl.Call(_m, "SetCPM", _param0)
}

func (_mr *_MockAdvertiseRecorder) SetCPM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCPM", arg0)
}

func (_m *MockAdvertise) SetCTR(_param0 float64) {
	_m.ctrl.Call(_m, "SetCTR", _param0)
}

func (_mr *_MockAdvertiseRecorder) SetCTR(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCTR", arg0)
}

func (_m *MockAdvertise) SetCapping(_param0 entity.Capping) {
	_m.ctrl.Call(_m, "SetCapping", _param0)
}

func (_mr *_MockAdvertiseRecorder) SetCapping(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCapping", arg0)
}

func (_m *MockAdvertise) SetWinnerBID(_param0 int64) {
	_m.ctrl.Call(_m, "SetWinnerBID", _param0)
}

func (_mr *_MockAdvertiseRecorder) SetWinnerBID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWinnerBID", arg0)
}

func (_m *MockAdvertise) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Size")
}

func (_m *MockAdvertise) Type() entity.AdType {
	ret := _m.ctrl.Call(_m, "Type")
	ret0, _ := ret[0].(entity.AdType)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Type() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Type")
}

func (_m *MockAdvertise) WhiteListPublisher() []int64 {
	ret := _m.ctrl.Call(_m, "WhiteListPublisher")
	ret0, _ := ret[0].([]int64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) WhiteListPublisher() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WhiteListPublisher")
}

func (_m *MockAdvertise) WinnerBID() int64 {
	ret := _m.ctrl.Call(_m, "WinnerBID")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) WinnerBID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WinnerBID")
}

// Mock of Campaign interface
type MockCampaign struct {
	ctrl     *gomock.Controller
	recorder *_MockCampaignRecorder
}

// Recorder for MockCampaign (not exported)
type _MockCampaignRecorder struct {
	mock *MockCampaign
}

func NewMockCampaign(ctrl *gomock.Controller) *MockCampaign {
	mock := &MockCampaign{ctrl: ctrl}
	mock.recorder = &_MockCampaignRecorder{mock}
	return mock
}

func (_m *MockCampaign) EXPECT() *_MockCampaignRecorder {
	return _m.recorder
}

func (_m *MockCampaign) Frequency() int {
	ret := _m.ctrl.Call(_m, "Frequency")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockCampaignRecorder) Frequency() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Frequency")
}

func (_m *MockCampaign) ID() int64 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockCampaignRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockCampaign) MaxBID() int64 {
	ret := _m.ctrl.Call(_m, "MaxBID")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockCampaignRecorder) MaxBID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxBID")
}

func (_m *MockCampaign) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockCampaignRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockCampaign) Target() []entity.Target {
	ret := _m.ctrl.Call(_m, "Target")
	ret0, _ := ret[0].([]entity.Target)
	return ret0
}

func (_mr *_MockCampaignRecorder) Target() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Target")
}

// Mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *_MockPublisherRecorder
}

// Recorder for MockPublisher (not exported)
type _MockPublisherRecorder struct {
	mock *MockPublisher
}

func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &_MockPublisherRecorder{mock}
	return mock
}

func (_m *MockPublisher) EXPECT() *_MockPublisherRecorder {
	return _m.recorder
}

func (_m *MockPublisher) AcceptedTarget() entity.Target {
	ret := _m.ctrl.Call(_m, "AcceptedTarget")
	ret0, _ := ret[0].(entity.Target)
	return ret0
}

func (_mr *_MockPublisherRecorder) AcceptedTarget() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AcceptedTarget")
}

func (_m *MockPublisher) AcceptedTypes() []entity.AdType {
	ret := _m.ctrl.Call(_m, "AcceptedTypes")
	ret0, _ := ret[0].([]entity.AdType)
	return ret0
}

func (_mr *_MockPublisherRecorder) AcceptedTypes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AcceptedTypes")
}

func (_m *MockPublisher) Active() bool {
	ret := _m.ctrl.Call(_m, "Active")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPublisherRecorder) Active() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Active")
}

func (_m *MockPublisher) Attributes(_param0 entity.PublisherAttributes) interface{} {
	ret := _m.ctrl.Call(_m, "Attributes", _param0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

func (_mr *_MockPublisherRecorder) Attributes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Attributes", arg0)
}

func (_m *MockPublisher) BIDType() entity.BIDType {
	ret := _m.ctrl.Call(_m, "BIDType")
	ret0, _ := ret[0].(entity.BIDType)
	return ret0
}

func (_mr *_MockPublisherRecorder) BIDType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BIDType")
}

func (_m *MockPublisher) FloorCPM() int64 {
	ret := _m.ctrl.Call(_m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockPublisherRecorder) FloorCPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FloorCPM")
}

func (_m *MockPublisher) ID() int64 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockPublisherRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockPublisher) MinCPC() int64 {
	ret := _m.ctrl.Call(_m, "MinCPC")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockPublisherRecorder) MinCPC() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinCPC")
}

func (_m *MockPublisher) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPublisherRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockPublisher) SoftFloorCPM() int64 {
	ret := _m.ctrl.Call(_m, "SoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockPublisherRecorder) SoftFloorCPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SoftFloorCPM")
}

func (_m *MockPublisher) Supplier() entity.Supplier {
	ret := _m.ctrl.Call(_m, "Supplier")
	ret0, _ := ret[0].(entity.Supplier)
	return ret0
}

func (_mr *_MockPublisherRecorder) Supplier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Supplier")
}

func (_m *MockPublisher) UnderFloor() bool {
	ret := _m.ctrl.Call(_m, "UnderFloor")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPublisherRecorder) UnderFloor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnderFloor")
}

// Mock of Location interface
type MockLocation struct {
	ctrl     *gomock.Controller
	recorder *_MockLocationRecorder
}

// Recorder for MockLocation (not exported)
type _MockLocationRecorder struct {
	mock *MockLocation
}

func NewMockLocation(ctrl *gomock.Controller) *MockLocation {
	mock := &MockLocation{ctrl: ctrl}
	mock.recorder = &_MockLocationRecorder{mock}
	return mock
}

func (_m *MockLocation) EXPECT() *_MockLocationRecorder {
	return _m.recorder
}

func (_m *MockLocation) Country() entity.Country {
	ret := _m.ctrl.Call(_m, "Country")
	ret0, _ := ret[0].(entity.Country)
	return ret0
}

func (_mr *_MockLocationRecorder) Country() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Country")
}

func (_m *MockLocation) LatLon() entity.LatLon {
	ret := _m.ctrl.Call(_m, "LatLon")
	ret0, _ := ret[0].(entity.LatLon)
	return ret0
}

func (_mr *_MockLocationRecorder) LatLon() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatLon")
}

func (_m *MockLocation) Province() entity.Province {
	ret := _m.ctrl.Call(_m, "Province")
	ret0, _ := ret[0].(entity.Province)
	return ret0
}

func (_mr *_MockLocationRecorder) Province() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Province")
}

// Mock of Slot interface
type MockSlot struct {
	ctrl     *gomock.Controller
	recorder *_MockSlotRecorder
}

// Recorder for MockSlot (not exported)
type _MockSlotRecorder struct {
	mock *MockSlot
}

func NewMockSlot(ctrl *gomock.Controller) *MockSlot {
	mock := &MockSlot{ctrl: ctrl}
	mock.recorder = &_MockSlotRecorder{mock}
	return mock
}

func (_m *MockSlot) EXPECT() *_MockSlotRecorder {
	return _m.recorder
}

func (_m *MockSlot) AllowedSize() []int {
	ret := _m.ctrl.Call(_m, "AllowedSize")
	ret0, _ := ret[0].([]int)
	return ret0
}

func (_mr *_MockSlotRecorder) AllowedSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllowedSize")
}

func (_m *MockSlot) ID() int64 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockSlotRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockSlot) PublicID() string {
	ret := _m.ctrl.Call(_m, "PublicID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSlotRecorder) PublicID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PublicID")
}

func (_m *MockSlot) SetShowURL(_param0 string) {
	_m.ctrl.Call(_m, "SetShowURL", _param0)
}

func (_mr *_MockSlotRecorder) SetShowURL(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetShowURL", arg0)
}

func (_m *MockSlot) SetWinnerAdvertise(_param0 entity.Advertise) {
	_m.ctrl.Call(_m, "SetWinnerAdvertise", _param0)
}

func (_mr *_MockSlotRecorder) SetWinnerAdvertise(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWinnerAdvertise", arg0)
}

func (_m *MockSlot) ShowURL() string {
	ret := _m.ctrl.Call(_m, "ShowURL")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSlotRecorder) ShowURL() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShowURL")
}

func (_m *MockSlot) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockSlotRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Size")
}

func (_m *MockSlot) SlotCTR() float64 {
	ret := _m.ctrl.Call(_m, "SlotCTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

func (_mr *_MockSlotRecorder) SlotCTR() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SlotCTR")
}

func (_m *MockSlot) StateID() string {
	ret := _m.ctrl.Call(_m, "StateID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSlotRecorder) StateID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StateID")
}

func (_m *MockSlot) WinnerAdvertise() entity.Advertise {
	ret := _m.ctrl.Call(_m, "WinnerAdvertise")
	ret0, _ := ret[0].(entity.Advertise)
	return ret0
}

func (_mr *_MockSlotRecorder) WinnerAdvertise() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WinnerAdvertise")
}

// Mock of Supplier interface
type MockSupplier struct {
	ctrl     *gomock.Controller
	recorder *_MockSupplierRecorder
}

// Recorder for MockSupplier (not exported)
type _MockSupplierRecorder struct {
	mock *MockSupplier
}

func NewMockSupplier(ctrl *gomock.Controller) *MockSupplier {
	mock := &MockSupplier{ctrl: ctrl}
	mock.recorder = &_MockSupplierRecorder{mock}
	return mock
}

func (_m *MockSupplier) EXPECT() *_MockSupplierRecorder {
	return _m.recorder
}

func (_m *MockSupplier) AcceptedTypes() []entity.AdType {
	ret := _m.ctrl.Call(_m, "AcceptedTypes")
	ret0, _ := ret[0].([]entity.AdType)
	return ret0
}

func (_mr *_MockSupplierRecorder) AcceptedTypes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AcceptedTypes")
}

func (_m *MockSupplier) CPMFloor() int64 {
	ret := _m.ctrl.Call(_m, "CPMFloor")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockSupplierRecorder) CPMFloor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CPMFloor")
}

func (_m *MockSupplier) CountryWhiteList() []entity.Country {
	ret := _m.ctrl.Call(_m, "CountryWhiteList")
	ret0, _ := ret[0].([]entity.Country)
	return ret0
}

func (_mr *_MockSupplierRecorder) CountryWhiteList() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CountryWhiteList")
}

func (_m *MockSupplier) ExcludedDemands() []string {
	ret := _m.ctrl.Call(_m, "ExcludedDemands")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockSupplierRecorder) ExcludedDemands() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExcludedDemands")
}

func (_m *MockSupplier) ID() int64 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockSupplierRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockSupplier) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSupplierRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}
