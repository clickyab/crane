// Code generated by MockGen. DO NOT EDIT.
// Source: clickyab.com/crane/crane/entity (interfaces: Context,Advertise,Campaign,Publisher,Location,Seat,Supplier,Request)

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	entity "clickyab.com/crane/crane/entity"
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
	time "time"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Alexa mocks base method
func (m *MockContext) Alexa() bool {
	ret := m.ctrl.Call(m, "Alexa")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Alexa indicates an expected call of Alexa
func (mr *MockContextMockRecorder) Alexa() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alexa", reflect.TypeOf((*MockContext)(nil).Alexa))
}

// Capping mocks base method
func (m *MockContext) Capping() bool {
	ret := m.ctrl.Call(m, "Capping")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Capping indicates an expected call of Capping
func (mr *MockContextMockRecorder) Capping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capping", reflect.TypeOf((*MockContext)(nil).Capping))
}

// Category mocks base method
func (m *MockContext) Category() []entity.Category {
	ret := m.ctrl.Call(m, "Category")
	ret0, _ := ret[0].([]entity.Category)
	return ret0
}

// Category indicates an expected call of Category
func (mr *MockContextMockRecorder) Category() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Category", reflect.TypeOf((*MockContext)(nil).Category))
}

// Currency mocks base method
func (m *MockContext) Currency() string {
	ret := m.ctrl.Call(m, "Currency")
	ret0, _ := ret[0].(string)
	return ret0
}

// Currency indicates an expected call of Currency
func (mr *MockContextMockRecorder) Currency() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Currency", reflect.TypeOf((*MockContext)(nil).Currency))
}

// EventPage mocks base method
func (m *MockContext) EventPage() string {
	ret := m.ctrl.Call(m, "EventPage")
	ret0, _ := ret[0].(string)
	return ret0
}

// EventPage indicates an expected call of EventPage
func (mr *MockContextMockRecorder) EventPage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPage", reflect.TypeOf((*MockContext)(nil).EventPage))
}

// FloorDiv mocks base method
func (m *MockContext) FloorDiv() int64 {
	ret := m.ctrl.Call(m, "FloorDiv")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FloorDiv indicates an expected call of FloorDiv
func (mr *MockContextMockRecorder) FloorDiv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorDiv", reflect.TypeOf((*MockContext)(nil).FloorDiv))
}

// IP mocks base method
func (m *MockContext) IP() net.IP {
	ret := m.ctrl.Call(m, "IP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// IP indicates an expected call of IP
func (mr *MockContextMockRecorder) IP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockContext)(nil).IP))
}

// IsMobile mocks base method
func (m *MockContext) IsMobile() bool {
	ret := m.ctrl.Call(m, "IsMobile")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMobile indicates an expected call of IsMobile
func (mr *MockContextMockRecorder) IsMobile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMobile", reflect.TypeOf((*MockContext)(nil).IsMobile))
}

// Location mocks base method
func (m *MockContext) Location() entity.Location {
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(entity.Location)
	return ret0
}

// Location indicates an expected call of Location
func (mr *MockContextMockRecorder) Location() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockContext)(nil).Location))
}

// MultiVideo mocks base method
func (m *MockContext) MultiVideo() bool {
	ret := m.ctrl.Call(m, "MultiVideo")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MultiVideo indicates an expected call of MultiVideo
func (mr *MockContextMockRecorder) MultiVideo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiVideo", reflect.TypeOf((*MockContext)(nil).MultiVideo))
}

// OS mocks base method
func (m *MockContext) OS() entity.OS {
	ret := m.ctrl.Call(m, "OS")
	ret0, _ := ret[0].(entity.OS)
	return ret0
}

// OS indicates an expected call of OS
func (mr *MockContextMockRecorder) OS() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OS", reflect.TypeOf((*MockContext)(nil).OS))
}

// Parent mocks base method
func (m *MockContext) Parent() string {
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(string)
	return ret0
}

// Parent indicates an expected call of Parent
func (mr *MockContextMockRecorder) Parent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockContext)(nil).Parent))
}

// Protocol mocks base method
func (m *MockContext) Protocol() entity.Protocol {
	ret := m.ctrl.Call(m, "Protocol")
	ret0, _ := ret[0].(entity.Protocol)
	return ret0
}

// Protocol indicates an expected call of Protocol
func (mr *MockContextMockRecorder) Protocol() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocol", reflect.TypeOf((*MockContext)(nil).Protocol))
}

// Publisher mocks base method
func (m *MockContext) Publisher() entity.Publisher {
	ret := m.ctrl.Call(m, "Publisher")
	ret0, _ := ret[0].(entity.Publisher)
	return ret0
}

// Publisher indicates an expected call of Publisher
func (mr *MockContextMockRecorder) Publisher() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publisher", reflect.TypeOf((*MockContext)(nil).Publisher))
}

// Referrer mocks base method
func (m *MockContext) Referrer() string {
	ret := m.ctrl.Call(m, "Referrer")
	ret0, _ := ret[0].(string)
	return ret0
}

// Referrer indicates an expected call of Referrer
func (mr *MockContextMockRecorder) Referrer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Referrer", reflect.TypeOf((*MockContext)(nil).Referrer))
}

// Seats mocks base method
func (m *MockContext) Seats() []entity.Seat {
	ret := m.ctrl.Call(m, "Seats")
	ret0, _ := ret[0].([]entity.Seat)
	return ret0
}

// Seats indicates an expected call of Seats
func (mr *MockContextMockRecorder) Seats() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seats", reflect.TypeOf((*MockContext)(nil).Seats))
}

// Suspicious mocks base method
func (m *MockContext) Suspicious() int {
	ret := m.ctrl.Call(m, "Suspicious")
	ret0, _ := ret[0].(int)
	return ret0
}

// Suspicious indicates an expected call of Suspicious
func (mr *MockContextMockRecorder) Suspicious() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspicious", reflect.TypeOf((*MockContext)(nil).Suspicious))
}

// Timestamp mocks base method
func (m *MockContext) Timestamp() time.Time {
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Timestamp indicates an expected call of Timestamp
func (mr *MockContextMockRecorder) Timestamp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockContext)(nil).Timestamp))
}

// Tiny mocks base method
func (m *MockContext) Tiny() bool {
	ret := m.ctrl.Call(m, "Tiny")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Tiny indicates an expected call of Tiny
func (mr *MockContextMockRecorder) Tiny() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tiny", reflect.TypeOf((*MockContext)(nil).Tiny))
}

// Type mocks base method
func (m *MockContext) Type() entity.RequestType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(entity.RequestType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockContextMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockContext)(nil).Type))
}

// User mocks base method
func (m *MockContext) User() entity.User {
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(entity.User)
	return ret0
}

// User indicates an expected call of User
func (mr *MockContextMockRecorder) User() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockContext)(nil).User))
}

// UserAgent mocks base method
func (m *MockContext) UserAgent() string {
	ret := m.ctrl.Call(m, "UserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserAgent indicates an expected call of UserAgent
func (mr *MockContextMockRecorder) UserAgent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAgent", reflect.TypeOf((*MockContext)(nil).UserAgent))
}

// MockAdvertise is a mock of Advertise interface
type MockAdvertise struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertiseMockRecorder
}

// MockAdvertiseMockRecorder is the mock recorder for MockAdvertise
type MockAdvertiseMockRecorder struct {
	mock *MockAdvertise
}

// NewMockAdvertise creates a new mock instance
func NewMockAdvertise(ctrl *gomock.Controller) *MockAdvertise {
	mock := &MockAdvertise{ctrl: ctrl}
	mock.recorder = &MockAdvertiseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdvertise) EXPECT() *MockAdvertiseMockRecorder {
	return m.recorder
}

// AdCTR mocks base method
func (m *MockAdvertise) AdCTR() float64 {
	ret := m.ctrl.Call(m, "AdCTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

// AdCTR indicates an expected call of AdCTR
func (mr *MockAdvertiseMockRecorder) AdCTR() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdCTR", reflect.TypeOf((*MockAdvertise)(nil).AdCTR))
}

// Attributes mocks base method
func (m *MockAdvertise) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockAdvertiseMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockAdvertise)(nil).Attributes))
}

// Campaign mocks base method
func (m *MockAdvertise) Campaign() entity.Campaign {
	ret := m.ctrl.Call(m, "Campaign")
	ret0, _ := ret[0].(entity.Campaign)
	return ret0
}

// Campaign indicates an expected call of Campaign
func (mr *MockAdvertiseMockRecorder) Campaign() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Campaign", reflect.TypeOf((*MockAdvertise)(nil).Campaign))
}

// CampaignAdID mocks base method
func (m *MockAdvertise) CampaignAdID() int64 {
	ret := m.ctrl.Call(m, "CampaignAdID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CampaignAdID indicates an expected call of CampaignAdID
func (mr *MockAdvertiseMockRecorder) CampaignAdID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignAdID", reflect.TypeOf((*MockAdvertise)(nil).CampaignAdID))
}

// Capping mocks base method
func (m *MockAdvertise) Capping() entity.Capping {
	ret := m.ctrl.Call(m, "Capping")
	ret0, _ := ret[0].(entity.Capping)
	return ret0
}

// Capping indicates an expected call of Capping
func (mr *MockAdvertiseMockRecorder) Capping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capping", reflect.TypeOf((*MockAdvertise)(nil).Capping))
}

// Height mocks base method
func (m *MockAdvertise) Height() int {
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

// Height indicates an expected call of Height
func (mr *MockAdvertiseMockRecorder) Height() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockAdvertise)(nil).Height))
}

// ID mocks base method
func (m *MockAdvertise) ID() int64 {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockAdvertiseMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockAdvertise)(nil).ID))
}

// Media mocks base method
func (m *MockAdvertise) Media() string {
	ret := m.ctrl.Call(m, "Media")
	ret0, _ := ret[0].(string)
	return ret0
}

// Media indicates an expected call of Media
func (mr *MockAdvertiseMockRecorder) Media() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Media", reflect.TypeOf((*MockAdvertise)(nil).Media))
}

// SetCapping mocks base method
func (m *MockAdvertise) SetCapping(arg0 entity.Capping) {
	m.ctrl.Call(m, "SetCapping", arg0)
}

// SetCapping indicates an expected call of SetCapping
func (mr *MockAdvertiseMockRecorder) SetCapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCapping", reflect.TypeOf((*MockAdvertise)(nil).SetCapping), arg0)
}

// Size mocks base method
func (m *MockAdvertise) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockAdvertiseMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockAdvertise)(nil).Size))
}

// Target mocks base method
func (m *MockAdvertise) Target() string {
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(string)
	return ret0
}

// Target indicates an expected call of Target
func (mr *MockAdvertiseMockRecorder) Target() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockAdvertise)(nil).Target))
}

// Type mocks base method
func (m *MockAdvertise) Type() entity.AdType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(entity.AdType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockAdvertiseMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockAdvertise)(nil).Type))
}

// Width mocks base method
func (m *MockAdvertise) Width() int {
	ret := m.ctrl.Call(m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width
func (mr *MockAdvertiseMockRecorder) Width() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Width", reflect.TypeOf((*MockAdvertise)(nil).Width))
}

// MockCampaign is a mock of Campaign interface
type MockCampaign struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignMockRecorder
}

// MockCampaignMockRecorder is the mock recorder for MockCampaign
type MockCampaignMockRecorder struct {
	mock *MockCampaign
}

// NewMockCampaign creates a new mock instance
func NewMockCampaign(ctrl *gomock.Controller) *MockCampaign {
	mock := &MockCampaign{ctrl: ctrl}
	mock.recorder = &MockCampaignMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCampaign) EXPECT() *MockCampaignMockRecorder {
	return m.recorder
}

// AllowedOS mocks base method
func (m *MockCampaign) AllowedOS() []string {
	ret := m.ctrl.Call(m, "AllowedOS")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AllowedOS indicates an expected call of AllowedOS
func (mr *MockCampaignMockRecorder) AllowedOS() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowedOS", reflect.TypeOf((*MockCampaign)(nil).AllowedOS))
}

// AppBrands mocks base method
func (m *MockCampaign) AppBrands() []string {
	ret := m.ctrl.Call(m, "AppBrands")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AppBrands indicates an expected call of AppBrands
func (mr *MockCampaignMockRecorder) AppBrands() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppBrands", reflect.TypeOf((*MockCampaign)(nil).AppBrands))
}

// AppCarriers mocks base method
func (m *MockCampaign) AppCarriers() []string {
	ret := m.ctrl.Call(m, "AppCarriers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AppCarriers indicates an expected call of AppCarriers
func (mr *MockCampaignMockRecorder) AppCarriers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppCarriers", reflect.TypeOf((*MockCampaign)(nil).AppCarriers))
}

// BlackListPublisher mocks base method
func (m *MockCampaign) BlackListPublisher() []string {
	ret := m.ctrl.Call(m, "BlackListPublisher")
	ret0, _ := ret[0].([]string)
	return ret0
}

// BlackListPublisher indicates an expected call of BlackListPublisher
func (mr *MockCampaignMockRecorder) BlackListPublisher() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlackListPublisher", reflect.TypeOf((*MockCampaign)(nil).BlackListPublisher))
}

// Category mocks base method
func (m *MockCampaign) Category() []entity.Category {
	ret := m.ctrl.Call(m, "Category")
	ret0, _ := ret[0].([]entity.Category)
	return ret0
}

// Category indicates an expected call of Category
func (mr *MockCampaignMockRecorder) Category() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Category", reflect.TypeOf((*MockCampaign)(nil).Category))
}

// Country mocks base method
func (m *MockCampaign) Country() []string {
	ret := m.ctrl.Call(m, "Country")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Country indicates an expected call of Country
func (mr *MockCampaignMockRecorder) Country() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Country", reflect.TypeOf((*MockCampaign)(nil).Country))
}

// Frequency mocks base method
func (m *MockCampaign) Frequency() int {
	ret := m.ctrl.Call(m, "Frequency")
	ret0, _ := ret[0].(int)
	return ret0
}

// Frequency indicates an expected call of Frequency
func (mr *MockCampaignMockRecorder) Frequency() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Frequency", reflect.TypeOf((*MockCampaign)(nil).Frequency))
}

// Hoods mocks base method
func (m *MockCampaign) Hoods() []string {
	ret := m.ctrl.Call(m, "Hoods")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Hoods indicates an expected call of Hoods
func (mr *MockCampaignMockRecorder) Hoods() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hoods", reflect.TypeOf((*MockCampaign)(nil).Hoods))
}

// ID mocks base method
func (m *MockCampaign) ID() int64 {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockCampaignMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCampaign)(nil).ID))
}

// ISP mocks base method
func (m *MockCampaign) ISP() []string {
	ret := m.ctrl.Call(m, "ISP")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ISP indicates an expected call of ISP
func (mr *MockCampaignMockRecorder) ISP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ISP", reflect.TypeOf((*MockCampaign)(nil).ISP))
}

// LatLon mocks base method
func (m *MockCampaign) LatLon() (float64, float64, float64) {
	ret := m.ctrl.Call(m, "LatLon")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(float64)
	return ret0, ret1, ret2
}

// LatLon indicates an expected call of LatLon
func (mr *MockCampaignMockRecorder) LatLon() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatLon", reflect.TypeOf((*MockCampaign)(nil).LatLon))
}

// MaxBID mocks base method
func (m *MockCampaign) MaxBID() int64 {
	ret := m.ctrl.Call(m, "MaxBID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxBID indicates an expected call of MaxBID
func (mr *MockCampaignMockRecorder) MaxBID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxBID", reflect.TypeOf((*MockCampaign)(nil).MaxBID))
}

// Name mocks base method
func (m *MockCampaign) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockCampaignMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCampaign)(nil).Name))
}

// NetProvider mocks base method
func (m *MockCampaign) NetProvider() []string {
	ret := m.ctrl.Call(m, "NetProvider")
	ret0, _ := ret[0].([]string)
	return ret0
}

// NetProvider indicates an expected call of NetProvider
func (mr *MockCampaignMockRecorder) NetProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetProvider", reflect.TypeOf((*MockCampaign)(nil).NetProvider))
}

// Province mocks base method
func (m *MockCampaign) Province() []string {
	ret := m.ctrl.Call(m, "Province")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Province indicates an expected call of Province
func (mr *MockCampaignMockRecorder) Province() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Province", reflect.TypeOf((*MockCampaign)(nil).Province))
}

// Target mocks base method
func (m *MockCampaign) Target() entity.Target {
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(entity.Target)
	return ret0
}

// Target indicates an expected call of Target
func (mr *MockCampaignMockRecorder) Target() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockCampaign)(nil).Target))
}

// Web mocks base method
func (m *MockCampaign) Web() bool {
	ret := m.ctrl.Call(m, "Web")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Web indicates an expected call of Web
func (mr *MockCampaignMockRecorder) Web() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Web", reflect.TypeOf((*MockCampaign)(nil).Web))
}

// WebMobile mocks base method
func (m *MockCampaign) WebMobile() bool {
	ret := m.ctrl.Call(m, "WebMobile")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WebMobile indicates an expected call of WebMobile
func (mr *MockCampaignMockRecorder) WebMobile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebMobile", reflect.TypeOf((*MockCampaign)(nil).WebMobile))
}

// WhiteListPublisher mocks base method
func (m *MockCampaign) WhiteListPublisher() []string {
	ret := m.ctrl.Call(m, "WhiteListPublisher")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WhiteListPublisher indicates an expected call of WhiteListPublisher
func (mr *MockCampaignMockRecorder) WhiteListPublisher() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhiteListPublisher", reflect.TypeOf((*MockCampaign)(nil).WhiteListPublisher))
}

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// BIDType mocks base method
func (m *MockPublisher) BIDType() entity.BIDType {
	ret := m.ctrl.Call(m, "BIDType")
	ret0, _ := ret[0].(entity.BIDType)
	return ret0
}

// BIDType indicates an expected call of BIDType
func (mr *MockPublisherMockRecorder) BIDType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BIDType", reflect.TypeOf((*MockPublisher)(nil).BIDType))
}

// CTR mocks base method
func (m *MockPublisher) CTR(arg0 int) float64 {
	ret := m.ctrl.Call(m, "CTR", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CTR indicates an expected call of CTR
func (mr *MockPublisherMockRecorder) CTR(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CTR", reflect.TypeOf((*MockPublisher)(nil).CTR), arg0)
}

// FloorCPM mocks base method
func (m *MockPublisher) FloorCPM() int64 {
	ret := m.ctrl.Call(m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FloorCPM indicates an expected call of FloorCPM
func (mr *MockPublisherMockRecorder) FloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorCPM", reflect.TypeOf((*MockPublisher)(nil).FloorCPM))
}

// ID mocks base method
func (m *MockPublisher) ID() int64 {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockPublisherMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPublisher)(nil).ID))
}

// MinBid mocks base method
func (m *MockPublisher) MinBid() int64 {
	ret := m.ctrl.Call(m, "MinBid")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MinBid indicates an expected call of MinBid
func (mr *MockPublisherMockRecorder) MinBid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinBid", reflect.TypeOf((*MockPublisher)(nil).MinBid))
}

// Name mocks base method
func (m *MockPublisher) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPublisherMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPublisher)(nil).Name))
}

// SoftFloorCPM mocks base method
func (m *MockPublisher) SoftFloorCPM() int64 {
	ret := m.ctrl.Call(m, "SoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SoftFloorCPM indicates an expected call of SoftFloorCPM
func (mr *MockPublisherMockRecorder) SoftFloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftFloorCPM", reflect.TypeOf((*MockPublisher)(nil).SoftFloorCPM))
}

// Supplier mocks base method
func (m *MockPublisher) Supplier() entity.Supplier {
	ret := m.ctrl.Call(m, "Supplier")
	ret0, _ := ret[0].(entity.Supplier)
	return ret0
}

// Supplier indicates an expected call of Supplier
func (mr *MockPublisherMockRecorder) Supplier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supplier", reflect.TypeOf((*MockPublisher)(nil).Supplier))
}

// MockLocation is a mock of Location interface
type MockLocation struct {
	ctrl     *gomock.Controller
	recorder *MockLocationMockRecorder
}

// MockLocationMockRecorder is the mock recorder for MockLocation
type MockLocationMockRecorder struct {
	mock *MockLocation
}

// NewMockLocation creates a new mock instance
func NewMockLocation(ctrl *gomock.Controller) *MockLocation {
	mock := &MockLocation{ctrl: ctrl}
	mock.recorder = &MockLocationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocation) EXPECT() *MockLocationMockRecorder {
	return m.recorder
}

// Country mocks base method
func (m *MockLocation) Country() entity.Country {
	ret := m.ctrl.Call(m, "Country")
	ret0, _ := ret[0].(entity.Country)
	return ret0
}

// Country indicates an expected call of Country
func (mr *MockLocationMockRecorder) Country() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Country", reflect.TypeOf((*MockLocation)(nil).Country))
}

// ISP mocks base method
func (m *MockLocation) ISP() entity.ISP {
	ret := m.ctrl.Call(m, "ISP")
	ret0, _ := ret[0].(entity.ISP)
	return ret0
}

// ISP indicates an expected call of ISP
func (mr *MockLocationMockRecorder) ISP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ISP", reflect.TypeOf((*MockLocation)(nil).ISP))
}

// LatLon mocks base method
func (m *MockLocation) LatLon() entity.LatLon {
	ret := m.ctrl.Call(m, "LatLon")
	ret0, _ := ret[0].(entity.LatLon)
	return ret0
}

// LatLon indicates an expected call of LatLon
func (mr *MockLocationMockRecorder) LatLon() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatLon", reflect.TypeOf((*MockLocation)(nil).LatLon))
}

// Province mocks base method
func (m *MockLocation) Province() entity.Province {
	ret := m.ctrl.Call(m, "Province")
	ret0, _ := ret[0].(entity.Province)
	return ret0
}

// Province indicates an expected call of Province
func (mr *MockLocationMockRecorder) Province() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Province", reflect.TypeOf((*MockLocation)(nil).Province))
}

// MockSeat is a mock of Seat interface
type MockSeat struct {
	ctrl     *gomock.Controller
	recorder *MockSeatMockRecorder
}

// MockSeatMockRecorder is the mock recorder for MockSeat
type MockSeatMockRecorder struct {
	mock *MockSeat
}

// NewMockSeat creates a new mock instance
func NewMockSeat(ctrl *gomock.Controller) *MockSeat {
	mock := &MockSeat{ctrl: ctrl}
	mock.recorder = &MockSeatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeat) EXPECT() *MockSeatMockRecorder {
	return m.recorder
}

// Bid mocks base method
func (m *MockSeat) Bid() float64 {
	ret := m.ctrl.Call(m, "Bid")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Bid indicates an expected call of Bid
func (mr *MockSeatMockRecorder) Bid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bid", reflect.TypeOf((*MockSeat)(nil).Bid))
}

// CTR mocks base method
func (m *MockSeat) CTR() float64 {
	ret := m.ctrl.Call(m, "CTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CTR indicates an expected call of CTR
func (mr *MockSeatMockRecorder) CTR() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CTR", reflect.TypeOf((*MockSeat)(nil).CTR))
}

// ClickURL mocks base method
func (m *MockSeat) ClickURL() string {
	ret := m.ctrl.Call(m, "ClickURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClickURL indicates an expected call of ClickURL
func (mr *MockSeatMockRecorder) ClickURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickURL", reflect.TypeOf((*MockSeat)(nil).ClickURL))
}

// Height mocks base method
func (m *MockSeat) Height() int {
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

// Height indicates an expected call of Height
func (mr *MockSeatMockRecorder) Height() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockSeat)(nil).Height))
}

// PublicID mocks base method
func (m *MockSeat) PublicID() string {
	ret := m.ctrl.Call(m, "PublicID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PublicID indicates an expected call of PublicID
func (mr *MockSeatMockRecorder) PublicID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicID", reflect.TypeOf((*MockSeat)(nil).PublicID))
}

// ReservedHash mocks base method
func (m *MockSeat) ReservedHash() string {
	ret := m.ctrl.Call(m, "ReservedHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// ReservedHash indicates an expected call of ReservedHash
func (mr *MockSeatMockRecorder) ReservedHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservedHash", reflect.TypeOf((*MockSeat)(nil).ReservedHash))
}

// SetWinnerAdvertise mocks base method
func (m *MockSeat) SetWinnerAdvertise(arg0 entity.Advertise, arg1 float64) {
	m.ctrl.Call(m, "SetWinnerAdvertise", arg0, arg1)
}

// SetWinnerAdvertise indicates an expected call of SetWinnerAdvertise
func (mr *MockSeatMockRecorder) SetWinnerAdvertise(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWinnerAdvertise", reflect.TypeOf((*MockSeat)(nil).SetWinnerAdvertise), arg0, arg1)
}

// ShowT mocks base method
func (m *MockSeat) ShowT() bool {
	ret := m.ctrl.Call(m, "ShowT")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShowT indicates an expected call of ShowT
func (mr *MockSeatMockRecorder) ShowT() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowT", reflect.TypeOf((*MockSeat)(nil).ShowT))
}

// ShowURL mocks base method
func (m *MockSeat) ShowURL() string {
	ret := m.ctrl.Call(m, "ShowURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShowURL indicates an expected call of ShowURL
func (mr *MockSeatMockRecorder) ShowURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowURL", reflect.TypeOf((*MockSeat)(nil).ShowURL))
}

// Size mocks base method
func (m *MockSeat) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockSeatMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockSeat)(nil).Size))
}

// Type mocks base method
func (m *MockSeat) Type() string {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockSeatMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockSeat)(nil).Type))
}

// Width mocks base method
func (m *MockSeat) Width() int {
	ret := m.ctrl.Call(m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width
func (mr *MockSeatMockRecorder) Width() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Width", reflect.TypeOf((*MockSeat)(nil).Width))
}

// WinnerAdvertise mocks base method
func (m *MockSeat) WinnerAdvertise() entity.Advertise {
	ret := m.ctrl.Call(m, "WinnerAdvertise")
	ret0, _ := ret[0].(entity.Advertise)
	return ret0
}

// WinnerAdvertise indicates an expected call of WinnerAdvertise
func (mr *MockSeatMockRecorder) WinnerAdvertise() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WinnerAdvertise", reflect.TypeOf((*MockSeat)(nil).WinnerAdvertise))
}

// MockSupplier is a mock of Supplier interface
type MockSupplier struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierMockRecorder
}

// MockSupplierMockRecorder is the mock recorder for MockSupplier
type MockSupplierMockRecorder struct {
	mock *MockSupplier
}

// NewMockSupplier creates a new mock instance
func NewMockSupplier(ctrl *gomock.Controller) *MockSupplier {
	mock := &MockSupplier{ctrl: ctrl}
	mock.recorder = &MockSupplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSupplier) EXPECT() *MockSupplierMockRecorder {
	return m.recorder
}

// AllowCreate mocks base method
func (m *MockSupplier) AllowCreate() bool {
	ret := m.ctrl.Call(m, "AllowCreate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowCreate indicates an expected call of AllowCreate
func (mr *MockSupplierMockRecorder) AllowCreate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowCreate", reflect.TypeOf((*MockSupplier)(nil).AllowCreate))
}

// BidType mocks base method
func (m *MockSupplier) BidType() entity.BIDType {
	ret := m.ctrl.Call(m, "BidType")
	ret0, _ := ret[0].(entity.BIDType)
	return ret0
}

// BidType indicates an expected call of BidType
func (mr *MockSupplierMockRecorder) BidType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BidType", reflect.TypeOf((*MockSupplier)(nil).BidType))
}

// DefaultCTR mocks base method
func (m *MockSupplier) DefaultCTR() float64 {
	ret := m.ctrl.Call(m, "DefaultCTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

// DefaultCTR indicates an expected call of DefaultCTR
func (mr *MockSupplierMockRecorder) DefaultCTR() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultCTR", reflect.TypeOf((*MockSupplier)(nil).DefaultCTR))
}

// DefaultFloorCPM mocks base method
func (m *MockSupplier) DefaultFloorCPM() int64 {
	ret := m.ctrl.Call(m, "DefaultFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// DefaultFloorCPM indicates an expected call of DefaultFloorCPM
func (mr *MockSupplierMockRecorder) DefaultFloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultFloorCPM", reflect.TypeOf((*MockSupplier)(nil).DefaultFloorCPM))
}

// DefaultMinBid mocks base method
func (m *MockSupplier) DefaultMinBid() int64 {
	ret := m.ctrl.Call(m, "DefaultMinBid")
	ret0, _ := ret[0].(int64)
	return ret0
}

// DefaultMinBid indicates an expected call of DefaultMinBid
func (mr *MockSupplierMockRecorder) DefaultMinBid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultMinBid", reflect.TypeOf((*MockSupplier)(nil).DefaultMinBid))
}

// DefaultSoftFloorCPM mocks base method
func (m *MockSupplier) DefaultSoftFloorCPM() int64 {
	ret := m.ctrl.Call(m, "DefaultSoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// DefaultSoftFloorCPM indicates an expected call of DefaultSoftFloorCPM
func (mr *MockSupplierMockRecorder) DefaultSoftFloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultSoftFloorCPM", reflect.TypeOf((*MockSupplier)(nil).DefaultSoftFloorCPM))
}

// Name mocks base method
func (m *MockSupplier) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockSupplierMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSupplier)(nil).Name))
}

// TinyMark mocks base method
func (m *MockSupplier) TinyMark() bool {
	ret := m.ctrl.Call(m, "TinyMark")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TinyMark indicates an expected call of TinyMark
func (mr *MockSupplierMockRecorder) TinyMark() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TinyMark", reflect.TypeOf((*MockSupplier)(nil).TinyMark))
}

// Token mocks base method
func (m *MockSupplier) Token() string {
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token
func (mr *MockSupplierMockRecorder) Token() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockSupplier)(nil).Token))
}

// MockRequest is a mock of Request interface
type MockRequest struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMockRecorder
}

// MockRequestMockRecorder is the mock recorder for MockRequest
type MockRequestMockRecorder struct {
	mock *MockRequest
}

// NewMockRequest creates a new mock instance
func NewMockRequest(ctrl *gomock.Controller) *MockRequest {
	mock := &MockRequest{ctrl: ctrl}
	mock.recorder = &MockRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequest) EXPECT() *MockRequestMockRecorder {
	return m.recorder
}

// Alexa mocks base method
func (m *MockRequest) Alexa() bool {
	ret := m.ctrl.Call(m, "Alexa")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Alexa indicates an expected call of Alexa
func (mr *MockRequestMockRecorder) Alexa() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alexa", reflect.TypeOf((*MockRequest)(nil).Alexa))
}

// EventPage mocks base method
func (m *MockRequest) EventPage() string {
	ret := m.ctrl.Call(m, "EventPage")
	ret0, _ := ret[0].(string)
	return ret0
}

// EventPage indicates an expected call of EventPage
func (mr *MockRequestMockRecorder) EventPage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPage", reflect.TypeOf((*MockRequest)(nil).EventPage))
}

// IP mocks base method
func (m *MockRequest) IP() net.IP {
	ret := m.ctrl.Call(m, "IP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// IP indicates an expected call of IP
func (mr *MockRequestMockRecorder) IP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockRequest)(nil).IP))
}

// IsMobile mocks base method
func (m *MockRequest) IsMobile() bool {
	ret := m.ctrl.Call(m, "IsMobile")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMobile indicates an expected call of IsMobile
func (mr *MockRequestMockRecorder) IsMobile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMobile", reflect.TypeOf((*MockRequest)(nil).IsMobile))
}

// Location mocks base method
func (m *MockRequest) Location() entity.Location {
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(entity.Location)
	return ret0
}

// Location indicates an expected call of Location
func (mr *MockRequestMockRecorder) Location() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockRequest)(nil).Location))
}

// OS mocks base method
func (m *MockRequest) OS() entity.OS {
	ret := m.ctrl.Call(m, "OS")
	ret0, _ := ret[0].(entity.OS)
	return ret0
}

// OS indicates an expected call of OS
func (mr *MockRequestMockRecorder) OS() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OS", reflect.TypeOf((*MockRequest)(nil).OS))
}

// Parent mocks base method
func (m *MockRequest) Parent() string {
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(string)
	return ret0
}

// Parent indicates an expected call of Parent
func (mr *MockRequestMockRecorder) Parent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockRequest)(nil).Parent))
}

// Protocol mocks base method
func (m *MockRequest) Protocol() entity.Protocol {
	ret := m.ctrl.Call(m, "Protocol")
	ret0, _ := ret[0].(entity.Protocol)
	return ret0
}

// Protocol indicates an expected call of Protocol
func (mr *MockRequestMockRecorder) Protocol() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocol", reflect.TypeOf((*MockRequest)(nil).Protocol))
}

// Referrer mocks base method
func (m *MockRequest) Referrer() string {
	ret := m.ctrl.Call(m, "Referrer")
	ret0, _ := ret[0].(string)
	return ret0
}

// Referrer indicates an expected call of Referrer
func (mr *MockRequestMockRecorder) Referrer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Referrer", reflect.TypeOf((*MockRequest)(nil).Referrer))
}

// Suspicious mocks base method
func (m *MockRequest) Suspicious() int {
	ret := m.ctrl.Call(m, "Suspicious")
	ret0, _ := ret[0].(int)
	return ret0
}

// Suspicious indicates an expected call of Suspicious
func (mr *MockRequestMockRecorder) Suspicious() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspicious", reflect.TypeOf((*MockRequest)(nil).Suspicious))
}

// Timestamp mocks base method
func (m *MockRequest) Timestamp() time.Time {
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Timestamp indicates an expected call of Timestamp
func (mr *MockRequestMockRecorder) Timestamp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockRequest)(nil).Timestamp))
}

// UserAgent mocks base method
func (m *MockRequest) UserAgent() string {
	ret := m.ctrl.Call(m, "UserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserAgent indicates an expected call of UserAgent
func (mr *MockRequestMockRecorder) UserAgent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAgent", reflect.TypeOf((*MockRequest)(nil).UserAgent))
}
