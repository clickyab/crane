// Automatically generated by MockGen. DO NOT EDIT!
// Source: clickyab.com/exchange/octopus/exchange (interfaces: Impression,Demand,Advertise,Publisher,Location,Slot,Supplier)

package mock_exchange

import (
	context "context"
	net "net"
	http "net/http"
	time "time"

	exchange "clickyab.com/exchange/octopus/exchange"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Impression interface
type MockImpression struct {
	ctrl     *gomock.Controller
	recorder *_MockImpressionRecorder
}

// Recorder for MockImpression (not exported)
type _MockImpressionRecorder struct {
	mock *MockImpression
}

func NewMockImpression(ctrl *gomock.Controller) *MockImpression {
	mock := &MockImpression{ctrl: ctrl}
	mock.recorder = &_MockImpressionRecorder{mock}
	return mock
}

func (_m *MockImpression) EXPECT() *_MockImpressionRecorder {
	return _m.recorder
}

func (_m *MockImpression) Attributes() map[string]interface{} {
	ret := _m.ctrl.Call(_m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

func (_mr *_MockImpressionRecorder) Attributes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Attributes")
}

func (_m *MockImpression) Category() []exchange.Category {
	ret := _m.ctrl.Call(_m, "Category")
	ret0, _ := ret[0].([]exchange.Category)
	return ret0
}

func (_mr *_MockImpressionRecorder) Category() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Category")
}

func (_m *MockImpression) IP() net.IP {
	ret := _m.ctrl.Call(_m, "IP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

func (_mr *_MockImpressionRecorder) IP() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IP")
}

func (_m *MockImpression) Location() exchange.Location {
	ret := _m.ctrl.Call(_m, "Location")
	ret0, _ := ret[0].(exchange.Location)
	return ret0
}

func (_mr *_MockImpressionRecorder) Location() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Location")
}

func (_m *MockImpression) PageTrackID() string {
	ret := _m.ctrl.Call(_m, "PageTrackID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockImpressionRecorder) PageTrackID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PageTrackID")
}

func (_m *MockImpression) Platform() exchange.ImpressionPlatform {
	ret := _m.ctrl.Call(_m, "Platform")
	ret0, _ := ret[0].(exchange.ImpressionPlatform)
	return ret0
}

func (_mr *_MockImpressionRecorder) Platform() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Platform")
}

func (_m *MockImpression) Scheme() string {
	ret := _m.ctrl.Call(_m, "Scheme")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockImpressionRecorder) Scheme() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Scheme")
}

func (_m *MockImpression) Slots() []exchange.Slot {
	ret := _m.ctrl.Call(_m, "Slots")
	ret0, _ := ret[0].([]exchange.Slot)
	return ret0
}

func (_mr *_MockImpressionRecorder) Slots() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Slots")
}

func (_m *MockImpression) Source() exchange.Publisher {
	ret := _m.ctrl.Call(_m, "Source")
	ret0, _ := ret[0].(exchange.Publisher)
	return ret0
}

func (_mr *_MockImpressionRecorder) Source() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Source")
}

func (_m *MockImpression) Time() time.Time {
	ret := _m.ctrl.Call(_m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockImpressionRecorder) Time() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Time")
}

func (_m *MockImpression) TrackID() string {
	ret := _m.ctrl.Call(_m, "TrackID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockImpressionRecorder) TrackID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TrackID")
}

func (_m *MockImpression) UnderFloor() bool {
	ret := _m.ctrl.Call(_m, "UnderFloor")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockImpressionRecorder) UnderFloor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnderFloor")
}

func (_m *MockImpression) UserAgent() string {
	ret := _m.ctrl.Call(_m, "UserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockImpressionRecorder) UserAgent() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UserAgent")
}

func (_m *MockImpression) UserTrackID() string {
	ret := _m.ctrl.Call(_m, "UserTrackID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockImpressionRecorder) UserTrackID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UserTrackID")
}

// Mock of Demand interface
type MockDemand struct {
	ctrl     *gomock.Controller
	recorder *_MockDemandRecorder
}

// Recorder for MockDemand (not exported)
type _MockDemandRecorder struct {
	mock *MockDemand
}

func NewMockDemand(ctrl *gomock.Controller) *MockDemand {
	mock := &MockDemand{ctrl: ctrl}
	mock.recorder = &_MockDemandRecorder{mock}
	return mock
}

func (_m *MockDemand) EXPECT() *_MockDemandRecorder {
	return _m.recorder
}

func (_m *MockDemand) CallRate() int {
	ret := _m.ctrl.Call(_m, "CallRate")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDemandRecorder) CallRate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CallRate")
}

func (_m *MockDemand) ExcludedSuppliers() []string {
	ret := _m.ctrl.Call(_m, "ExcludedSuppliers")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockDemandRecorder) ExcludedSuppliers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExcludedSuppliers")
}

func (_m *MockDemand) Handicap() int64 {
	ret := _m.ctrl.Call(_m, "Handicap")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockDemandRecorder) Handicap() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Handicap")
}

func (_m *MockDemand) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockDemandRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockDemand) Provide(_param0 context.Context, _param1 exchange.Impression, _param2 chan exchange.Advertise) {
	_m.ctrl.Call(_m, "Provide", _param0, _param1, _param2)
}

func (_mr *_MockDemandRecorder) Provide(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Provide", arg0, arg1, arg2)
}

func (_m *MockDemand) Status(_param0 context.Context, _param1 http.ResponseWriter, _param2 *http.Request) {
	_m.ctrl.Call(_m, "Status", _param0, _param1, _param2)
}

func (_mr *_MockDemandRecorder) Status(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status", arg0, arg1, arg2)
}

func (_m *MockDemand) WhiteListCountries() []string {
	ret := _m.ctrl.Call(_m, "WhiteListCountries")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockDemandRecorder) WhiteListCountries() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WhiteListCountries")
}

func (_m *MockDemand) Win(_param0 context.Context, _param1 string, _param2 int64) {
	_m.ctrl.Call(_m, "Win", _param0, _param1, _param2)
}

func (_mr *_MockDemandRecorder) Win(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Win", arg0, arg1, arg2)
}

// Mock of Advertise interface
type MockAdvertise struct {
	ctrl     *gomock.Controller
	recorder *_MockAdvertiseRecorder
}

// Recorder for MockAdvertise (not exported)
type _MockAdvertiseRecorder struct {
	mock *MockAdvertise
}

func NewMockAdvertise(ctrl *gomock.Controller) *MockAdvertise {
	mock := &MockAdvertise{ctrl: ctrl}
	mock.recorder = &_MockAdvertiseRecorder{mock}
	return mock
}

func (_m *MockAdvertise) EXPECT() *_MockAdvertiseRecorder {
	return _m.recorder
}

func (_m *MockAdvertise) Demand() exchange.Demand {
	ret := _m.ctrl.Call(_m, "Demand")
	ret0, _ := ret[0].(exchange.Demand)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Demand() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Demand")
}

func (_m *MockAdvertise) Height() int {
	ret := _m.ctrl.Call(_m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Height() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Height")
}

func (_m *MockAdvertise) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockAdvertise) Landing() string {
	ret := _m.ctrl.Call(_m, "Landing")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Landing() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Landing")
}

func (_m *MockAdvertise) MaxCPM() int64 {
	ret := _m.ctrl.Call(_m, "MaxCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) MaxCPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxCPM")
}

func (_m *MockAdvertise) Rates() []exchange.Rate {
	ret := _m.ctrl.Call(_m, "Rates")
	ret0, _ := ret[0].([]exchange.Rate)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Rates() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rates")
}

func (_m *MockAdvertise) SetWinnerCPM(_param0 int64) {
	_m.ctrl.Call(_m, "SetWinnerCPM", _param0)
}

func (_mr *_MockAdvertiseRecorder) SetWinnerCPM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWinnerCPM", arg0)
}

func (_m *MockAdvertise) SlotTrackID() string {
	ret := _m.ctrl.Call(_m, "SlotTrackID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) SlotTrackID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SlotTrackID")
}

func (_m *MockAdvertise) TrackID() string {
	ret := _m.ctrl.Call(_m, "TrackID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) TrackID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TrackID")
}

func (_m *MockAdvertise) URL() string {
	ret := _m.ctrl.Call(_m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) URL() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "URL")
}

func (_m *MockAdvertise) Width() int {
	ret := _m.ctrl.Call(_m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) Width() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Width")
}

func (_m *MockAdvertise) WinnerCPM() int64 {
	ret := _m.ctrl.Call(_m, "WinnerCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockAdvertiseRecorder) WinnerCPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WinnerCPM")
}

// Mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *_MockPublisherRecorder
}

// Recorder for MockPublisher (not exported)
type _MockPublisherRecorder struct {
	mock *MockPublisher
}

func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &_MockPublisherRecorder{mock}
	return mock
}

func (_m *MockPublisher) EXPECT() *_MockPublisherRecorder {
	return _m.recorder
}

func (_m *MockPublisher) Attributes() map[string]interface{} {
	ret := _m.ctrl.Call(_m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

func (_mr *_MockPublisherRecorder) Attributes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Attributes")
}

func (_m *MockPublisher) FloorCPM() int64 {
	ret := _m.ctrl.Call(_m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockPublisherRecorder) FloorCPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FloorCPM")
}

func (_m *MockPublisher) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPublisherRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockPublisher) Rates() []exchange.Rate {
	ret := _m.ctrl.Call(_m, "Rates")
	ret0, _ := ret[0].([]exchange.Rate)
	return ret0
}

func (_mr *_MockPublisherRecorder) Rates() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rates")
}

func (_m *MockPublisher) SoftFloorCPM() int64 {
	ret := _m.ctrl.Call(_m, "SoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockPublisherRecorder) SoftFloorCPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SoftFloorCPM")
}

func (_m *MockPublisher) Supplier() exchange.Supplier {
	ret := _m.ctrl.Call(_m, "Supplier")
	ret0, _ := ret[0].(exchange.Supplier)
	return ret0
}

func (_mr *_MockPublisherRecorder) Supplier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Supplier")
}

// Mock of Location interface
type MockLocation struct {
	ctrl     *gomock.Controller
	recorder *_MockLocationRecorder
}

// Recorder for MockLocation (not exported)
type _MockLocationRecorder struct {
	mock *MockLocation
}

func NewMockLocation(ctrl *gomock.Controller) *MockLocation {
	mock := &MockLocation{ctrl: ctrl}
	mock.recorder = &_MockLocationRecorder{mock}
	return mock
}

func (_m *MockLocation) EXPECT() *_MockLocationRecorder {
	return _m.recorder
}

func (_m *MockLocation) Country() exchange.Country {
	ret := _m.ctrl.Call(_m, "Country")
	ret0, _ := ret[0].(exchange.Country)
	return ret0
}

func (_mr *_MockLocationRecorder) Country() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Country")
}

func (_m *MockLocation) LatLon() exchange.LatLon {
	ret := _m.ctrl.Call(_m, "LatLon")
	ret0, _ := ret[0].(exchange.LatLon)
	return ret0
}

func (_mr *_MockLocationRecorder) LatLon() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatLon")
}

func (_m *MockLocation) Province() exchange.Province {
	ret := _m.ctrl.Call(_m, "Province")
	ret0, _ := ret[0].(exchange.Province)
	return ret0
}

func (_mr *_MockLocationRecorder) Province() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Province")
}

// Mock of Slot interface
type MockSlot struct {
	ctrl     *gomock.Controller
	recorder *_MockSlotRecorder
}

// Recorder for MockSlot (not exported)
type _MockSlotRecorder struct {
	mock *MockSlot
}

func NewMockSlot(ctrl *gomock.Controller) *MockSlot {
	mock := &MockSlot{ctrl: ctrl}
	mock.recorder = &_MockSlotRecorder{mock}
	return mock
}

func (_m *MockSlot) EXPECT() *_MockSlotRecorder {
	return _m.recorder
}

func (_m *MockSlot) Fallback() string {
	ret := _m.ctrl.Call(_m, "Fallback")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSlotRecorder) Fallback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fallback")
}

func (_m *MockSlot) Height() int {
	ret := _m.ctrl.Call(_m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockSlotRecorder) Height() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Height")
}

func (_m *MockSlot) TrackID() string {
	ret := _m.ctrl.Call(_m, "TrackID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSlotRecorder) TrackID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TrackID")
}

func (_m *MockSlot) Width() int {
	ret := _m.ctrl.Call(_m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockSlotRecorder) Width() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Width")
}

// Mock of Supplier interface
type MockSupplier struct {
	ctrl     *gomock.Controller
	recorder *_MockSupplierRecorder
}

// Recorder for MockSupplier (not exported)
type _MockSupplierRecorder struct {
	mock *MockSupplier
}

func NewMockSupplier(ctrl *gomock.Controller) *MockSupplier {
	mock := &MockSupplier{ctrl: ctrl}
	mock.recorder = &_MockSupplierRecorder{mock}
	return mock
}

func (_m *MockSupplier) EXPECT() *_MockSupplierRecorder {
	return _m.recorder
}

func (_m *MockSupplier) ExcludedDemands() []string {
	ret := _m.ctrl.Call(_m, "ExcludedDemands")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockSupplierRecorder) ExcludedDemands() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExcludedDemands")
}

func (_m *MockSupplier) FloorCPM() int64 {
	ret := _m.ctrl.Call(_m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockSupplierRecorder) FloorCPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FloorCPM")
}

func (_m *MockSupplier) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSupplierRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockSupplier) Renderer() exchange.Renderer {
	ret := _m.ctrl.Call(_m, "Renderer")
	ret0, _ := ret[0].(exchange.Renderer)
	return ret0
}

func (_mr *_MockSupplierRecorder) Renderer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Renderer")
}

func (_m *MockSupplier) Share() int {
	ret := _m.ctrl.Call(_m, "Share")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockSupplierRecorder) Share() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Share")
}

func (_m *MockSupplier) SoftFloorCPM() int64 {
	ret := _m.ctrl.Call(_m, "SoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockSupplierRecorder) SoftFloorCPM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SoftFloorCPM")
}
