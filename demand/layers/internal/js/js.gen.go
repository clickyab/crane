// Code generated by go-bindata.
// sources:
// tracker.js
// DO NOT EDIT!

package js

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trackerJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4f\x6b\xdb\x4c\x10\xc6\xef\xef\xa7\xd8\xec\x41\xec\xa0\x45\xb1\x1d\x72\x88\xc5\xbe\xa6\xa4\x69\x29\xb4\x17\xd3\x9c\x5c\xd5\xc8\xa3\x89\x3d\x58\xda\x15\xab\x55\x6c\x63\xf4\xdd\x8b\x2c\xff\x81\xd0\x43\x6f\xfb\xcc\x3e\x33\xf3\xe3\x99\xbb\xb7\xd6\x62\x60\x67\x15\x1c\xdf\x73\x2f\x50\x53\x7a\x29\x09\x56\x38\x54\xc9\x58\xda\x89\x39\xad\x5f\xf6\xb5\xc2\x58\x1a\xb5\xf8\x9d\x66\x31\x48\x48\x68\x4f\xa8\x0a\x87\x6d\x45\x36\x24\xe8\xdc\x96\x09\x52\x4f\xa1\xf5\x56\xd8\xb6\x2c\xef\x0c\xcd\x0a\x42\x57\xd0\xeb\xfc\x9b\xa2\xc5\x38\x83\x69\x5f\xef\xae\x6b\x6c\xbf\xe6\xdc\x71\x75\x3e\xbb\xaa\x76\x96\x6c\x50\x98\x78\xaa\xcb\x1c\x49\xdd\xff\x8a\xef\xd7\x5a\x0a\x09\xd0\xf5\x58\xce\x7c\xa4\x37\xc7\x4e\x93\x29\x1d\xe6\x7d\x35\x69\x28\xf7\xb8\x49\x9a\x76\xd5\x04\xcf\x76\xad\xc6\x90\x34\x75\xc9\x41\xc9\x48\x42\xfa\xe6\xbc\xea\xdb\x58\xb0\x15\x34\x8c\x70\x86\x16\x9c\x5d\x5c\x46\x42\xea\x92\x92\xec\x3a\x6c\xfe\x1f\x47\x91\xc2\x85\x55\x6e\x31\xca\x20\x33\xfd\x63\x9c\x01\x74\x67\x74\xec\x14\xa4\x68\x5c\x82\x87\x25\x96\x8c\x5b\x4d\x83\xe0\xaa\xd6\x18\x45\x34\xfb\x98\x93\x91\x17\xab\x91\x31\xc6\x32\x15\xb4\xaf\xd9\x53\x63\xbe\x78\xd6\xe2\x61\x2c\x3e\x13\x8a\xc9\x68\x32\x11\x93\x87\xe9\xe3\xd3\xf4\xf1\x49\x7c\xfd\xf1\x53\xea\xbf\xcd\xe1\xaa\x36\x32\xa6\x7f\x9f\x02\x53\x85\x86\xd5\x95\x41\x82\xbe\x68\xae\x6a\x09\xa0\x77\x6c\x0b\xb7\x4b\x4e\xbf\x87\x7c\xb5\xc4\xbc\x2c\x57\x39\x6e\x6f\xb1\x33\x1c\x87\x1b\x1b\x8a\xa2\x77\xc7\x85\x18\x0d\xef\xab\x03\x35\x69\x1e\xa2\xb5\xe6\xc6\xed\x29\x0f\xf4\x52\x52\xaf\x94\xe4\x6a\x2d\x21\xed\xef\x15\x3e\x85\xe0\x79\xd5\x06\x52\xb2\xf1\x28\xb5\x3c\x1e\x93\xd7\xf9\xf7\xae\x9b\x9d\x30\x96\x5c\x0c\x59\x45\x5c\xd5\x83\xa0\x58\x46\xf9\x69\xd9\xa0\x19\x6e\xf9\xac\x5c\x71\x48\xf2\xba\x26\x5b\x3c\x6f\xb8\x2c\x94\x85\xee\x8c\xd4\xf5\xe7\xfa\xef\x4f\x00\x00\x00\xff\xff\x41\xbb\x94\x11\x00\x03\x00\x00"

func trackerJsBytes() ([]byte, error) {
	return bindataRead(
		_trackerJs,
		"tracker.js",
	)
}

func trackerJs() (*asset, error) {
	bytes, err := trackerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tracker.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tracker.js": trackerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tracker.js": &bintree{trackerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

