// Code generated by go-bindata.
// sources:
// tracker.js
// DO NOT EDIT!

package js

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trackerJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xcd\x6e\xdb\x3c\x10\xbc\x7f\x4f\xc1\xf0\x20\x70\x21\x42\xb1\x1d\xe4\x10\x0b\xfc\x8c\x22\x4d\x8b\x02\xed\xc5\x68\x4e\xae\x6a\xc8\xab\x8d\xbd\xb0\x44\x0a\x14\x15\xdb\x30\xf4\xee\x85\x2c\xff\x00\x41\x0f\xbd\xed\x0c\xf7\x67\x38\x73\xf7\xd6\x5a\x0c\xec\xac\x82\xe3\x7b\xee\x05\x6a\x4a\x2f\x94\x60\x85\x03\x4b\xc6\xd2\x4e\xcc\x69\xfd\xb2\xaf\x15\xc6\xd2\xa8\xc5\xef\x34\x8b\x41\x42\x42\x7b\x42\x55\x38\x6c\x2b\xb2\x21\x41\xe7\xb6\x4c\x90\x7a\x0a\xad\xb7\xc2\xb6\x65\x79\x67\x68\x56\x10\xba\x82\x5e\xe7\xdf\x14\x2d\xc6\x19\x4c\x7b\xbe\xbb\x9e\xb1\xfd\x99\xf3\xc4\xb5\xf3\xd9\x55\xb5\xb3\x64\x83\xc2\xc4\x53\x5d\xe6\x48\xea\xfe\x57\x7c\xbf\xd6\x52\x48\x80\xae\x97\xe5\xcc\x47\xf5\xe6\xd8\x69\x32\xa5\xc3\xbc\x67\x93\x86\x72\x8f\x9b\xa4\x69\x57\x4d\xf0\x6c\xd7\x6a\x0c\x49\x53\x97\x1c\x94\x8c\x24\xa4\x6f\xce\xab\x7e\x8c\x05\x5b\x41\xc3\x0a\x67\x68\xc1\xd9\xa5\xcb\x48\x48\x5d\x52\x92\x5d\x87\xcd\xff\xe3\x28\x52\xb8\xb0\xca\x2d\x46\x19\x64\xa6\x2f\xc6\x19\x40\x77\x96\x8e\x9d\x82\x14\x8d\x4b\xf0\xb0\xc4\x92\x71\xab\x69\x00\x5c\xd5\x1a\xa3\x88\x66\x1f\x7d\x32\xf2\xd2\x6a\x64\x8c\xb1\x4c\x05\xed\x6b\xf6\xd4\x98\x2f\x9e\xb5\x78\x18\x8b\xcf\x84\x62\x32\x9a\x4c\xc4\xe4\x61\xfa\xf8\x34\x7d\x7c\x12\x5f\x7f\xfc\x94\xfa\x6f\x7b\xb8\xaa\x8d\x8c\xe9\xdf\xb7\xc0\x54\xa1\x61\x75\xd5\x20\x41\x5f\x30\x57\xb5\x04\xd0\x3b\xb6\x85\xdb\x25\xa7\xd7\x43\xbe\x5a\x62\x5e\x96\xab\x1c\xb7\x37\xdb\x19\x8e\xef\x8e\x0b\x31\x32\xc6\x70\x14\x29\x36\x52\x82\x1e\x62\x37\x14\x45\xc3\xe3\x50\x5f\x87\x50\x93\xe6\xc1\x6d\x6b\x6e\x5f\xf1\x94\x07\x7a\x29\xa9\x47\x4a\x72\xb5\x96\x90\xf6\x11\x86\x4f\x21\x78\x5e\xb5\x81\x94\x6c\x3c\x4a\x2d\x8f\xc7\xe4\x75\xfe\xbd\xeb\x66\x27\x65\x4b\x2e\x06\xfb\xb8\xaa\x87\x9a\x62\x19\xe5\xa7\x5b\x03\x66\xb8\x39\xb6\x72\xc5\x21\xc9\xeb\x9a\x6c\xf1\xbc\xe1\xb2\x50\x16\xba\xb3\xa2\xae\x0f\xf0\xbf\x3f\x01\x00\x00\xff\xff\xfa\xa4\x5b\x11\x12\x03\x00\x00"

func trackerJsBytes() ([]byte, error) {
	return bindataRead(
		_trackerJs,
		"tracker.js",
	)
}

func trackerJs() (*asset, error) {
	bytes, err := trackerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tracker.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tracker.js": trackerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tracker.js": &bintree{trackerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

