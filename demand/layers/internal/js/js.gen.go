// Code generated by go-bindata.
// sources:
// tracker.js
// DO NOT EDIT!

package js

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trackerJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\xdb\x30\x0c\xbd\xef\x57\xa8\x3c\x18\x22\x6c\xa8\x4d\x8a\x1e\x1a\x43\x2b\x86\xae\x1b\x06\x6c\x97\x60\x3d\x65\x5e\xe1\xd0\x6c\x22\x44\x96\x0c\x59\x6e\x12\x04\xfe\xef\x83\xe7\x7c\x00\xc5\x0e\xbb\x91\x8f\xe4\xe3\xd3\xa3\xae\x5e\x3b\x47\xd1\x78\x27\xf1\xf0\x56\x06\x41\x19\xe7\x27\x48\x38\x49\x23\xca\xda\xf1\x56\xcc\x79\xf5\xb4\x6b\x24\xa5\xa0\xe5\xe2\x77\x5e\xa4\x08\xa8\x78\xc7\x24\x2b\x4f\x5d\xcd\x2e\x2a\xf2\x7e\x63\x18\xf3\xc0\xb1\x0b\x4e\xb8\xce\xda\x2b\xcd\x0f\x15\x93\xaf\xf8\x79\xfe\x4d\xf2\x62\x52\xe0\x6c\xc0\xfb\xf3\x1a\x33\xac\x39\x4e\x9c\x3b\x1f\x7d\xdd\x78\xc7\x2e\x4a\x52\x81\x1b\x5b\x12\xcb\xeb\x5f\xe9\xf5\x2a\x03\x01\x88\xfd\x20\xcb\xeb\xf7\xea\xf5\xa1\xcf\x58\x5b\x4f\xe5\x80\xaa\x96\xcb\x40\x6b\xd5\x76\xcb\x36\x06\xe3\x56\x72\x82\xaa\x6d\xac\x89\x12\x12\xc0\xfc\xd5\x07\x39\x8c\x39\x61\x9c\xe0\x91\xc2\x6b\x5e\xb8\xe2\xd4\xa5\x01\x73\xaf\x2c\xbb\x55\x5c\x7f\x9c\x24\x89\xa4\x85\x91\x7e\x71\x53\x60\xa1\x87\x60\x52\x20\xf6\x47\xe9\xd4\x4b\xcc\x49\x7b\x45\xfb\x17\xb2\x86\x36\x19\x8f\x89\xa9\x9b\x8c\x92\x84\x1f\xde\xfb\xa4\xe1\xd4\xaa\x21\xa5\x14\x72\xc1\xbb\xc6\x04\x6e\xf5\x97\x60\x32\x71\x3b\x11\x9f\x99\xc4\xf4\x66\x3a\x15\xd3\xdb\xd9\xdd\xfd\xec\xee\x5e\x7c\xfd\xf1\x13\xb2\x7f\xf1\x98\xba\xd1\x90\xf2\xff\xb3\xe0\x4c\x92\x76\xf2\xac\x01\x30\x3b\xe5\xa6\x6e\x00\x31\xdb\x1a\x57\xf9\xad\xfa\x5b\xdd\x97\xcb\x17\x2a\xad\x5d\x96\xb4\xb9\xd8\x7e\xfc\x1f\x2e\x7f\xf3\xa6\x12\x37\x5a\x6b\x1a\x4c\xd2\x00\x98\x8d\xc7\xd7\x9c\x24\x63\x71\x8c\xa5\x74\xfa\x22\x3f\x70\x19\xf9\xc9\xf2\x90\x49\x30\xf5\x0a\x10\x55\xcb\xf1\x53\x8c\xc1\x2c\xbb\xc8\x12\xda\x40\x90\xc1\xe1\xa0\x9e\xe7\xdf\xfb\x1e\xf0\xf2\xf8\xa5\xaf\xf6\xaa\x6c\x1a\x76\xd5\xe3\xda\xd8\x4a\x3a\xc4\x7e\x38\xc2\x87\x3f\x01\x00\x00\xff\xff\xa7\xb1\x1a\x80\xd6\x02\x00\x00"

func trackerJsBytes() ([]byte, error) {
	return bindataRead(
		_trackerJs,
		"tracker.js",
	)
}

func trackerJs() (*asset, error) {
	bytes, err := trackerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tracker.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tracker.js": trackerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tracker.js": &bintree{trackerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

