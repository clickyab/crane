// Code generated by go-bindata.
// sources:
// tracker.js
// DO NOT EDIT!

package js

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trackerJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xcd\x6e\xdb\x3c\x10\xbc\x7f\x4f\xc1\xf0\x20\x70\x21\x42\xb1\x1d\xe4\x10\x0b\xfc\x8c\x22\x4d\x8b\x02\xed\xc5\x68\x4e\xae\x6a\xc8\xab\x8d\xbd\xb0\x44\x0a\x14\x15\xdb\x30\xf4\xee\x85\x2c\xff\x00\x41\x0f\xbd\x71\x66\xff\x86\x33\x77\x6f\xad\xc5\xc0\xce\x2a\x38\xbe\xe7\x5e\xa0\xa6\xf4\x42\x09\x56\x38\xb0\x64\x2c\xed\xc4\x9c\xd6\x2f\xfb\x5a\x61\x2c\x8d\x5a\xfc\x4e\xb3\x18\x24\x24\xb4\x27\x54\x85\xc3\xb6\x22\x1b\x12\x74\x6e\xcb\x04\xa9\xa7\xd0\x7a\x2b\x6c\x5b\x96\x77\x86\x66\x05\xa1\x2b\xe8\x75\xfe\x4d\xd1\x62\x9c\xc1\xb4\xe7\xbb\xeb\x19\xdb\x9f\x39\x4f\x5c\x3b\x9f\x5d\x55\x3b\x4b\x36\x28\x4c\x3c\xd5\x65\x8e\xa4\xee\x7f\xc5\xf7\x6b\x2d\x85\x04\xe8\x7a\x59\xce\x7c\x54\x6f\x8e\x9d\x26\x53\x3a\xcc\x7b\x36\x69\x28\xf7\xb8\x49\x9a\x76\xd5\x04\xcf\x76\xad\xc6\x90\x34\x75\xc9\x41\xc9\x48\x42\xfa\xe6\xbc\xea\xc7\x58\xb0\x15\x34\xac\x70\x86\x16\x9c\x5d\xba\x8c\x84\xd4\x25\x25\xd9\x75\xd8\xfc\x3f\x8e\x22\x85\x0b\xab\xdc\x62\x94\x41\x66\xfa\xc7\x38\x03\xe8\xce\xd2\xb1\x53\x90\xa2\x71\x09\x1e\x96\x58\x32\x6e\x35\x0d\x80\xab\x5a\x63\x14\xd1\xec\xa3\x4f\x46\x5e\x5a\x8d\x8c\x31\x96\xa9\xa0\x7d\xcd\x9e\x1a\xf3\xc5\xb3\x16\x0f\x63\xf1\x99\x50\x4c\x46\x93\x89\x98\x3c\x4c\x1f\x9f\xa6\x8f\x4f\xe2\xeb\x8f\x9f\x52\xff\x6d\x0f\x57\xb5\x91\x31\xfd\xfb\x16\x98\x2a\x34\xac\xae\x1a\x24\xe8\x0b\xe6\xaa\x96\x00\x7a\xc7\xb6\x70\xbb\xe4\x54\x3d\xe4\xab\x25\xe6\x65\xb9\xca\x71\x7b\xb3\x9d\xe1\xf8\xee\xb8\x10\x23\x63\x0c\x47\x91\x62\x23\x25\xe8\x21\x76\x43\x51\x34\x14\x87\xf7\x75\x08\x35\x69\x1e\xdc\xb6\xe6\xf6\x15\x4f\x79\xa0\x97\x92\x7a\xa4\x24\x57\x6b\x09\x69\x1f\x61\xf8\x14\x82\xe7\x55\x1b\x48\xc9\xc6\xa3\xd4\xf2\x78\x4c\x5e\xe7\xdf\xbb\x6e\x76\x52\xb6\xe4\x62\xb0\x2f\xe2\xaa\x1e\x00\xc5\x32\xca\x4f\xc7\x06\xcc\x70\xb3\x6c\xe5\x8a\x43\x92\xd7\x35\xd9\xe2\x79\xc3\x65\xa1\x2c\x74\x67\x49\x5d\x9f\xe0\x7f\x7f\x02\x00\x00\xff\xff\x3a\xc4\x9a\xd3\x13\x03\x00\x00"

func trackerJsBytes() ([]byte, error) {
	return bindataRead(
		_trackerJs,
		"tracker.js",
	)
}

func trackerJs() (*asset, error) {
	bytes, err := trackerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tracker.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tracker.js": trackerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tracker.js": &bintree{trackerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

