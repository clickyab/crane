// Code generated by go-bindata.
// sources:
// tracker.js
// DO NOT EDIT!

package js

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trackerJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcb\x6e\xdb\x3a\x10\x86\xf7\xe7\x29\x18\x2e\x04\x0e\x44\x48\xb1\x83\x2c\x62\x81\x27\x28\xd2\xb4\xe8\xa2\x9b\xa0\x5d\xb9\x6a\x20\x8f\x26\xf6\x20\x12\x49\x50\x54\x62\xc3\xd0\xbb\x17\xb2\x7c\x01\x82\x2e\xba\x9b\xf9\xe7\xc2\x8f\xff\x5c\xbd\xf4\x16\x23\x3b\xab\x60\xff\x56\x05\x81\x9a\x8b\x93\x24\x48\xe1\xa4\xb2\xb1\xf4\x2e\x9e\x68\xfd\xb8\xf5\x0a\x53\x69\xd4\xf2\x77\x51\xa6\x20\x21\xa3\x2d\xa1\xaa\x1d\xf6\x2d\xd9\x98\xa1\x73\xaf\x4c\x50\x04\x8a\x7d\xb0\xc2\xf6\x4d\x73\x65\xf8\xbe\x26\x74\x35\xfd\x7c\xfa\xa6\x78\x39\x2b\x61\x31\xea\xc3\xf9\x19\x3b\x3e\x73\x9c\x38\x77\x3e\xb8\xd6\x3b\x4b\x36\x2a\xcc\x02\xf9\xa6\x42\x52\xf9\xaf\x34\x5f\x6b\x29\x24\xc0\x30\x62\x39\xf3\x91\xde\xec\x07\xcd\xa6\x71\x58\x8d\x6a\xd6\x51\x15\x70\x93\x75\xfd\xaa\x8b\x81\xed\x5a\xcd\x20\xeb\x7c\xc3\x51\xc9\x44\x42\xf1\xe2\x82\x1a\xc7\x48\xb0\x15\x3c\xad\x70\x86\x97\x54\x9e\xba\x8c\x84\xc2\x65\x0d\xd9\x75\xdc\xfc\x3f\x4b\x12\x85\x4b\xab\xdc\xf2\xba\x84\xd2\x8c\xc1\xac\x04\x18\x8e\xe8\x38\x28\x28\xd0\xb8\x0c\x77\xcf\xd8\x30\xbe\x6a\x9e\x12\x6e\xbd\xc6\x24\xe1\xfb\x8f\x3e\x19\x79\x6a\x35\x32\xc5\x54\x16\x82\xb6\x9e\x03\x75\xe6\x4b\x60\x2d\x6e\x66\xe2\x33\xa1\x98\x5f\xcf\xe7\x62\x7e\xb3\xb8\xbd\x5b\xdc\xde\x89\xaf\xdf\x7f\x48\xfd\xb7\x3d\xdc\x7a\x23\x53\xfe\xf7\x2d\xb0\x50\x68\x48\x9d\x19\x24\xe8\x53\xce\xad\x97\x00\xfa\x9d\x6d\xed\xde\xb3\x43\x75\x57\xad\x9e\xb1\x6a\x9a\x55\x85\xaf\x17\xdb\x09\xf6\x6f\x8e\x6b\x71\x6d\x8c\xa1\x24\x51\x64\xa4\x04\x3d\x9d\xdd\x70\x92\x4c\xc5\x29\x3e\x0f\xa1\x66\x4d\x93\xdb\xd6\x5c\xbe\x12\xa8\x8a\xf4\xd8\xd0\x98\x29\xc9\xed\x5a\x42\x31\x9e\x30\x7e\x8a\x31\xf0\xaa\x8f\xa4\x64\x17\x50\x6a\xb9\x89\xd1\x77\x8b\x3c\xaf\xce\x68\x19\xba\x36\x47\x67\xdf\x28\x74\xec\x6c\x7e\x7f\x28\x3c\x73\x3d\x19\xcb\xad\x9f\x62\x4e\x65\x52\x1d\x28\xa6\x9c\xe0\xe2\xe5\xca\xd5\xbb\xac\xf2\x9e\x6c\xfd\xb0\xe1\xa6\x56\x16\x86\x23\xeb\x30\x9e\xf6\xbf\x3f\x01\x00\x00\xff\xff\x9f\x6d\x39\x15\x2c\x03\x00\x00"

func trackerJsBytes() ([]byte, error) {
	return bindataRead(
		_trackerJs,
		"tracker.js",
	)
}

func trackerJs() (*asset, error) {
	bytes, err := trackerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tracker.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tracker.js": trackerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tracker.js": &bintree{trackerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

