// Code generated by go-bindata.
// sources:
// tracker.js
// DO NOT EDIT!

package js

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trackerJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x8b\xdb\x30\x10\xbd\xf7\x57\x28\x3a\x18\x09\x0b\xe7\x63\xd9\xc3\xc6\xa8\xa1\x6c\xb7\xa5\xd0\x5e\x42\xf7\x94\xba\xc1\x19\xcf\x26\x43\x6c\x49\xc8\xf2\x26\x21\xf8\xbf\x17\xc7\xf9\xa0\xa1\x97\xde\xfc\x9e\x67\xde\x7b\x9e\xe7\xc1\x5b\x63\x20\x90\x35\x42\x1e\xdf\x73\xcf\x40\x51\x7a\xa1\x18\x0a\xe8\x59\xd2\x06\x77\x6c\x8e\xeb\x97\xbd\x13\x10\x73\x2d\x16\xbf\xd3\x2c\x96\x5c\x26\xb8\x47\x10\x85\x85\xa6\x42\x13\x12\xb0\x76\x4b\x28\x53\x8f\xa1\xf1\x86\x99\xa6\x2c\x07\x9a\x66\x05\x82\x2d\xf0\x75\xfe\x4d\xd0\x62\x9c\xc9\x69\xc7\xb7\x57\x1b\xd3\xd9\x9c\x37\xae\x93\xcf\xb6\x72\xd6\xa0\x09\x02\x12\x8f\xae\xcc\x01\xc5\xf0\x57\x3c\x5c\x2b\xce\xb8\x94\x6d\x17\x2b\xe8\xfb\xf4\xfa\xd8\x2a\xd2\xa5\x85\xbc\x63\x93\x1a\x73\x0f\x9b\xa4\x6e\x56\x75\xf0\x64\xd6\x62\x2c\x93\xda\x95\x14\x04\x8f\xb8\x4c\xdf\xac\x17\xdd\x1a\x32\x32\x8c\x7a\x89\xa0\x69\x81\xd9\x65\x4a\x73\x99\x86\xa4\x44\xb3\x0e\x9b\x8f\xe3\x28\x12\xb0\x30\x22\x2c\x46\x99\xcc\x74\xf7\x30\xce\xa4\x6c\xcf\xd1\xa1\x15\x32\x05\x1d\x12\x38\x2c\xa1\x24\xd8\x2a\xea\x01\x55\x4e\x41\x14\xd1\xec\xfe\x4e\x9a\x5f\x46\x35\x8f\x21\xe6\x29\xc3\xbd\x23\x8f\xb5\xfe\xe2\x49\xb1\x87\x31\xfb\x8c\xc0\x26\xa3\xc9\x84\x4d\x1e\xa6\x8f\x4f\xd3\xc7\x27\xf6\xf5\xc7\xcf\x94\xb9\x3c\x6c\xf4\x90\xab\x7f\xe9\x51\xe5\x34\x8f\xe9\xff\xd5\xe4\x54\x80\x46\x71\xcd\xc4\xa5\xa2\x33\xa6\xca\x71\x29\xd5\x8e\x4c\x61\x77\xc9\xe9\xed\x21\x5f\x2d\x21\x2f\xcb\x55\x0e\xdb\x5b\x0d\x46\x1e\xef\x35\xfa\x7f\x40\x8b\xbf\xb5\xa2\xe8\xdd\x52\xc1\x46\x03\xad\x29\x8a\xae\xfb\xa0\x48\x61\x5f\x84\xd1\xb7\xaf\xf3\x98\x07\x7c\x29\xb1\x43\x82\x53\xb5\xe6\x32\xed\xda\x0d\x9f\x42\xf0\xb4\x6a\x02\x0a\x5e\x7b\xe0\x8a\x1f\x8f\xc9\xeb\xfc\x7b\xdb\xce\x4e\xf6\x4b\x2a\xfa\xcb\x46\x54\xb9\x1e\x50\xcc\xa3\xfc\x64\xd6\x63\x94\xb7\x2b\xae\x6c\x71\x48\x72\xe7\xd0\x14\xcf\x1b\x2a\x0b\x61\x64\x7b\x8a\x64\x64\xdb\x95\xfb\xe1\x4f\x00\x00\x00\xff\xff\x00\x5c\x96\xbc\x2e\x03\x00\x00"

func trackerJsBytes() ([]byte, error) {
	return bindataRead(
		_trackerJs,
		"tracker.js",
	)
}

func trackerJs() (*asset, error) {
	bytes, err := trackerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tracker.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tracker.js": trackerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tracker.js": &bintree{trackerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

