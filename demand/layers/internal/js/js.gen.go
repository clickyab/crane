// Code generated by go-bindata.
// sources:
// tracker.js
// DO NOT EDIT!

package js

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trackerJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x51\xcd\x6e\xdb\x3c\x10\xbc\x7f\x4f\xc1\xf0\x20\x90\x10\xa1\xd8\x0e\x72\x88\x05\x7e\x46\x91\xa6\x45\x81\xf6\x62\x34\x27\x57\x35\xe4\xd5\xc6\x5e\x98\x22\x09\x8a\x8a\x6d\x18\x7a\xf7\x42\x96\x7f\x80\xa0\x97\xde\x38\xc3\xd9\xdd\xc1\xcc\xdd\x5b\x6b\x21\x92\xb3\x42\x1e\xdf\xcb\xc0\x40\x61\x7e\xa1\x18\x09\x18\x58\xd4\x16\x77\x6c\x8e\xeb\x97\xbd\x17\x90\x72\x2d\x16\xbf\xf3\x22\x95\x5c\x66\xb8\x47\x10\x95\x83\xb6\x46\x1b\x33\x70\x6e\x4b\x28\xf3\x80\xb1\x0d\x96\xd9\xd6\x98\x3b\x8d\xb3\x0a\xc1\x55\xf8\x3a\xff\x26\x70\x31\x2e\xe4\xb4\xe7\xbb\xeb\x19\xdb\x9f\x39\x4f\x5c\x95\xcf\xae\xf6\xce\xa2\x8d\x02\xb2\x80\xde\x94\x80\xe2\xfe\x57\x7a\xbf\x56\x9c\x71\x29\xbb\xde\x56\xd4\x1f\xdd\xeb\x63\xa7\x50\x1b\x07\x65\xcf\x66\x0d\x96\x01\x36\x59\xd3\xae\x9a\x18\xc8\xae\xc5\x58\x66\x8d\x37\x14\x05\x4f\xb8\xcc\xdf\x5c\x10\xfd\x18\x31\xb2\x0c\x87\x15\x51\xe3\x82\x8a\x8b\x4a\x73\x99\xc7\xcc\xa0\x5d\xc7\xcd\xff\xe3\x24\x11\xb0\xb0\x22\x2e\x46\x85\x2c\x74\xff\x18\x17\x52\x76\x67\xeb\xd0\x09\x99\x83\x8e\x19\x1c\x96\x60\x08\xb6\x0a\x07\x40\xb5\x57\x90\x24\x38\xfb\x98\x93\xe6\x17\xa9\xe6\x29\xa4\x3c\x67\xb8\xf7\x14\xb0\xd1\x5f\x02\x29\xf6\x30\x66\x9f\x11\xd8\x64\x34\x99\xb0\xc9\xc3\xf4\xf1\x69\xfa\xf8\xc4\xbe\xfe\xf8\x99\x33\x5f\xc6\x8d\xbe\xe7\xea\x6f\xfb\xa8\xf6\x9a\xa7\xf8\xef\xdb\xe4\x54\x80\x26\x71\xf5\xc4\xa5\xba\x60\xaa\x3d\x97\x52\xed\xc8\x56\x6e\x97\x9d\x7e\x0f\xe5\x6a\x09\xa5\x31\xab\x12\xb6\xb7\x1a\x48\x1e\x87\xce\x35\x26\xc9\xbb\xa3\x8a\x8d\x86\xf7\x55\x01\x0a\x15\x0d\x51\x5b\x7d\xf3\x1f\xb0\x8c\xf8\x62\xb0\x47\x82\x53\xbd\xe6\x32\xef\xfb\x8b\x9f\x62\x0c\xb4\x6a\x23\x0a\xde\x04\xe0\x8a\x1f\x8f\xd9\xeb\xfc\x7b\xd7\xcd\x4e\x36\x96\x54\x0d\xd9\x25\x54\xfb\x01\x60\xca\x93\xf2\x74\x6c\xc0\x24\x6f\x39\xad\x5c\x75\xc8\x4a\xef\xd1\x56\xcf\x1b\x32\x95\xb0\xb2\x3b\x5b\xea\xfa\xfa\xfe\xfb\x13\x00\x00\xff\xff\x3a\x88\xb9\x62\x10\x03\x00\x00"

func trackerJsBytes() ([]byte, error) {
	return bindataRead(
		_trackerJs,
		"tracker.js",
	)
}

func trackerJs() (*asset, error) {
	bytes, err := trackerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tracker.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tracker.js": trackerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tracker.js": &bintree{trackerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

