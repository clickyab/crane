// Code generated by MockGen. DO NOT EDIT.
// Source: clickyab.com/crane/demand/entity (interfaces: Context,Creative,Campaign,Publisher,SelectedCreative,Location,Seat,Supplier,Request,User)

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	entity "clickyab.com/crane/demand/entity"
	gomock "github.com/golang/mock/gomock"
	net "net"
	url "net/url"
	reflect "reflect"
	time "time"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Brand mocks base method
func (m *MockContext) Brand() string {
	ret := m.ctrl.Call(m, "Brand")
	ret0, _ := ret[0].(string)
	return ret0
}

// Brand indicates an expected call of Brand
func (mr *MockContextMockRecorder) Brand() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Brand", reflect.TypeOf((*MockContext)(nil).Brand))
}

// Capping mocks base method
func (m *MockContext) Capping() entity.CappingMode {
	ret := m.ctrl.Call(m, "Capping")
	ret0, _ := ret[0].(entity.CappingMode)
	return ret0
}

// Capping indicates an expected call of Capping
func (mr *MockContextMockRecorder) Capping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capping", reflect.TypeOf((*MockContext)(nil).Capping))
}

// Carrier mocks base method
func (m *MockContext) Carrier() string {
	ret := m.ctrl.Call(m, "Carrier")
	ret0, _ := ret[0].(string)
	return ret0
}

// Carrier indicates an expected call of Carrier
func (mr *MockContextMockRecorder) Carrier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Carrier", reflect.TypeOf((*MockContext)(nil).Carrier))
}

// Category mocks base method
func (m *MockContext) Category() []entity.Category {
	ret := m.ctrl.Call(m, "Category")
	ret0, _ := ret[0].([]entity.Category)
	return ret0
}

// Category indicates an expected call of Category
func (mr *MockContextMockRecorder) Category() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Category", reflect.TypeOf((*MockContext)(nil).Category))
}

// ConnectionType mocks base method
func (m *MockContext) ConnectionType() int {
	ret := m.ctrl.Call(m, "ConnectionType")
	ret0, _ := ret[0].(int)
	return ret0
}

// ConnectionType indicates an expected call of ConnectionType
func (mr *MockContextMockRecorder) ConnectionType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionType", reflect.TypeOf((*MockContext)(nil).ConnectionType))
}

// Currency mocks base method
func (m *MockContext) Currency() string {
	ret := m.ctrl.Call(m, "Currency")
	ret0, _ := ret[0].(string)
	return ret0
}

// Currency indicates an expected call of Currency
func (mr *MockContextMockRecorder) Currency() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Currency", reflect.TypeOf((*MockContext)(nil).Currency))
}

// EventPage mocks base method
func (m *MockContext) EventPage() string {
	ret := m.ctrl.Call(m, "EventPage")
	ret0, _ := ret[0].(string)
	return ret0
}

// EventPage indicates an expected call of EventPage
func (mr *MockContextMockRecorder) EventPage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPage", reflect.TypeOf((*MockContext)(nil).EventPage))
}

// FatFinger mocks base method
func (m *MockContext) FatFinger() bool {
	ret := m.ctrl.Call(m, "FatFinger")
	ret0, _ := ret[0].(bool)
	return ret0
}

// FatFinger indicates an expected call of FatFinger
func (mr *MockContextMockRecorder) FatFinger() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FatFinger", reflect.TypeOf((*MockContext)(nil).FatFinger))
}

// FloorPercentage mocks base method
func (m *MockContext) FloorPercentage() int64 {
	ret := m.ctrl.Call(m, "FloorPercentage")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FloorPercentage indicates an expected call of FloorPercentage
func (mr *MockContextMockRecorder) FloorPercentage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorPercentage", reflect.TypeOf((*MockContext)(nil).FloorPercentage))
}

// IP mocks base method
func (m *MockContext) IP() net.IP {
	ret := m.ctrl.Call(m, "IP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// IP indicates an expected call of IP
func (mr *MockContextMockRecorder) IP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockContext)(nil).IP))
}

// IsMobile mocks base method
func (m *MockContext) IsMobile() bool {
	ret := m.ctrl.Call(m, "IsMobile")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMobile indicates an expected call of IsMobile
func (mr *MockContextMockRecorder) IsMobile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMobile", reflect.TypeOf((*MockContext)(nil).IsMobile))
}

// Location mocks base method
func (m *MockContext) Location() entity.Location {
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(entity.Location)
	return ret0
}

// Location indicates an expected call of Location
func (mr *MockContextMockRecorder) Location() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockContext)(nil).Location))
}

// MinBIDPercentage mocks base method
func (m *MockContext) MinBIDPercentage() int64 {
	ret := m.ctrl.Call(m, "MinBIDPercentage")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MinBIDPercentage indicates an expected call of MinBIDPercentage
func (mr *MockContextMockRecorder) MinBIDPercentage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinBIDPercentage", reflect.TypeOf((*MockContext)(nil).MinBIDPercentage))
}

// MultiVideo mocks base method
func (m *MockContext) MultiVideo() bool {
	ret := m.ctrl.Call(m, "MultiVideo")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MultiVideo indicates an expected call of MultiVideo
func (mr *MockContextMockRecorder) MultiVideo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiVideo", reflect.TypeOf((*MockContext)(nil).MultiVideo))
}

// OS mocks base method
func (m *MockContext) OS() entity.OS {
	ret := m.ctrl.Call(m, "OS")
	ret0, _ := ret[0].(entity.OS)
	return ret0
}

// OS indicates an expected call of OS
func (mr *MockContextMockRecorder) OS() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OS", reflect.TypeOf((*MockContext)(nil).OS))
}

// Parent mocks base method
func (m *MockContext) Parent() string {
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(string)
	return ret0
}

// Parent indicates an expected call of Parent
func (mr *MockContextMockRecorder) Parent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockContext)(nil).Parent))
}

// PreventDefault mocks base method
func (m *MockContext) PreventDefault() bool {
	ret := m.ctrl.Call(m, "PreventDefault")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PreventDefault indicates an expected call of PreventDefault
func (mr *MockContextMockRecorder) PreventDefault() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreventDefault", reflect.TypeOf((*MockContext)(nil).PreventDefault))
}

// Protocol mocks base method
func (m *MockContext) Protocol() entity.Protocol {
	ret := m.ctrl.Call(m, "Protocol")
	ret0, _ := ret[0].(entity.Protocol)
	return ret0
}

// Protocol indicates an expected call of Protocol
func (mr *MockContextMockRecorder) Protocol() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocol", reflect.TypeOf((*MockContext)(nil).Protocol))
}

// Publisher mocks base method
func (m *MockContext) Publisher() entity.Publisher {
	ret := m.ctrl.Call(m, "Publisher")
	ret0, _ := ret[0].(entity.Publisher)
	return ret0
}

// Publisher indicates an expected call of Publisher
func (mr *MockContextMockRecorder) Publisher() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publisher", reflect.TypeOf((*MockContext)(nil).Publisher))
}

// Rate mocks base method
func (m *MockContext) Rate() float64 {
	ret := m.ctrl.Call(m, "Rate")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Rate indicates an expected call of Rate
func (mr *MockContextMockRecorder) Rate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rate", reflect.TypeOf((*MockContext)(nil).Rate))
}

// Referrer mocks base method
func (m *MockContext) Referrer() string {
	ret := m.ctrl.Call(m, "Referrer")
	ret0, _ := ret[0].(string)
	return ret0
}

// Referrer indicates an expected call of Referrer
func (mr *MockContextMockRecorder) Referrer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Referrer", reflect.TypeOf((*MockContext)(nil).Referrer))
}

// Seats mocks base method
func (m *MockContext) Seats() []entity.Seat {
	ret := m.ctrl.Call(m, "Seats")
	ret0, _ := ret[0].([]entity.Seat)
	return ret0
}

// Seats indicates an expected call of Seats
func (mr *MockContextMockRecorder) Seats() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seats", reflect.TypeOf((*MockContext)(nil).Seats))
}

// Strategy mocks base method
func (m *MockContext) Strategy() entity.Strategy {
	ret := m.ctrl.Call(m, "Strategy")
	ret0, _ := ret[0].(entity.Strategy)
	return ret0
}

// Strategy indicates an expected call of Strategy
func (mr *MockContextMockRecorder) Strategy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Strategy", reflect.TypeOf((*MockContext)(nil).Strategy))
}

// Suspicious mocks base method
func (m *MockContext) Suspicious() int {
	ret := m.ctrl.Call(m, "Suspicious")
	ret0, _ := ret[0].(int)
	return ret0
}

// Suspicious indicates an expected call of Suspicious
func (mr *MockContextMockRecorder) Suspicious() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspicious", reflect.TypeOf((*MockContext)(nil).Suspicious))
}

// TV mocks base method
func (m *MockContext) TV() bool {
	ret := m.ctrl.Call(m, "TV")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TV indicates an expected call of TV
func (mr *MockContextMockRecorder) TV() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TV", reflect.TypeOf((*MockContext)(nil).TV))
}

// Timestamp mocks base method
func (m *MockContext) Timestamp() time.Time {
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Timestamp indicates an expected call of Timestamp
func (mr *MockContextMockRecorder) Timestamp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockContext)(nil).Timestamp))
}

// Tiny mocks base method
func (m *MockContext) Tiny() bool {
	ret := m.ctrl.Call(m, "Tiny")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Tiny indicates an expected call of Tiny
func (mr *MockContextMockRecorder) Tiny() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tiny", reflect.TypeOf((*MockContext)(nil).Tiny))
}

// Type mocks base method
func (m *MockContext) Type() entity.InputType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(entity.InputType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockContextMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockContext)(nil).Type))
}

// UnderFloor mocks base method
func (m *MockContext) UnderFloor() bool {
	ret := m.ctrl.Call(m, "UnderFloor")
	ret0, _ := ret[0].(bool)
	return ret0
}

// UnderFloor indicates an expected call of UnderFloor
func (mr *MockContextMockRecorder) UnderFloor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnderFloor", reflect.TypeOf((*MockContext)(nil).UnderFloor))
}

// User mocks base method
func (m *MockContext) User() entity.User {
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(entity.User)
	return ret0
}

// User indicates an expected call of User
func (mr *MockContextMockRecorder) User() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockContext)(nil).User))
}

// UserAgent mocks base method
func (m *MockContext) UserAgent() string {
	ret := m.ctrl.Call(m, "UserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserAgent indicates an expected call of UserAgent
func (mr *MockContextMockRecorder) UserAgent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAgent", reflect.TypeOf((*MockContext)(nil).UserAgent))
}

// MockCreative is a mock of Creative interface
type MockCreative struct {
	ctrl     *gomock.Controller
	recorder *MockCreativeMockRecorder
}

// MockCreativeMockRecorder is the mock recorder for MockCreative
type MockCreativeMockRecorder struct {
	mock *MockCreative
}

// NewMockCreative creates a new mock instance
func NewMockCreative(ctrl *gomock.Controller) *MockCreative {
	mock := &MockCreative{ctrl: ctrl}
	mock.recorder = &MockCreativeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreative) EXPECT() *MockCreativeMockRecorder {
	return m.recorder
}

// AdCTR mocks base method
func (m *MockCreative) AdCTR() float64 {
	ret := m.ctrl.Call(m, "AdCTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

// AdCTR indicates an expected call of AdCTR
func (mr *MockCreativeMockRecorder) AdCTR() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdCTR", reflect.TypeOf((*MockCreative)(nil).AdCTR))
}

// Asset mocks base method
func (m *MockCreative) Asset(arg0 entity.AssetType, arg1 int, arg2 ...entity.AssetFilter) []entity.Asset {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Asset", varargs...)
	ret0, _ := ret[0].([]entity.Asset)
	return ret0
}

// Asset indicates an expected call of Asset
func (mr *MockCreativeMockRecorder) Asset(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Asset", reflect.TypeOf((*MockCreative)(nil).Asset), varargs...)
}

// Assets mocks base method
func (m *MockCreative) Assets() []entity.Asset {
	ret := m.ctrl.Call(m, "Assets")
	ret0, _ := ret[0].([]entity.Asset)
	return ret0
}

// Assets indicates an expected call of Assets
func (mr *MockCreativeMockRecorder) Assets() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assets", reflect.TypeOf((*MockCreative)(nil).Assets))
}

// Attributes mocks base method
func (m *MockCreative) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockCreativeMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockCreative)(nil).Attributes))
}

// Campaign mocks base method
func (m *MockCreative) Campaign() entity.Campaign {
	ret := m.ctrl.Call(m, "Campaign")
	ret0, _ := ret[0].(entity.Campaign)
	return ret0
}

// Campaign indicates an expected call of Campaign
func (mr *MockCreativeMockRecorder) Campaign() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Campaign", reflect.TypeOf((*MockCreative)(nil).Campaign))
}

// CampaignAdID mocks base method
func (m *MockCreative) CampaignAdID() int64 {
	ret := m.ctrl.Call(m, "CampaignAdID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CampaignAdID indicates an expected call of CampaignAdID
func (mr *MockCreativeMockRecorder) CampaignAdID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignAdID", reflect.TypeOf((*MockCreative)(nil).CampaignAdID))
}

// Capping mocks base method
func (m *MockCreative) Capping() entity.Capping {
	ret := m.ctrl.Call(m, "Capping")
	ret0, _ := ret[0].(entity.Capping)
	return ret0
}

// Capping indicates an expected call of Capping
func (mr *MockCreativeMockRecorder) Capping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capping", reflect.TypeOf((*MockCreative)(nil).Capping))
}

// Duration mocks base method
func (m *MockCreative) Duration() int {
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(int)
	return ret0
}

// Duration indicates an expected call of Duration
func (mr *MockCreativeMockRecorder) Duration() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockCreative)(nil).Duration))
}

// Height mocks base method
func (m *MockCreative) Height() int {
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

// Height indicates an expected call of Height
func (mr *MockCreativeMockRecorder) Height() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockCreative)(nil).Height))
}

// ID mocks base method
func (m *MockCreative) ID() int64 {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockCreativeMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCreative)(nil).ID))
}

// MaxBID mocks base method
func (m *MockCreative) MaxBID() int64 {
	ret := m.ctrl.Call(m, "MaxBID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxBID indicates an expected call of MaxBID
func (mr *MockCreativeMockRecorder) MaxBID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxBID", reflect.TypeOf((*MockCreative)(nil).MaxBID))
}

// Media mocks base method
func (m *MockCreative) Media() string {
	ret := m.ctrl.Call(m, "Media")
	ret0, _ := ret[0].(string)
	return ret0
}

// Media indicates an expected call of Media
func (mr *MockCreativeMockRecorder) Media() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Media", reflect.TypeOf((*MockCreative)(nil).Media))
}

// MimeType mocks base method
func (m *MockCreative) MimeType() string {
	ret := m.ctrl.Call(m, "MimeType")
	ret0, _ := ret[0].(string)
	return ret0
}

// MimeType indicates an expected call of MimeType
func (mr *MockCreativeMockRecorder) MimeType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MimeType", reflect.TypeOf((*MockCreative)(nil).MimeType))
}

// SetCapping mocks base method
func (m *MockCreative) SetCapping(arg0 entity.Capping) {
	m.ctrl.Call(m, "SetCapping", arg0)
}

// SetCapping indicates an expected call of SetCapping
func (mr *MockCreativeMockRecorder) SetCapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCapping", reflect.TypeOf((*MockCreative)(nil).SetCapping), arg0)
}

// Size mocks base method
func (m *MockCreative) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockCreativeMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockCreative)(nil).Size))
}

// Target mocks base method
func (m *MockCreative) Target() entity.Target {
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(entity.Target)
	return ret0
}

// Target indicates an expected call of Target
func (mr *MockCreativeMockRecorder) Target() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockCreative)(nil).Target))
}

// TargetURL mocks base method
func (m *MockCreative) TargetURL() string {
	ret := m.ctrl.Call(m, "TargetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// TargetURL indicates an expected call of TargetURL
func (mr *MockCreativeMockRecorder) TargetURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetURL", reflect.TypeOf((*MockCreative)(nil).TargetURL))
}

// Type mocks base method
func (m *MockCreative) Type() entity.AdType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(entity.AdType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockCreativeMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCreative)(nil).Type))
}

// Width mocks base method
func (m *MockCreative) Width() int {
	ret := m.ctrl.Call(m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width
func (mr *MockCreativeMockRecorder) Width() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Width", reflect.TypeOf((*MockCreative)(nil).Width))
}

// MockCampaign is a mock of Campaign interface
type MockCampaign struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignMockRecorder
}

// MockCampaignMockRecorder is the mock recorder for MockCampaign
type MockCampaignMockRecorder struct {
	mock *MockCampaign
}

// NewMockCampaign creates a new mock instance
func NewMockCampaign(ctrl *gomock.Controller) *MockCampaign {
	mock := &MockCampaign{ctrl: ctrl}
	mock.recorder = &MockCampaignMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCampaign) EXPECT() *MockCampaignMockRecorder {
	return m.recorder
}

// AllowedOS mocks base method
func (m *MockCampaign) AllowedOS() []string {
	ret := m.ctrl.Call(m, "AllowedOS")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AllowedOS indicates an expected call of AllowedOS
func (mr *MockCampaignMockRecorder) AllowedOS() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowedOS", reflect.TypeOf((*MockCampaign)(nil).AllowedOS))
}

// AppBrands mocks base method
func (m *MockCampaign) AppBrands() []string {
	ret := m.ctrl.Call(m, "AppBrands")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AppBrands indicates an expected call of AppBrands
func (mr *MockCampaignMockRecorder) AppBrands() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppBrands", reflect.TypeOf((*MockCampaign)(nil).AppBrands))
}

// AppCarriers mocks base method
func (m *MockCampaign) AppCarriers() []string {
	ret := m.ctrl.Call(m, "AppCarriers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AppCarriers indicates an expected call of AppCarriers
func (mr *MockCampaignMockRecorder) AppCarriers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppCarriers", reflect.TypeOf((*MockCampaign)(nil).AppCarriers))
}

// BlackListPublisher mocks base method
func (m *MockCampaign) BlackListPublisher() []string {
	ret := m.ctrl.Call(m, "BlackListPublisher")
	ret0, _ := ret[0].([]string)
	return ret0
}

// BlackListPublisher indicates an expected call of BlackListPublisher
func (mr *MockCampaignMockRecorder) BlackListPublisher() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlackListPublisher", reflect.TypeOf((*MockCampaign)(nil).BlackListPublisher))
}

// Category mocks base method
func (m *MockCampaign) Category() []entity.Category {
	ret := m.ctrl.Call(m, "Category")
	ret0, _ := ret[0].([]entity.Category)
	return ret0
}

// Category indicates an expected call of Category
func (mr *MockCampaignMockRecorder) Category() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Category", reflect.TypeOf((*MockCampaign)(nil).Category))
}

// ConnectionType mocks base method
func (m *MockCampaign) ConnectionType() []int {
	ret := m.ctrl.Call(m, "ConnectionType")
	ret0, _ := ret[0].([]int)
	return ret0
}

// ConnectionType indicates an expected call of ConnectionType
func (mr *MockCampaignMockRecorder) ConnectionType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionType", reflect.TypeOf((*MockCampaign)(nil).ConnectionType))
}

// Country mocks base method
func (m *MockCampaign) Country() []string {
	ret := m.ctrl.Call(m, "Country")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Country indicates an expected call of Country
func (mr *MockCampaignMockRecorder) Country() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Country", reflect.TypeOf((*MockCampaign)(nil).Country))
}

// Frequency mocks base method
func (m *MockCampaign) Frequency() int {
	ret := m.ctrl.Call(m, "Frequency")
	ret0, _ := ret[0].(int)
	return ret0
}

// Frequency indicates an expected call of Frequency
func (mr *MockCampaignMockRecorder) Frequency() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Frequency", reflect.TypeOf((*MockCampaign)(nil).Frequency))
}

// Hoods mocks base method
func (m *MockCampaign) Hoods() []string {
	ret := m.ctrl.Call(m, "Hoods")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Hoods indicates an expected call of Hoods
func (mr *MockCampaignMockRecorder) Hoods() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hoods", reflect.TypeOf((*MockCampaign)(nil).Hoods))
}

// ID mocks base method
func (m *MockCampaign) ID() int64 {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockCampaignMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCampaign)(nil).ID))
}

// ISP mocks base method
func (m *MockCampaign) ISP() []string {
	ret := m.ctrl.Call(m, "ISP")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ISP indicates an expected call of ISP
func (mr *MockCampaignMockRecorder) ISP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ISP", reflect.TypeOf((*MockCampaign)(nil).ISP))
}

// LatLon mocks base method
func (m *MockCampaign) LatLon() (bool, float64, float64, float64) {
	ret := m.ctrl.Call(m, "LatLon")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(float64)
	return ret0, ret1, ret2, ret3
}

// LatLon indicates an expected call of LatLon
func (mr *MockCampaignMockRecorder) LatLon() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatLon", reflect.TypeOf((*MockCampaign)(nil).LatLon))
}

// Name mocks base method
func (m *MockCampaign) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockCampaignMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCampaign)(nil).Name))
}

// Province mocks base method
func (m *MockCampaign) Province() []string {
	ret := m.ctrl.Call(m, "Province")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Province indicates an expected call of Province
func (mr *MockCampaignMockRecorder) Province() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Province", reflect.TypeOf((*MockCampaign)(nil).Province))
}

// Strategy mocks base method
func (m *MockCampaign) Strategy() entity.Strategy {
	ret := m.ctrl.Call(m, "Strategy")
	ret0, _ := ret[0].(entity.Strategy)
	return ret0
}

// Strategy indicates an expected call of Strategy
func (mr *MockCampaignMockRecorder) Strategy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Strategy", reflect.TypeOf((*MockCampaign)(nil).Strategy))
}

// Web mocks base method
func (m *MockCampaign) Web() bool {
	ret := m.ctrl.Call(m, "Web")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Web indicates an expected call of Web
func (mr *MockCampaignMockRecorder) Web() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Web", reflect.TypeOf((*MockCampaign)(nil).Web))
}

// WebMobile mocks base method
func (m *MockCampaign) WebMobile() bool {
	ret := m.ctrl.Call(m, "WebMobile")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WebMobile indicates an expected call of WebMobile
func (mr *MockCampaignMockRecorder) WebMobile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebMobile", reflect.TypeOf((*MockCampaign)(nil).WebMobile))
}

// WhiteListPublisher mocks base method
func (m *MockCampaign) WhiteListPublisher() []string {
	ret := m.ctrl.Call(m, "WhiteListPublisher")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WhiteListPublisher indicates an expected call of WhiteListPublisher
func (mr *MockCampaignMockRecorder) WhiteListPublisher() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhiteListPublisher", reflect.TypeOf((*MockCampaign)(nil).WhiteListPublisher))
}

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockPublisher) Attributes() map[entity.PublisherAttributes]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[entity.PublisherAttributes]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockPublisherMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockPublisher)(nil).Attributes))
}

// CTR mocks base method
func (m *MockPublisher) CTR(arg0 int) float64 {
	ret := m.ctrl.Call(m, "CTR", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CTR indicates an expected call of CTR
func (mr *MockPublisherMockRecorder) CTR(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CTR", reflect.TypeOf((*MockPublisher)(nil).CTR), arg0)
}

// Categories mocks base method
func (m *MockPublisher) Categories() []string {
	ret := m.ctrl.Call(m, "Categories")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Categories indicates an expected call of Categories
func (mr *MockPublisherMockRecorder) Categories() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Categories", reflect.TypeOf((*MockPublisher)(nil).Categories))
}

// FloorCPM mocks base method
func (m *MockPublisher) FloorCPM() int64 {
	ret := m.ctrl.Call(m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FloorCPM indicates an expected call of FloorCPM
func (mr *MockPublisherMockRecorder) FloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorCPM", reflect.TypeOf((*MockPublisher)(nil).FloorCPM))
}

// ID mocks base method
func (m *MockPublisher) ID() int64 {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockPublisherMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPublisher)(nil).ID))
}

// MinBid mocks base method
func (m *MockPublisher) MinBid() int64 {
	ret := m.ctrl.Call(m, "MinBid")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MinBid indicates an expected call of MinBid
func (mr *MockPublisherMockRecorder) MinBid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinBid", reflect.TypeOf((*MockPublisher)(nil).MinBid))
}

// MinCPC mocks base method
func (m *MockPublisher) MinCPC(arg0 string) float64 {
	ret := m.ctrl.Call(m, "MinCPC", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// MinCPC indicates an expected call of MinCPC
func (mr *MockPublisherMockRecorder) MinCPC(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinCPC", reflect.TypeOf((*MockPublisher)(nil).MinCPC), arg0)
}

// Name mocks base method
func (m *MockPublisher) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPublisherMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPublisher)(nil).Name))
}

// Supplier mocks base method
func (m *MockPublisher) Supplier() entity.Supplier {
	ret := m.ctrl.Call(m, "Supplier")
	ret0, _ := ret[0].(entity.Supplier)
	return ret0
}

// Supplier indicates an expected call of Supplier
func (mr *MockPublisherMockRecorder) Supplier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supplier", reflect.TypeOf((*MockPublisher)(nil).Supplier))
}

// Type mocks base method
func (m *MockPublisher) Type() entity.PublisherType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(entity.PublisherType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockPublisherMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockPublisher)(nil).Type))
}

// MockSelectedCreative is a mock of SelectedCreative interface
type MockSelectedCreative struct {
	ctrl     *gomock.Controller
	recorder *MockSelectedCreativeMockRecorder
}

// MockSelectedCreativeMockRecorder is the mock recorder for MockSelectedCreative
type MockSelectedCreativeMockRecorder struct {
	mock *MockSelectedCreative
}

// NewMockSelectedCreative creates a new mock instance
func NewMockSelectedCreative(ctrl *gomock.Controller) *MockSelectedCreative {
	mock := &MockSelectedCreative{ctrl: ctrl}
	mock.recorder = &MockSelectedCreativeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSelectedCreative) EXPECT() *MockSelectedCreativeMockRecorder {
	return m.recorder
}

// AdCTR mocks base method
func (m *MockSelectedCreative) AdCTR() float64 {
	ret := m.ctrl.Call(m, "AdCTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

// AdCTR indicates an expected call of AdCTR
func (mr *MockSelectedCreativeMockRecorder) AdCTR() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdCTR", reflect.TypeOf((*MockSelectedCreative)(nil).AdCTR))
}

// Asset mocks base method
func (m *MockSelectedCreative) Asset(arg0 entity.AssetType, arg1 int, arg2 ...entity.AssetFilter) []entity.Asset {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Asset", varargs...)
	ret0, _ := ret[0].([]entity.Asset)
	return ret0
}

// Asset indicates an expected call of Asset
func (mr *MockSelectedCreativeMockRecorder) Asset(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Asset", reflect.TypeOf((*MockSelectedCreative)(nil).Asset), varargs...)
}

// Assets mocks base method
func (m *MockSelectedCreative) Assets() []entity.Asset {
	ret := m.ctrl.Call(m, "Assets")
	ret0, _ := ret[0].([]entity.Asset)
	return ret0
}

// Assets indicates an expected call of Assets
func (mr *MockSelectedCreativeMockRecorder) Assets() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assets", reflect.TypeOf((*MockSelectedCreative)(nil).Assets))
}

// Attributes mocks base method
func (m *MockSelectedCreative) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockSelectedCreativeMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockSelectedCreative)(nil).Attributes))
}

// CalculatedCPC mocks base method
func (m *MockSelectedCreative) CalculatedCPC() float64 {
	ret := m.ctrl.Call(m, "CalculatedCPC")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CalculatedCPC indicates an expected call of CalculatedCPC
func (mr *MockSelectedCreativeMockRecorder) CalculatedCPC() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatedCPC", reflect.TypeOf((*MockSelectedCreative)(nil).CalculatedCPC))
}

// CalculatedCPM mocks base method
func (m *MockSelectedCreative) CalculatedCPM() float64 {
	ret := m.ctrl.Call(m, "CalculatedCPM")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CalculatedCPM indicates an expected call of CalculatedCPM
func (mr *MockSelectedCreativeMockRecorder) CalculatedCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatedCPM", reflect.TypeOf((*MockSelectedCreative)(nil).CalculatedCPM))
}

// CalculatedCTR mocks base method
func (m *MockSelectedCreative) CalculatedCTR() float64 {
	ret := m.ctrl.Call(m, "CalculatedCTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CalculatedCTR indicates an expected call of CalculatedCTR
func (mr *MockSelectedCreativeMockRecorder) CalculatedCTR() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatedCTR", reflect.TypeOf((*MockSelectedCreative)(nil).CalculatedCTR))
}

// Campaign mocks base method
func (m *MockSelectedCreative) Campaign() entity.Campaign {
	ret := m.ctrl.Call(m, "Campaign")
	ret0, _ := ret[0].(entity.Campaign)
	return ret0
}

// Campaign indicates an expected call of Campaign
func (mr *MockSelectedCreativeMockRecorder) Campaign() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Campaign", reflect.TypeOf((*MockSelectedCreative)(nil).Campaign))
}

// CampaignAdID mocks base method
func (m *MockSelectedCreative) CampaignAdID() int64 {
	ret := m.ctrl.Call(m, "CampaignAdID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CampaignAdID indicates an expected call of CampaignAdID
func (mr *MockSelectedCreativeMockRecorder) CampaignAdID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignAdID", reflect.TypeOf((*MockSelectedCreative)(nil).CampaignAdID))
}

// Capping mocks base method
func (m *MockSelectedCreative) Capping() entity.Capping {
	ret := m.ctrl.Call(m, "Capping")
	ret0, _ := ret[0].(entity.Capping)
	return ret0
}

// Capping indicates an expected call of Capping
func (mr *MockSelectedCreativeMockRecorder) Capping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capping", reflect.TypeOf((*MockSelectedCreative)(nil).Capping))
}

// Duration mocks base method
func (m *MockSelectedCreative) Duration() int {
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(int)
	return ret0
}

// Duration indicates an expected call of Duration
func (mr *MockSelectedCreativeMockRecorder) Duration() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockSelectedCreative)(nil).Duration))
}

// Height mocks base method
func (m *MockSelectedCreative) Height() int {
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

// Height indicates an expected call of Height
func (mr *MockSelectedCreativeMockRecorder) Height() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockSelectedCreative)(nil).Height))
}

// ID mocks base method
func (m *MockSelectedCreative) ID() int64 {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockSelectedCreativeMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSelectedCreative)(nil).ID))
}

// IsSecBid mocks base method
func (m *MockSelectedCreative) IsSecBid() bool {
	ret := m.ctrl.Call(m, "IsSecBid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSecBid indicates an expected call of IsSecBid
func (mr *MockSelectedCreativeMockRecorder) IsSecBid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSecBid", reflect.TypeOf((*MockSelectedCreative)(nil).IsSecBid))
}

// MaxBID mocks base method
func (m *MockSelectedCreative) MaxBID() int64 {
	ret := m.ctrl.Call(m, "MaxBID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxBID indicates an expected call of MaxBID
func (mr *MockSelectedCreativeMockRecorder) MaxBID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxBID", reflect.TypeOf((*MockSelectedCreative)(nil).MaxBID))
}

// Media mocks base method
func (m *MockSelectedCreative) Media() string {
	ret := m.ctrl.Call(m, "Media")
	ret0, _ := ret[0].(string)
	return ret0
}

// Media indicates an expected call of Media
func (mr *MockSelectedCreativeMockRecorder) Media() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Media", reflect.TypeOf((*MockSelectedCreative)(nil).Media))
}

// MimeType mocks base method
func (m *MockSelectedCreative) MimeType() string {
	ret := m.ctrl.Call(m, "MimeType")
	ret0, _ := ret[0].(string)
	return ret0
}

// MimeType indicates an expected call of MimeType
func (mr *MockSelectedCreativeMockRecorder) MimeType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MimeType", reflect.TypeOf((*MockSelectedCreative)(nil).MimeType))
}

// SetCapping mocks base method
func (m *MockSelectedCreative) SetCapping(arg0 entity.Capping) {
	m.ctrl.Call(m, "SetCapping", arg0)
}

// SetCapping indicates an expected call of SetCapping
func (mr *MockSelectedCreativeMockRecorder) SetCapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCapping", reflect.TypeOf((*MockSelectedCreative)(nil).SetCapping), arg0)
}

// Size mocks base method
func (m *MockSelectedCreative) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockSelectedCreativeMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockSelectedCreative)(nil).Size))
}

// Target mocks base method
func (m *MockSelectedCreative) Target() entity.Target {
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(entity.Target)
	return ret0
}

// Target indicates an expected call of Target
func (mr *MockSelectedCreativeMockRecorder) Target() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockSelectedCreative)(nil).Target))
}

// TargetURL mocks base method
func (m *MockSelectedCreative) TargetURL() string {
	ret := m.ctrl.Call(m, "TargetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// TargetURL indicates an expected call of TargetURL
func (mr *MockSelectedCreativeMockRecorder) TargetURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetURL", reflect.TypeOf((*MockSelectedCreative)(nil).TargetURL))
}

// Type mocks base method
func (m *MockSelectedCreative) Type() entity.AdType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(entity.AdType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockSelectedCreativeMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockSelectedCreative)(nil).Type))
}

// Width mocks base method
func (m *MockSelectedCreative) Width() int {
	ret := m.ctrl.Call(m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width
func (mr *MockSelectedCreativeMockRecorder) Width() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Width", reflect.TypeOf((*MockSelectedCreative)(nil).Width))
}

// MockLocation is a mock of Location interface
type MockLocation struct {
	ctrl     *gomock.Controller
	recorder *MockLocationMockRecorder
}

// MockLocationMockRecorder is the mock recorder for MockLocation
type MockLocationMockRecorder struct {
	mock *MockLocation
}

// NewMockLocation creates a new mock instance
func NewMockLocation(ctrl *gomock.Controller) *MockLocation {
	mock := &MockLocation{ctrl: ctrl}
	mock.recorder = &MockLocationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocation) EXPECT() *MockLocationMockRecorder {
	return m.recorder
}

// Country mocks base method
func (m *MockLocation) Country() entity.Country {
	ret := m.ctrl.Call(m, "Country")
	ret0, _ := ret[0].(entity.Country)
	return ret0
}

// Country indicates an expected call of Country
func (mr *MockLocationMockRecorder) Country() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Country", reflect.TypeOf((*MockLocation)(nil).Country))
}

// ISP mocks base method
func (m *MockLocation) ISP() entity.ISP {
	ret := m.ctrl.Call(m, "ISP")
	ret0, _ := ret[0].(entity.ISP)
	return ret0
}

// ISP indicates an expected call of ISP
func (mr *MockLocationMockRecorder) ISP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ISP", reflect.TypeOf((*MockLocation)(nil).ISP))
}

// LatLon mocks base method
func (m *MockLocation) LatLon() entity.LatLon {
	ret := m.ctrl.Call(m, "LatLon")
	ret0, _ := ret[0].(entity.LatLon)
	return ret0
}

// LatLon indicates an expected call of LatLon
func (mr *MockLocationMockRecorder) LatLon() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatLon", reflect.TypeOf((*MockLocation)(nil).LatLon))
}

// Province mocks base method
func (m *MockLocation) Province() entity.Province {
	ret := m.ctrl.Call(m, "Province")
	ret0, _ := ret[0].(entity.Province)
	return ret0
}

// Province indicates an expected call of Province
func (mr *MockLocationMockRecorder) Province() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Province", reflect.TypeOf((*MockLocation)(nil).Province))
}

// MockSeat is a mock of Seat interface
type MockSeat struct {
	ctrl     *gomock.Controller
	recorder *MockSeatMockRecorder
}

// MockSeatMockRecorder is the mock recorder for MockSeat
type MockSeatMockRecorder struct {
	mock *MockSeat
}

// NewMockSeat creates a new mock instance
func NewMockSeat(ctrl *gomock.Controller) *MockSeat {
	mock := &MockSeat{ctrl: ctrl}
	mock.recorder = &MockSeatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeat) EXPECT() *MockSeatMockRecorder {
	return m.recorder
}

// Acceptable mocks base method
func (m *MockSeat) Acceptable(arg0 entity.Creative) bool {
	ret := m.ctrl.Call(m, "Acceptable", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Acceptable indicates an expected call of Acceptable
func (mr *MockSeatMockRecorder) Acceptable(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acceptable", reflect.TypeOf((*MockSeat)(nil).Acceptable), arg0)
}

// Bid mocks base method
func (m *MockSeat) Bid() float64 {
	ret := m.ctrl.Call(m, "Bid")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Bid indicates an expected call of Bid
func (mr *MockSeatMockRecorder) Bid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bid", reflect.TypeOf((*MockSeat)(nil).Bid))
}

// CPM mocks base method
func (m *MockSeat) CPM() float64 {
	ret := m.ctrl.Call(m, "CPM")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CPM indicates an expected call of CPM
func (mr *MockSeatMockRecorder) CPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CPM", reflect.TypeOf((*MockSeat)(nil).CPM))
}

// CTR mocks base method
func (m *MockSeat) CTR() float64 {
	ret := m.ctrl.Call(m, "CTR")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CTR indicates an expected call of CTR
func (mr *MockSeatMockRecorder) CTR() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CTR", reflect.TypeOf((*MockSeat)(nil).CTR))
}

// ClickURL mocks base method
func (m *MockSeat) ClickURL() *url.URL {
	ret := m.ctrl.Call(m, "ClickURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// ClickURL indicates an expected call of ClickURL
func (mr *MockSeatMockRecorder) ClickURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickURL", reflect.TypeOf((*MockSeat)(nil).ClickURL))
}

// FatFinger mocks base method
func (m *MockSeat) FatFinger() bool {
	ret := m.ctrl.Call(m, "FatFinger")
	ret0, _ := ret[0].(bool)
	return ret0
}

// FatFinger indicates an expected call of FatFinger
func (mr *MockSeatMockRecorder) FatFinger() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FatFinger", reflect.TypeOf((*MockSeat)(nil).FatFinger))
}

// Height mocks base method
func (m *MockSeat) Height() int {
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

// Height indicates an expected call of Height
func (mr *MockSeatMockRecorder) Height() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockSeat)(nil).Height))
}

// ImpressionTime mocks base method
func (m *MockSeat) ImpressionTime() time.Time {
	ret := m.ctrl.Call(m, "ImpressionTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ImpressionTime indicates an expected call of ImpressionTime
func (mr *MockSeatMockRecorder) ImpressionTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImpressionTime", reflect.TypeOf((*MockSeat)(nil).ImpressionTime))
}

// ImpressionURL mocks base method
func (m *MockSeat) ImpressionURL() *url.URL {
	ret := m.ctrl.Call(m, "ImpressionURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// ImpressionURL indicates an expected call of ImpressionURL
func (mr *MockSeatMockRecorder) ImpressionURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImpressionURL", reflect.TypeOf((*MockSeat)(nil).ImpressionURL))
}

// MinBid mocks base method
func (m *MockSeat) MinBid() int64 {
	ret := m.ctrl.Call(m, "MinBid")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MinBid indicates an expected call of MinBid
func (mr *MockSeatMockRecorder) MinBid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinBid", reflect.TypeOf((*MockSeat)(nil).MinBid))
}

// MinCPC mocks base method
func (m *MockSeat) MinCPC() float64 {
	ret := m.ctrl.Call(m, "MinCPC")
	ret0, _ := ret[0].(float64)
	return ret0
}

// MinCPC indicates an expected call of MinCPC
func (mr *MockSeatMockRecorder) MinCPC() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinCPC", reflect.TypeOf((*MockSeat)(nil).MinCPC))
}

// MinCPM mocks base method
func (m *MockSeat) MinCPM() float64 {
	ret := m.ctrl.Call(m, "MinCPM")
	ret0, _ := ret[0].(float64)
	return ret0
}

// MinCPM indicates an expected call of MinCPM
func (mr *MockSeatMockRecorder) MinCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinCPM", reflect.TypeOf((*MockSeat)(nil).MinCPM))
}

// PublicID mocks base method
func (m *MockSeat) PublicID() string {
	ret := m.ctrl.Call(m, "PublicID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PublicID indicates an expected call of PublicID
func (mr *MockSeatMockRecorder) PublicID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicID", reflect.TypeOf((*MockSeat)(nil).PublicID))
}

// RequestType mocks base method
func (m *MockSeat) RequestType() entity.RequestType {
	ret := m.ctrl.Call(m, "RequestType")
	ret0, _ := ret[0].(entity.RequestType)
	return ret0
}

// RequestType indicates an expected call of RequestType
func (mr *MockSeatMockRecorder) RequestType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestType", reflect.TypeOf((*MockSeat)(nil).RequestType))
}

// ReservedHash mocks base method
func (m *MockSeat) ReservedHash() string {
	ret := m.ctrl.Call(m, "ReservedHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// ReservedHash indicates an expected call of ReservedHash
func (mr *MockSeatMockRecorder) ReservedHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservedHash", reflect.TypeOf((*MockSeat)(nil).ReservedHash))
}

// SetWinnerAdvertise mocks base method
func (m *MockSeat) SetWinnerAdvertise(arg0 entity.Creative, arg1, arg2 float64) {
	m.ctrl.Call(m, "SetWinnerAdvertise", arg0, arg1, arg2)
}

// SetWinnerAdvertise indicates an expected call of SetWinnerAdvertise
func (mr *MockSeatMockRecorder) SetWinnerAdvertise(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWinnerAdvertise", reflect.TypeOf((*MockSeat)(nil).SetWinnerAdvertise), arg0, arg1, arg2)
}

// Size mocks base method
func (m *MockSeat) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockSeatMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockSeat)(nil).Size))
}

// SoftCPM mocks base method
func (m *MockSeat) SoftCPM() float64 {
	ret := m.ctrl.Call(m, "SoftCPM")
	ret0, _ := ret[0].(float64)
	return ret0
}

// SoftCPM indicates an expected call of SoftCPM
func (mr *MockSeatMockRecorder) SoftCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftCPM", reflect.TypeOf((*MockSeat)(nil).SoftCPM))
}

// SupplierCPM mocks base method
func (m *MockSeat) SupplierCPM() float64 {
	ret := m.ctrl.Call(m, "SupplierCPM")
	ret0, _ := ret[0].(float64)
	return ret0
}

// SupplierCPM indicates an expected call of SupplierCPM
func (mr *MockSeatMockRecorder) SupplierCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupplierCPM", reflect.TypeOf((*MockSeat)(nil).SupplierCPM))
}

// Type mocks base method
func (m *MockSeat) Type() entity.InputType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(entity.InputType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockSeatMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockSeat)(nil).Type))
}

// Width mocks base method
func (m *MockSeat) Width() int {
	ret := m.ctrl.Call(m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width
func (mr *MockSeatMockRecorder) Width() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Width", reflect.TypeOf((*MockSeat)(nil).Width))
}

// WinNoticeRequest mocks base method
func (m *MockSeat) WinNoticeRequest() *url.URL {
	ret := m.ctrl.Call(m, "WinNoticeRequest")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// WinNoticeRequest indicates an expected call of WinNoticeRequest
func (mr *MockSeatMockRecorder) WinNoticeRequest() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WinNoticeRequest", reflect.TypeOf((*MockSeat)(nil).WinNoticeRequest))
}

// WinnerAdvertise mocks base method
func (m *MockSeat) WinnerAdvertise() entity.Creative {
	ret := m.ctrl.Call(m, "WinnerAdvertise")
	ret0, _ := ret[0].(entity.Creative)
	return ret0
}

// WinnerAdvertise indicates an expected call of WinnerAdvertise
func (mr *MockSeatMockRecorder) WinnerAdvertise() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WinnerAdvertise", reflect.TypeOf((*MockSeat)(nil).WinnerAdvertise))
}

// MockSupplier is a mock of Supplier interface
type MockSupplier struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierMockRecorder
}

// MockSupplierMockRecorder is the mock recorder for MockSupplier
type MockSupplierMockRecorder struct {
	mock *MockSupplier
}

// NewMockSupplier creates a new mock instance
func NewMockSupplier(ctrl *gomock.Controller) *MockSupplier {
	mock := &MockSupplier{ctrl: ctrl}
	mock.recorder = &MockSupplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSupplier) EXPECT() *MockSupplierMockRecorder {
	return m.recorder
}

// AllowCreate mocks base method
func (m *MockSupplier) AllowCreate() bool {
	ret := m.ctrl.Call(m, "AllowCreate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowCreate indicates an expected call of AllowCreate
func (mr *MockSupplierMockRecorder) AllowCreate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowCreate", reflect.TypeOf((*MockSupplier)(nil).AllowCreate))
}

// DefaultCTR mocks base method
func (m *MockSupplier) DefaultCTR(arg0, arg1 string) float64 {
	ret := m.ctrl.Call(m, "DefaultCTR", arg0, arg1)
	ret0, _ := ret[0].(float64)
	return ret0
}

// DefaultCTR indicates an expected call of DefaultCTR
func (mr *MockSupplierMockRecorder) DefaultCTR(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultCTR", reflect.TypeOf((*MockSupplier)(nil).DefaultCTR), arg0, arg1)
}

// DefaultMinBid mocks base method
func (m *MockSupplier) DefaultMinBid() int64 {
	ret := m.ctrl.Call(m, "DefaultMinBid")
	ret0, _ := ret[0].(int64)
	return ret0
}

// DefaultMinBid indicates an expected call of DefaultMinBid
func (mr *MockSupplierMockRecorder) DefaultMinBid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultMinBid", reflect.TypeOf((*MockSupplier)(nil).DefaultMinBid))
}

// Name mocks base method
func (m *MockSupplier) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockSupplierMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSupplier)(nil).Name))
}

// Rate mocks base method
func (m *MockSupplier) Rate() int {
	ret := m.ctrl.Call(m, "Rate")
	ret0, _ := ret[0].(int)
	return ret0
}

// Rate indicates an expected call of Rate
func (mr *MockSupplierMockRecorder) Rate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rate", reflect.TypeOf((*MockSupplier)(nil).Rate))
}

// Share mocks base method
func (m *MockSupplier) Share() int {
	ret := m.ctrl.Call(m, "Share")
	ret0, _ := ret[0].(int)
	return ret0
}

// Share indicates an expected call of Share
func (mr *MockSupplierMockRecorder) Share() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Share", reflect.TypeOf((*MockSupplier)(nil).Share))
}

// ShowDomain mocks base method
func (m *MockSupplier) ShowDomain() string {
	ret := m.ctrl.Call(m, "ShowDomain")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShowDomain indicates an expected call of ShowDomain
func (mr *MockSupplierMockRecorder) ShowDomain() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowDomain", reflect.TypeOf((*MockSupplier)(nil).ShowDomain))
}

// SoftFloorCPC mocks base method
func (m *MockSupplier) SoftFloorCPC(arg0, arg1 string) int64 {
	ret := m.ctrl.Call(m, "SoftFloorCPC", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// SoftFloorCPC indicates an expected call of SoftFloorCPC
func (mr *MockSupplierMockRecorder) SoftFloorCPC(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftFloorCPC", reflect.TypeOf((*MockSupplier)(nil).SoftFloorCPC), arg0, arg1)
}

// SoftFloorCPM mocks base method
func (m *MockSupplier) SoftFloorCPM(arg0, arg1 string) int64 {
	ret := m.ctrl.Call(m, "SoftFloorCPM", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// SoftFloorCPM indicates an expected call of SoftFloorCPM
func (mr *MockSupplierMockRecorder) SoftFloorCPM(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftFloorCPM", reflect.TypeOf((*MockSupplier)(nil).SoftFloorCPM), arg0, arg1)
}

// Strategy mocks base method
func (m *MockSupplier) Strategy() entity.Strategy {
	ret := m.ctrl.Call(m, "Strategy")
	ret0, _ := ret[0].(entity.Strategy)
	return ret0
}

// Strategy indicates an expected call of Strategy
func (mr *MockSupplierMockRecorder) Strategy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Strategy", reflect.TypeOf((*MockSupplier)(nil).Strategy))
}

// TinyLogo mocks base method
func (m *MockSupplier) TinyLogo() string {
	ret := m.ctrl.Call(m, "TinyLogo")
	ret0, _ := ret[0].(string)
	return ret0
}

// TinyLogo indicates an expected call of TinyLogo
func (mr *MockSupplierMockRecorder) TinyLogo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TinyLogo", reflect.TypeOf((*MockSupplier)(nil).TinyLogo))
}

// TinyMark mocks base method
func (m *MockSupplier) TinyMark() bool {
	ret := m.ctrl.Call(m, "TinyMark")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TinyMark indicates an expected call of TinyMark
func (mr *MockSupplierMockRecorder) TinyMark() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TinyMark", reflect.TypeOf((*MockSupplier)(nil).TinyMark))
}

// TinyURL mocks base method
func (m *MockSupplier) TinyURL() string {
	ret := m.ctrl.Call(m, "TinyURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// TinyURL indicates an expected call of TinyURL
func (mr *MockSupplierMockRecorder) TinyURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TinyURL", reflect.TypeOf((*MockSupplier)(nil).TinyURL))
}

// Token mocks base method
func (m *MockSupplier) Token() string {
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token
func (mr *MockSupplierMockRecorder) Token() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockSupplier)(nil).Token))
}

// UserID mocks base method
func (m *MockSupplier) UserID() int64 {
	ret := m.ctrl.Call(m, "UserID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// UserID indicates an expected call of UserID
func (mr *MockSupplierMockRecorder) UserID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockSupplier)(nil).UserID))
}

// MockRequest is a mock of Request interface
type MockRequest struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMockRecorder
}

// MockRequestMockRecorder is the mock recorder for MockRequest
type MockRequestMockRecorder struct {
	mock *MockRequest
}

// NewMockRequest creates a new mock instance
func NewMockRequest(ctrl *gomock.Controller) *MockRequest {
	mock := &MockRequest{ctrl: ctrl}
	mock.recorder = &MockRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequest) EXPECT() *MockRequestMockRecorder {
	return m.recorder
}

// EventPage mocks base method
func (m *MockRequest) EventPage() string {
	ret := m.ctrl.Call(m, "EventPage")
	ret0, _ := ret[0].(string)
	return ret0
}

// EventPage indicates an expected call of EventPage
func (mr *MockRequestMockRecorder) EventPage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPage", reflect.TypeOf((*MockRequest)(nil).EventPage))
}

// IP mocks base method
func (m *MockRequest) IP() net.IP {
	ret := m.ctrl.Call(m, "IP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// IP indicates an expected call of IP
func (mr *MockRequestMockRecorder) IP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockRequest)(nil).IP))
}

// IsMobile mocks base method
func (m *MockRequest) IsMobile() bool {
	ret := m.ctrl.Call(m, "IsMobile")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMobile indicates an expected call of IsMobile
func (mr *MockRequestMockRecorder) IsMobile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMobile", reflect.TypeOf((*MockRequest)(nil).IsMobile))
}

// Location mocks base method
func (m *MockRequest) Location() entity.Location {
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(entity.Location)
	return ret0
}

// Location indicates an expected call of Location
func (mr *MockRequestMockRecorder) Location() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockRequest)(nil).Location))
}

// OS mocks base method
func (m *MockRequest) OS() entity.OS {
	ret := m.ctrl.Call(m, "OS")
	ret0, _ := ret[0].(entity.OS)
	return ret0
}

// OS indicates an expected call of OS
func (mr *MockRequestMockRecorder) OS() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OS", reflect.TypeOf((*MockRequest)(nil).OS))
}

// Parent mocks base method
func (m *MockRequest) Parent() string {
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(string)
	return ret0
}

// Parent indicates an expected call of Parent
func (mr *MockRequestMockRecorder) Parent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockRequest)(nil).Parent))
}

// Protocol mocks base method
func (m *MockRequest) Protocol() entity.Protocol {
	ret := m.ctrl.Call(m, "Protocol")
	ret0, _ := ret[0].(entity.Protocol)
	return ret0
}

// Protocol indicates an expected call of Protocol
func (mr *MockRequestMockRecorder) Protocol() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocol", reflect.TypeOf((*MockRequest)(nil).Protocol))
}

// Referrer mocks base method
func (m *MockRequest) Referrer() string {
	ret := m.ctrl.Call(m, "Referrer")
	ret0, _ := ret[0].(string)
	return ret0
}

// Referrer indicates an expected call of Referrer
func (mr *MockRequestMockRecorder) Referrer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Referrer", reflect.TypeOf((*MockRequest)(nil).Referrer))
}

// Suspicious mocks base method
func (m *MockRequest) Suspicious() int {
	ret := m.ctrl.Call(m, "Suspicious")
	ret0, _ := ret[0].(int)
	return ret0
}

// Suspicious indicates an expected call of Suspicious
func (mr *MockRequestMockRecorder) Suspicious() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspicious", reflect.TypeOf((*MockRequest)(nil).Suspicious))
}

// Timestamp mocks base method
func (m *MockRequest) Timestamp() time.Time {
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Timestamp indicates an expected call of Timestamp
func (mr *MockRequestMockRecorder) Timestamp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockRequest)(nil).Timestamp))
}

// UserAgent mocks base method
func (m *MockRequest) UserAgent() string {
	ret := m.ctrl.Call(m, "UserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserAgent indicates an expected call of UserAgent
func (mr *MockRequestMockRecorder) UserAgent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAgent", reflect.TypeOf((*MockRequest)(nil).UserAgent))
}

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockUser) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockUserMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockUser)(nil).ID))
}
